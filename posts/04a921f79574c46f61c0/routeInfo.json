{"template":"__react_static_root__/src/components/QiitaPost","sharedHashesByProp":{},"data":{"post":{"rendered_body":"\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>　最近サーバレスアーキテクチャに興味を持っています。以下2エントリーはGoogle Apps ScriptでJava Scriptを使った時の記事ですが、今回はAWS上のLambdaを使って、サーバーレスでPythonコードを実行させることをやっていきたいと思います。記事の内容は、Pythonほぼ初めまして&amp;&amp;AWSほぼ初めましての人が、LambdaとDynamoDBでいろいろできるようになるまでの記録を書いていきます。<br>\n　また最初AWS分かんなさすぎて最初は絶望していたし、Lambdaはエラー出まくって初見殺しだし、Python興味はあるけど使ったこと少なめと、かなり初心者目線で記事を書いていきたいと思ってます。写真多め、初心者がわかる程度の内容を、ひとつずつ書いていく感じですので、PythonistとAWS上級者の方は新しいことはないかと思いますが、どうぞよろしくお願いします。</p>\n\n<p>この前書いた記事<br>\n- <a href=\"http://qiita.com/ykhirao/items/782e20ab0465533c48f6\" id=\"reference-15eb3319b9855f190901\">月末営業日にタスクをリマインドする</a><br>\n- <a href=\"http://qiita.com/ykhirao/items/09ebaedd0f6f0438f422\" id=\"reference-29cb99f0d0f1d9c020a7\">Googleカレンダー 自社版</a></p>\n\n<h2>\n<span id=\"前提\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90\"><i class=\"fa fa-link\"></i></a>前提</h2>\n\n<p>AWS初めまして<br>\nPython歴2週間くらい<br>\nAWSサービス登録済、無料枠中</p>\n\n<h1>\n<span id=\"aws\" class=\"fragment\"></span><a href=\"#aws\"><i class=\"fa fa-link\"></i></a>AWS</h1>\n\n<p>自分の場合は、AWSのサービスの多さに混乱したので、どのサービスがどのサービスとつながってるのか、まず概要を勉強しました。下記あたりが参考になるかと思います。またKindleで無料の書籍とか探しました。「ってますが、自分で使いながら、この記事を見直しながらいろいろやってみました。</p>\n\n<p><a href=\"http://qiita.com/kohashi/items/1bb952313fb695f12577\" id=\"reference-a810c093d7c16de23cbb\">「AWS is 何」を3行でまとめてみるよ</a><br>\n<a href=\"http://qiita.com/chroju/items/c7ad918d79b0288bc490\" id=\"reference-4de5e496aa23f9a6e691\">AWS1年目無料期間でやったこととハマったこと</a></p>\n\n<h2>\n<span id=\"登録\" class=\"fragment\"></span><a href=\"#%E7%99%BB%E9%8C%B2\"><i class=\"fa fa-link\"></i></a>登録</h2>\n\n<p>登録済みと仮定しているのでAWS登録は別の記事を参照ください。</p>\n\n<h2>\n<span id=\"ロール作成\" class=\"fragment\"></span><a href=\"#%E3%83%AD%E3%83%BC%E3%83%AB%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>ロール作成</h2>\n\n<p>AWSロールがないといろいろ面倒なので、<br>\nS3,DynamoDB,Lambdaにフルアクセスできるロールを今回作ります。</p>\n\n<p><a href=\"https://us-west-2.console.aws.amazon.com/console/home\" rel=\"nofollow noopener\" target=\"_blank\">AWSサービス一覧</a>からIAM</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/d478dc689f9049446a3fd1a8af11c93c025f5f75/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f35623661336631392d313266332d633436392d393166362d3339653063646231313637662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F5b6a3f19-12f3-c469-91f6-39e0cdb1167f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e4b961b64587c0810a86846df96f11d0\" alt=\"スクリーンショット 2017-03-15 14.22.30.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/5b6a3f19-12f3-c469-91f6-39e0cdb1167f.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F5b6a3f19-12f3-c469-91f6-39e0cdb1167f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=074871da599987ed70c01bd0bc104bda 1x\" loading=\"lazy\"></a></p>\n\n<p>ロール &gt;&gt; 新しいロールの作成</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/7d0f5639983c61e54bfb45e8e03497e817790046/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f39383039346133642d313166372d306563392d346362662d3837313966323536383836642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F98094a3d-11f7-0ec9-4cbf-8719f256886d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=35b619cd185f27cea0645be7fcb72091\" alt=\"スクリーンショット 2017-03-15 14.22.43.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/98094a3d-11f7-0ec9-4cbf-8719f256886d.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F98094a3d-11f7-0ec9-4cbf-8719f256886d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=67bbcfca4a563c596b65fb677b7327de 1x\" loading=\"lazy\"></a></p>\n\n<p>ロールの名前<br>\n今回は[lambda_dynamo]</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/f786709322318d70a43d2e84b16903fa683883d6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f39396331613762612d336663312d643266342d346362302d6632306532363565303965642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F99c1a7ba-3fc1-d2f4-4cb0-f20e265e09ed.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ee17c95f1db732281b3d80e25334d1de\" alt=\"スクリーンショット 2017-03-15 14.22.48.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/99c1a7ba-3fc1-d2f4-4cb0-f20e265e09ed.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F99c1a7ba-3fc1-d2f4-4cb0-f20e265e09ed.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e086ab5296990dcc8bab6573e8763df0 1x\" loading=\"lazy\"></a></p>\n\n<p>Amazon Lambda &gt;&gt; 選択</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/a0951796d2028065ce022f8ea5ab4812c50c30d3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f61306165633261632d376165312d383130392d653039662d6463366361653661316631392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fa0aec2ac-7ae1-8109-e09f-dc6cae6a1f19.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5a33f7a56ed4d320d7254e086c50bd9c\" alt=\"スクリーンショット 2017-03-15 14.27.00.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/a0aec2ac-7ae1-8109-e09f-dc6cae6a1f19.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fa0aec2ac-7ae1-8109-e09f-dc6cae6a1f19.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=99f96b6d1f4eb79fec81eb22c6a5b1e0 1x\" loading=\"lazy\"></a></p>\n\n<p>とりあえず今回はFullAccessを3つ付けます。<br>\nAWSLambdaFullAccess<br>\nAmazonS3FullAccess<br>\nAmazonDynamoDBFullAccess</p>\n\n<p>次のステップ</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/e44dca66ebdef7f5d59e2445e91e40a3598df78a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f63343631616263652d633964382d343265302d363066342d3062393663623932313035322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fc461abce-c9d8-42e0-60f4-0b96cb921052.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=70d9c7a2a7da6bc586f5a295e2045c4d\" alt=\"スクリーンショット 2017-03-15 14.27.27.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/c461abce-c9d8-42e0-60f4-0b96cb921052.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fc461abce-c9d8-42e0-60f4-0b96cb921052.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5c849347cde5bb68f001126ec9a0ef10 1x\" loading=\"lazy\"></a></p>\n\n<p>ロール &gt;&gt; lambda_dynamo<br>\nといいう項目が追加されてたらOkay。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/aedc22f12385f6a63d9e7ea54c9bb480596d41c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f31626631346238332d633463622d346661612d346531382d3538373130646366616436642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F1bf14b83-c4cb-4faa-4e18-58710dcfad6d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=882f30b01fef07648b7197cd74f501c0\" alt=\"スクリーンショット 2017-03-15 14.33.21.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/1bf14b83-c4cb-4faa-4e18-58710dcfad6d.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F1bf14b83-c4cb-4faa-4e18-58710dcfad6d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7910a61b731e3e145d21f8541947e6ac 1x\" loading=\"lazy\"></a></p>\n\n<h1>\n<span id=\"lambda\" class=\"fragment\"></span><a href=\"#lambda\"><i class=\"fa fa-link\"></i></a>Lambda</h1>\n\n<p>サーバーレスでスクリプト実行できるサービスです。便利。</p>\n\n<h2>\n<span id=\"料金体系\" class=\"fragment\"></span><a href=\"#%E6%96%99%E9%87%91%E4%BD%93%E7%B3%BB\"><i class=\"fa fa-link\"></i></a>料金体系</h2>\n\n<p>基本的にいくらテストに使っても大丈夫！<a href=\"https://aws.amazon.com/jp/lambda/pricing/\" rel=\"nofollow noopener\" target=\"_blank\">公式</a></p>\n\n<p>ラムダ無料枠</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center\">1ヶ月</th>\n<th style=\"text-align: center\">リクエスト</th>\n<th style=\"text-align: center\">コンピューティング時間 [GB*秒]</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center\"></td>\n<td style=\"text-align: center\">1,000,000</td>\n<td style=\"text-align: center\">400,000</td>\n</tr>\n</tbody>\n</table>\n\n<p>リクエスト:関数全体に対する合計リクエスト数<br>\nコンピューティング時間: メモリ数と時間をかけたもの</p>\n\n<p>Lambdaの最小メモリが128MBなので1ヶ月3,200,000秒()使えば、400,000[GB*sec]に到達します。<br>\n<code>(128.0[MB] / 1024[MB/GB]) * 3200000[sec] = 400,000[GB*sec]</code><br>\nなので、888時間くらいスクリプト動いても大丈夫。どんどん使おう。<br>\n(時間の計算は一応自分でやってみてくださいね！)</p>\n\n<h2>\n<span id=\"テストコードを使ってみるpythonエラー\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8Bpython%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>テストコードを使ってみる(Pythonエラー)</h2>\n\n<p><a href=\"https://us-west-2.console.aws.amazon.com/console/home\" rel=\"nofollow noopener\" target=\"_blank\">AWSサービス一覧</a>からLambda</p>\n\n<h3>\n<span id=\"最初の関数作成\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%88%9D%E3%81%AE%E9%96%A2%E6%95%B0%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>最初の関数作成</h3>\n\n<p>Lambda 関数の作成 &gt;&gt; lambda-canary</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/3ae46df63f007c68787e34b6ec0f494f18b567fe/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f63346538353566362d383161322d336564382d653039392d3163366533346364343364652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fc4e855f6-81a2-3ed8-e099-1c6e34cd43de.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=74e03bf67beaf82c9a81db87766cd1b2\" alt=\"スクリーンショット 2017-03-15 14.52.52.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/c4e855f6-81a2-3ed8-e099-1c6e34cd43de.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fc4e855f6-81a2-3ed8-e099-1c6e34cd43de.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2199b1f4443d0208c0eeb52986eb54ff 1x\" loading=\"lazy\"></a></p>\n\n<p>[ トリガーの設定 ] &gt;&gt; 削除 &gt;&gt; 次へ<br>\nここで何分ごとに一度スクリプトを実行とかいじれます。<br>\nが後でも設定できるので今回は削除します。</p>\n\n<p>[ 関数の設定 ]<br>\n名前をとりあえず[ sample ]にしました。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/a5f2a2336886a48ce83490a936c29f7ea332f0bc/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f30613338636234652d326537312d366264622d363233302d6165626161646630643336392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F0a38cb4e-2e71-6bdb-6230-aebaadf0d369.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d5ffcfe2281a5b9d67e9cada65ab27a6\" alt=\"スクリーンショット 2017-03-15 14.57.34.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/0a38cb4e-2e71-6bdb-6230-aebaadf0d369.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F0a38cb4e-2e71-6bdb-6230-aebaadf0d369.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5d761e82c3f7423281919089a50b1d91 1x\" loading=\"lazy\"></a></p>\n\n<p>ロールを先程つくったロールにして関数作成します。<br>\nlambda_dynamo</p>\n\n<h3>\n<span id=\"最初のテスト\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%88%9D%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88\"><i class=\"fa fa-link\"></i></a>最初のテスト</h3>\n\n<div class=\"code-frame\" data-lang=\"python\"><div class=\"highlight\"><pre><code><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib2</span> <span class=\"kn\">import</span> <span class=\"n\">urlopen</span>\n\n<span class=\"n\">SITE</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s\">'site'</span><span class=\"p\">]</span>  <span class=\"c1\"># URL of the site to check, stored in the site environment variable\n</span><span class=\"n\">EXPECTED</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s\">'expected'</span><span class=\"p\">]</span>  <span class=\"c1\"># String expected to be on the page, stored in the expected environment variable\n</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">EXPECTED</span> <span class=\"ow\">in</span> <span class=\"n\">res</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">lambda_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Checking {} at {}...'</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">SITE</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s\">'time'</span><span class=\"p\">]))</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"n\">SITE</span><span class=\"p\">).</span><span class=\"n\">read</span><span class=\"p\">()):</span>\n            <span class=\"k\">raise</span> <span class=\"nb\">Exception</span><span class=\"p\">(</span><span class=\"s\">'Validation failed'</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Check failed!'</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Check passed!'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s\">'time'</span><span class=\"p\">]</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Check complete at {}'</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">())))</span>\n\n</code></pre></div></div>\n\n<p><a href=\"https://camo.qiitausercontent.com/798384903299ef1fa7b4068224a31607e18a57f4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f35336335633537302d626434392d666239372d323838382d6162333461366437346632322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F53c5c570-bd49-fb97-2888-ab34a6d74f22.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=23c0527125220d9e19b41c95bf39c660\" alt=\"スクリーンショット 2017-03-15 15.06.42.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/53c5c570-bd49-fb97-2888-ab34a6d74f22.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F53c5c570-bd49-fb97-2888-ab34a6d74f22.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3d24836f995c008a193006df6bd1c2e5 1x\" loading=\"lazy\"></a></p>\n\n<p>はい出ましたエラー。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">    print('Checking {} at {}...'.format(SITE, event['time']))\nKeyError: 'time'\n</span></code></pre></div></div>\n\n<p>このエラーを解決する前にデフォルトで使用される変数を見ていきます。</p>\n\n<h3>\n<span id=\"デフォルトで使用される変数\" class=\"fragment\"></span><a href=\"#%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%81%A7%E4%BD%BF%E7%94%A8%E3%81%95%E3%82%8C%E3%82%8B%E5%A4%89%E6%95%B0\"><i class=\"fa fa-link\"></i></a>デフォルトで使用される変数</h3>\n\n<ul>\n<li>event - testで設定したところとか、トリガー発生元のイベントデータ</li>\n<li>Context - <a href=\"https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/python-context-object.html#python-context-object-methods\" rel=\"nofollow noopener\" target=\"_blank\">Context オブジェクト (Python)</a>\n</li>\n<li>os.environ - コード自体を変更せずに、AWS上で環境変数を設定できる</li>\n</ul>\n\n<blockquote>\n<p>event &gt;&gt; AWS Lambda はこのパラメーターを使用してイベントデータをハンドラーに渡します。このパラメータは通常、Python の dict タイプです。また、list、str、int、float、または NoneType タイプを使用できます。</p>\n\n<p>context &gt;&gt; AWS Lambda はこのパラメーターを使用してランタイム情報をハンドラーに提供します。このパラメータは LambdaContext タイプになります。</p>\n</blockquote>\n\n<p>となってます。</p>\n\n<blockquote>\n<p>os.environで取れるところはこの環境変数</p>\n</blockquote>\n\n<p><a href=\"https://camo.qiitausercontent.com/95689abe5dd1748c5adb9e53fa14b92136de4c5f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f61333062643464372d383837622d613333392d313565352d3337346638306463383837382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fa30bd4d7-887b-a339-15e5-374f80dc8878.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2a913808b89626d055416e86855a946b\" alt=\"スクリーンショット 2017-03-15 15.15.28.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/a30bd4d7-887b-a339-15e5-374f80dc8878.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fa30bd4d7-887b-a339-15e5-374f80dc8878.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5868118c70f538db974c09311d0794df 1x\" loading=\"lazy\"></a></p>\n\n<h3>\n<span id=\"time-\" class=\"fragment\"></span><a href=\"#time-\"><i class=\"fa fa-link\"></i></a>time ?</h3>\n\n<p>さて先程のエラーを処理していきます。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/f856a31a1ae93d9051c6d39a92ac9344eab0b908/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f64663438383730362d643331612d336132312d303832652d3966373934373962313064332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fdf488706-d31a-3a21-082e-9f79479b10d3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5618d54eef5fe276e1e767bedfef934d\" alt=\"スクリーンショット 2017-03-15 15.11.53.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/df488706-d31a-3a21-082e-9f79479b10d3.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fdf488706-d31a-3a21-082e-9f79479b10d3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f138d31554a85a88551bc2b8eef4425a 1x\" loading=\"lazy\"></a></p>\n\n<p>テストイベントの設定のtimeを追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"key3\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"value3\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"key2\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"value2\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"key1\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"value1\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"time\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"now...!\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>これでTimeの部分でエラーはでないと思います。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"gp\">START RequestId: a8708105-0948-11e7-b83e-b71ae2e4dbbe Version: $</span>LATEST\n<span class=\"go\">Checking https://www.amazon.com/ at now...!...\nCheck failed!\nCheck complete at 2017-03-15 06:28:53.016209\nHTTP Error 503: Service Unavailable: HTTPError\nTraceback (most recent call last):\n  (省略)\n  File \"/usr/lib64/python2.7/urllib2.py\", line 556, in http_error_default\n    raise HTTPError(req.get_full_url(), code, msg, hdrs, fp)\nHTTPError: HTTP Error 503: Service Unavailable\n\nEND RequestId: a8708105-0948-11e7-b83e-b71ae2e4dbbe\nREPORT RequestId: a8708105-0948-11e7-b83e-b71ae2e4dbbe  Duration: 348.59 ms Billed Duration: 400 ms     Memory Size: 128 MB Max Memory Used: 17 MB\n</span></code></pre></div></div>\n\n<p>まだエラーでるのでいろいろやっていきます。</p>\n\n<h3>\n<span id=\"except例外処理してるのになんでエラーでるねん\" class=\"fragment\"></span><a href=\"#except%E4%BE%8B%E5%A4%96%E5%87%A6%E7%90%86%E3%81%97%E3%81%A6%E3%82%8B%E3%81%AE%E3%81%AB%E3%81%AA%E3%82%93%E3%81%A7%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%A7%E3%82%8B%E3%81%AD%E3%82%93\"><i class=\"fa fa-link\"></i></a>except例外処理してるのになんでエラーでるねん！</h3>\n\n<p>まずは赤い画面でるの嫌なので、urlのリクエスト失敗してもエラーをでなくします。</p>\n\n<div class=\"code-frame\" data-lang=\"py\"><div class=\"highlight\"><pre><code>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"n\">SITE</span><span class=\"p\">).</span><span class=\"n\">read</span><span class=\"p\">()):</span>\n            <span class=\"k\">raise</span> <span class=\"nb\">Exception</span><span class=\"p\">(</span><span class=\"s\">'Validation failed'</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Check failed!'</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span>\n</code></pre></div></div>\n\n<p>Pythonの場合、最後にraiseをいれると、エラーをexceptでキャッチしたのをそのまま素のpython文にエラーを戻しちゃいます。これを書き換えます。</p>\n\n<div class=\"code-frame\" data-lang=\"python\"><div class=\"highlight\"><pre><code>\n<span class=\"k\">def</span> <span class=\"nf\">lambda_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Checking {} at {}...'</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">SITE</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s\">'time'</span><span class=\"p\">]))</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"n\">SITE</span><span class=\"p\">).</span><span class=\"n\">read</span><span class=\"p\">()):</span>\n            <span class=\"k\">raise</span> <span class=\"nb\">Exception</span><span class=\"p\">(</span><span class=\"s\">'Validation failed'</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Check failed!'</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Check passed!'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s\">'time'</span><span class=\"p\">]</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Check complete at {}'</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">())))</span>\n\n</code></pre></div></div>\n\n<p>やっと緑チェックの成功がでました…！！！！</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/af18459ba5152d3e053b98285397b08abcf0fc7f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f30666239663033302d616638612d333264392d653734662d3236306364613761666534652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F0fb9f030-af8a-32d9-e74f-260cda7afe4e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f73a361299b5a88efacea511723b9c6d\" alt=\"スクリーンショット 2017-03-15 15.44.10.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/0fb9f030-af8a-32d9-e74f-260cda7afe4e.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F0fb9f030-af8a-32d9-e74f-260cda7afe4e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8b6679debb1306f8e7d978d77ebfabb9 1x\" loading=\"lazy\"></a></p>\n\n<p><code>except Exception as e:</code>でエラーをキャッチして<br>\n<code>print(e)</code>でエラー出力して<br>\n<code>raise</code>削除して、とりあえずはエラーでなくしました。</p>\n\n<p>このあたりのpythonのエラーハンドリングかなり調べました。raise。。</p>\n\n<h3>\n<span id=\"http-error-503\" class=\"fragment\"></span><a href=\"#http-error-503\"><i class=\"fa fa-link\"></i></a>HTTP Error 503</h3>\n\n<p>エラーがまだ続いてるので<code>HTTP Error 503: Service Unavailable: HTTPError</code>の部分を見ていきます。<br>\nまた、Validation failedという文字がないので<code>validate(urlopen(SITE).read())</code>この部分で返ってきたエラーが上記のエラーだと判断していきます。</p>\n\n<div class=\"code-frame\" data-lang=\"python\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">EXPECTED</span> <span class=\"ow\">in</span> <span class=\"n\">res</span>\n</code></pre></div></div>\n\n<p>こちらは <a href=\"https://www.amazon.com/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.amazon.com/</a> にアクセスして、返ってきたｈｔｍｌファイルの中に「Online Shopping」という文字があるかどうかの診断になります。</p>\n\n<p>とりあえずAmazonからGoogleへのアクセスへ、環境変数の変更をする<br>\n* <a href=\"https://www.google.co.jp/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.google.co.jp/</a><br>\n* Gmail</p>\n\n<p>そうすると</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">\nChecking https://www.google.co.jp/ at now...!...\nCheck passed!\nCheck complete at 2017-03-15 07:00:05.723916\n\n</span></code></pre></div></div>\n\n<p>やっとCheck passed!が出ました。</p>\n\n<blockquote>\n<p>503 Service Unavailable<br>\nサービス利用不可。サービスが一時的に過負荷やメンテナンスで使用不可能である。<br>\n例として、アクセスが殺到して処理不能に陥った場合に返される。</p>\n</blockquote>\n\n<p><a href=\"https://www.amazon.com/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.amazon.com/</a> <br>\nが落ちるわけないじゃーん。って心のそこから思って環境変数を返してチェックしてみることを失念してました。ただのGoogleサービスに変えたらうまくいきました。<br>\nLambdaからのアクセス拒否してるの？</p>\n\n<p>ハマったところです。</p>\n\n<h3>\n<span id=\"indent\" class=\"fragment\"></span><a href=\"#indent\"><i class=\"fa fa-link\"></i></a>indent</h3>\n\n<p>Pythonのエラーですがインデックスの数とかでも何回かエラー出しました。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">Syntax error in module 'lambda_function': \nunexpected indent (lambda_function.py, line 30)\n</span></code></pre></div></div>\n\n<p>このあたり勉強したのですが、タブとスペース(4つ)の戦争ですね。<br>\n<a href=\"http://www.gizmodo.jp/2016/09/tab-vs-space.html\" rel=\"nofollow noopener\" target=\"_blank\">プログラミングのコードを書く時のタブvsスペース戦争がついに決着</a><br>\npythonはスペースで書くのが一般的だということが書かれてます。</p>\n\n<p>自分がローカルで編集してたファイルがtabで入っていて<br>\nAWS上で編集したコードはスペース4つで入ります。<br>\nこのindentエラーを見たくないのでスペース派に乗り換えました。</p>\n\n<h3>\n<span id=\"requests\" class=\"fragment\"></span><a href=\"#requests\"><i class=\"fa fa-link\"></i></a>Requests</h3>\n\n<p>urlopenをそのまま使ってもいいのですがrequestsを導入したいと思います。</p>\n\n<p><a href=\"http://d.hatena.ne.jp/yumimue/20071231/1199129495\" rel=\"nofollow noopener\" target=\"_blank\">python urllib2モジュール</a><br>\n<a href=\"http://requests-docs-ja.readthedocs.io/en/latest/\" rel=\"nofollow noopener\" target=\"_blank\">Requests: 人間のためのHTTP</a><br>\n<a href=\"https://gist.github.com/kennethreitz/973705\" rel=\"nofollow noopener\" target=\"_blank\">Requestsを使わずに同じ事をするためのコード</a></p>\n\n<p>slackとかにメッセージ送るのが簡単になります。</p>\n\n<div class=\"code-frame\" data-lang=\"python\">\n<div class=\"code-lang\"><span class=\"bold\">今のコード.py</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\"># coding: utf-8\n</span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib2</span> <span class=\"kn\">import</span> <span class=\"n\">urlopen</span>\n\n<span class=\"n\">SITE</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s\">'site'</span><span class=\"p\">]</span>\n<span class=\"n\">EXPECTED</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s\">'expected'</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">EXPECTED</span> <span class=\"ow\">in</span> <span class=\"n\">res</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">lambda_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Checking {} at {}...'</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">SITE</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s\">'time'</span><span class=\"p\">]))</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"n\">SITE</span><span class=\"p\">).</span><span class=\"n\">read</span><span class=\"p\">()):</span>\n            <span class=\"k\">raise</span> <span class=\"nb\">Exception</span><span class=\"p\">(</span><span class=\"s\">'Validation failed'</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Check failed!'</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Check passed!'</span><span class=\"p\">)</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Check complete at {}'</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">())))</span>\n        <span class=\"k\">return</span> <span class=\"s\">\"Finish\"</span>\n\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">Unable to import module 'lambda_function': No module named requests\n</span></code></pre></div></div>\n\n<p>requestsは外部モジュールなのでこんなエラーおきます。</p>\n\n<h2>\n<span id=\"外部モジュールの使用\" class=\"fragment\"></span><a href=\"#%E5%A4%96%E9%83%A8%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AE%E4%BD%BF%E7%94%A8\"><i class=\"fa fa-link\"></i></a>外部モジュールの使用</h2>\n\n<p>requestsみたいなPython標準外のモジュールを入れるのにも一癖あったので書いていきます。</p>\n\n<ul>\n<li>lambda-uploaderを使ってリモート</li>\n<li>ローカルで自分でzipにかためてUP</li>\n</ul>\n\n<h3>\n<span id=\"lambda-uploader\" class=\"fragment\"></span><a href=\"#lambda-uploader\"><i class=\"fa fa-link\"></i></a>lambda-uploader</h3>\n\n<p>このあたりが参考になります。</p>\n\n<p><a href=\"http://qiita.com/Esfahan/items/08fa6af8811dada4cb2a\" id=\"reference-3d9aa0b1c65c395d42a4\">lambda-uploaderを使ってAWS Lambdaをリモートで開発、実行、デプロイする</a><br>\n<a href=\"http://dev.classmethod.jp/cloud/deploy-aws-lambda-python-with-lambda-uploader/\" rel=\"nofollow noopener\" target=\"_blank\">AWS Lambda Pythonをlambda-uploaderでデプロイ</a></p>\n\n<h3>\n<span id=\"自分のコードをzipアップロード\" class=\"fragment\"></span><a href=\"#%E8%87%AA%E5%88%86%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92zip%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>自分のコードをZIPアップロード</h3>\n\n<p>自分はこれで行いました。単発だとすぐできる。<br>\n<a href=\"http://qiita.com/Hironsan/items/0eb5578f3321c72637b4\" id=\"reference-4dd871d93361b26b3044\">【AWS】Lambdaでpipしたいと思ったときにすべきこと</a></p>\n\n<p>作業フォルダに<code>pip install requests -t .</code>して、それをzipで固めてアップする感じです。</p>\n\n<p>無事アップロードできたら、先程の<code>今のコード.py</code>からスタートします。</p>\n\n<h2>\n<span id=\"slack\" class=\"fragment\"></span><a href=\"#slack\"><i class=\"fa fa-link\"></i></a>Slack</h2>\n\n<p>import <br>\n* urllib2<br>\n* requests<br>\n* どっちでも可</p>\n\n<p>api<br>\n* Slack api(token取得してごにょごにょ xoxp-12131212こんなやつ)<br>\n* Webhook(urlだけ取ってくる)<br>\n* どっちでも可</p>\n\n<p>どの組み合わせを使っても良いのですが、今回は簡単なrequests * Webhookを使います。</p>\n\n<p>こちらWebhookのURL取得はこちらを参考に！<br>\n<a href=\"http://qiita.com/vmmhypervisor/items/18c99624a84df8b31008\" id=\"reference-a01b885ea53ea7354206\">SlackのWebhook URL取得手順</a></p>\n\n<div class=\"code-frame\" data-lang=\"python\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">send_slack</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s\">\"先程げっとしたURL\"</span>\n    <span class=\"n\">payload_dic</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"text\"</span><span class=\"p\">:</span><span class=\"n\">text</span><span class=\"p\">,</span>\n        <span class=\"s\">\"icon_emoji\"</span><span class=\"p\">:</span><span class=\"s\">':grin:'</span><span class=\"p\">,</span>\n        <span class=\"s\">\"channel\"</span><span class=\"p\">:</span><span class=\"s\">'bot-test2'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">payload_dic</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>たったこれだけでSlack送れます！</p>\n\n<div class=\"code-frame\" data-lang=\"python\"><div class=\"highlight\"><pre><code><span class=\"c1\"># coding: utf-8\n</span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib2</span> <span class=\"kn\">import</span> <span class=\"n\">urlopen</span>\n\n<span class=\"n\">SITE</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s\">'site'</span><span class=\"p\">]</span>\n<span class=\"n\">EXPECTED</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s\">'expected'</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">EXPECTED</span> <span class=\"ow\">in</span> <span class=\"n\">res</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">web_check</span><span class=\"p\">():</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"n\">SITE</span><span class=\"p\">).</span><span class=\"n\">read</span><span class=\"p\">()):</span>\n            <span class=\"k\">raise</span> <span class=\"nb\">Exception</span><span class=\"p\">(</span><span class=\"s\">'Validation failed'</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Check failed!'</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Check passed!'</span><span class=\"p\">)</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Check complete at {}'</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">())))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">lambda_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Checking {} at {}...'</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">SITE</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s\">'time'</span><span class=\"p\">]))</span>\n    <span class=\"c1\"># web_check()\n</span>    <span class=\"n\">send_slack</span><span class=\"p\">(</span><span class=\"s\">\"test\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"s\">\"success!\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">send_slack</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s\">\"こちら自分のURL\"</span>\n    <span class=\"n\">payload_dic</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"text\"</span><span class=\"p\">:</span><span class=\"n\">text</span><span class=\"p\">,</span>\n        <span class=\"s\">\"icon_emoji\"</span><span class=\"p\">:</span><span class=\"s\">':grin:'</span><span class=\"p\">,</span>\n        <span class=\"s\">\"channel\"</span><span class=\"p\">:</span><span class=\"s\">'bot-test2'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">payload_dic</span><span class=\"p\">))</span>\n\n\n</code></pre></div></div>\n\n<p><code>def web_check():</code>に処理を移して置きました。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>def lambda_handler(event, context):\n    print('Checking {} at {}...'.format(SITE, event['time']))\n    # web_check()\n    send_slack(\"test\")\n    return \"success!\"\n</code></pre></div></div>\n\n<p>これで</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/23e831030b9e580f8597ad709ffcc8a2fbc4ccdc/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f62336364323839302d303066332d356337642d306666322d3430313664393461613431372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"760\" alt=\"スクリーンショット 2017-03-15 16.55.31.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fb3cd2890-00f3-5c7d-0ff2-4016d94aa417.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=90e87855869ce070705fd203e3dc65fa\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/b3cd2890-00f3-5c7d-0ff2-4016d94aa417.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fb3cd2890-00f3-5c7d-0ff2-4016d94aa417.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b3ba890f1bfb02bae52cdce7568a3339 1x\" loading=\"lazy\"></a><br>\nSlack到着しました。</p>\n\n<p>Okay。<br>\n次はDynamoDBからデータを取ってきます。</p>\n\n<h1>\n<span id=\"dynamodb\" class=\"fragment\"></span><a href=\"#dynamodb\"><i class=\"fa fa-link\"></i></a>DynamoDB</h1>\n\n<h2>\n<span id=\"料金体系-1\" class=\"fragment\"></span><a href=\"#%E6%96%99%E9%87%91%E4%BD%93%E7%B3%BB-1\"><i class=\"fa fa-link\"></i></a>料金体系</h2>\n\n<p>AWS の無料利用枠の一部としてのDynamoDB無料枠</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center\">ストレージ</th>\n<th style=\"text-align: center\">書き込み容量</th>\n<th style=\"text-align: center\">書き込み容量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center\">25GB</td>\n<td style=\"text-align: center\">25</td>\n<td style=\"text-align: center\">25</td>\n</tr>\n</tbody>\n</table>\n\n<blockquote>\n<p>1 つの容量のユニットで 1 秒あたりに 1 つのリクエストを処理します<br>\n1ユニットの書き込み容量: 最大1KBデータを1秒に1書き込み<br>\n1ユニットの読み込み容量: 最大4KBデータを1秒に1読み込み<br>\nDynamoDB ストリームからの 250 万回の読み込みリクエストを無料で利用できます。</p>\n</blockquote>\n\n<p>とりあえずデータベースを作る時に書き込み容量と読み込み容量を1にセットして使えば、無料枠だとお金かからないと思います。<br>\n今回は1分に1度くらいでもいいので、最小単位の1(1秒に1度アクセスできるレベル)を選びます。</p>\n\n<h2>\n<span id=\"作ってみる\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>作ってみる</h2>\n\n<p>とりあえず設定はこんな感じ。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/e8b3da60bed5d16323f30e1a45ce118e562363f5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f39383434363062372d386463352d633264352d333166342d6162356238303736373963302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F984460b7-8dc5-c2d5-31f4-ab5b807679c0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e09245884c341858e798a2bf449ae35e\" alt=\"スクリーンショット 2017-03-15 17.10.25.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/984460b7-8dc5-c2d5-31f4-ab5b807679c0.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F984460b7-8dc5-c2d5-31f4-ab5b807679c0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=14ef6909a249447d1075862b99e22fe5 1x\" loading=\"lazy\"></a></p>\n\n<p>DynamoDBはハッシュ(言語によっては辞書型、連想配列など)のKeyでしかアクセスできません。今回はidをkeyとしてアクセスします。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/456ad6b5288496ab9ee9734b092f406a2a88f9aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f30613836313233372d646230662d333731652d343539362d3461643662633438386539342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F0a861237-db0f-371e-4596-4ad6bc488e94.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7148e5adb30fb0ae0ec2c07be4fbe5ec\" alt=\"スクリーンショット 2017-03-15 17.15.28.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/0a861237-db0f-371e-4596-4ad6bc488e94.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F0a861237-db0f-371e-4596-4ad6bc488e94.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9f21c61c847813fb1b3454885520e7be 1x\" loading=\"lazy\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><code><span class=\"w\">\n</span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"target\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Online Shopping\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"url\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://www.amazon.com/\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n\n</span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"target\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Gmail\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"url\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://www.google.co.jp/\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>urlからtargetを探すためのTableとして使います。</p>\n\n<h2>\n<span id=\"pythonコードから先程のデータを取ってみる\" class=\"fragment\"></span><a href=\"#python%E3%82%B3%E3%83%BC%E3%83%89%E3%81%8B%E3%82%89%E5%85%88%E7%A8%8B%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E5%8F%96%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>pythonコードから先程のデータを取ってみる</h2>\n\n<div class=\"code-frame\" data-lang=\"python\"><div class=\"highlight\"><pre><code><span class=\"c1\"># ２つ追加\n</span><span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n<span class=\"kn\">from</span> <span class=\"nn\">boto3.dynamodb.conditions</span> <span class=\"kn\">import</span> <span class=\"n\">Key</span><span class=\"p\">,</span> <span class=\"n\">Attr</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_urls</span><span class=\"p\">():</span>\n    <span class=\"n\">table</span>    <span class=\"o\">=</span> <span class=\"n\">dynamodb</span><span class=\"p\">.</span><span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s\">'sites'</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">scan</span><span class=\"p\">()</span>\n    <span class=\"n\">sites</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s\">\"Items\"</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">sites</span>\n</code></pre></div></div>\n\n<p>機能を追加して、get_urls()でDynamoDBから取ってきたurlからtargetの文章があるかサーチしています。</p>\n\n<div class=\"code-frame\" data-lang=\"python\">\n<div class=\"code-lang\"><span class=\"bold\">現在の.py</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\"># coding: utf-8\n</span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib2</span> <span class=\"kn\">import</span> <span class=\"n\">urlopen</span>\n<span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n<span class=\"kn\">from</span> <span class=\"nn\">boto3.dynamodb.conditions</span> <span class=\"kn\">import</span> <span class=\"n\">Key</span><span class=\"p\">,</span> <span class=\"n\">Attr</span>\n\n<span class=\"n\">dynamodb</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"p\">.</span><span class=\"n\">resource</span><span class=\"p\">(</span><span class=\"s\">'dynamodb'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">target</span> <span class=\"ow\">in</span> <span class=\"n\">res</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">web_check</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Serching ... \"</span> <span class=\"o\">+</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">).</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Find!\"</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Not Find!\"</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Error'</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_urls</span><span class=\"p\">():</span>\n    <span class=\"n\">table</span>    <span class=\"o\">=</span> <span class=\"n\">dynamodb</span><span class=\"p\">.</span><span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s\">'sites'</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">scan</span><span class=\"p\">()</span>\n    <span class=\"n\">sites</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s\">\"Items\"</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">sites</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">send_slack</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s\">\"https://hooks.slack.com/services/\"</span>\n    <span class=\"n\">payload_dic</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"text\"</span><span class=\"p\">:</span><span class=\"n\">text</span><span class=\"p\">,</span>\n        <span class=\"s\">\"icon_emoji\"</span><span class=\"p\">:</span><span class=\"s\">':grin:'</span><span class=\"p\">,</span>\n        <span class=\"s\">\"channel\"</span><span class=\"p\">:</span><span class=\"s\">'bot-test2'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">payload_dic</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">lambda_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Check start'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">sites</span> <span class=\"o\">=</span> <span class=\"n\">get_urls</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">site</span> <span class=\"ow\">in</span> <span class=\"n\">sites</span><span class=\"p\">:</span>\n        <span class=\"n\">web_check</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">site</span><span class=\"p\">[</span><span class=\"s\">\"url\"</span><span class=\"p\">]),</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">site</span><span class=\"p\">[</span><span class=\"s\">\"target\"</span><span class=\"p\">]))</span>\n\n    <span class=\"k\">return</span> <span class=\"s\">\"success!\"</span>\n\n\n</code></pre></div>\n</div>\n\n<p>出力結果</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">\nCheck start\nSerching ... 技術情報共有サービスです at https://qiita.com/\nFind!\nSerching ... Gmail at https://www.google.co.jp/\nFind!\nSerching ... Gmailですか？ at https://www.google.co.jp/\nNot Find!\nSerching ... Online Shopping at https://www.amazon.com/\nError\nHTTP Error 503: Service Unavailable\nEND RequestId: 3992d81e-095e-11e7-b30a-1ddc7da9e992\n</span></code></pre></div></div>\n\n<p>ここでもエラーおきました。Pythonつまづく！</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">\n'utf8' codec can't decode byte 0x90 in position 102: invalid start byte\n</span></code></pre></div></div>\n\n<p><a href=\"http://lab.hde.co.jp/2008/08/pythonunicodeencodeerror.html\" rel=\"nofollow noopener\" target=\"_blank\">PythonのUnicodeEncodeErrorを知る</a><br>\nここを参考にエラー解決しました。<br>\n<code>type(site[\"url\"])</code>したら<code>&lt;type 'unicode'&gt;</code>だったので、<br>\n<code>str(site[\"url\"])</code>をして<code>&lt;type 'str'&gt;</code>に変えました。</p>\n\n<h2>\n<span id=\"lambdaからdynamodb書き込み\" class=\"fragment\"></span><a href=\"#lambda%E3%81%8B%E3%82%89dynamodb%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF\"><i class=\"fa fa-link\"></i></a>LambdaからDynamoDB書き込み</h2>\n\n<p>sites_check1テーブルの追加</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/6b816960ceb961b453da976b4c20284f5e863ffc/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f65383039613561642d363565632d346639342d643262392d6136393933383065303439372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fe809a5ad-65ec-4f94-d2b9-a699380e0497.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8cccb26f61719c7e881c7bb82bbe8891\" alt=\"スクリーンショット 2017-03-15 18.19.12.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/e809a5ad-65ec-4f94-d2b9-a699380e0497.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fe809a5ad-65ec-4f94-d2b9-a699380e0497.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6f962ba1e6c3ea97b4634855f0627e1f 1x\" loading=\"lazy\"></a></p>\n\n<p>追加</p>\n\n<div class=\"code-frame\" data-lang=\"python\"><div class=\"highlight\"><pre><code><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">):</span>\n    <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">dynamodb</span><span class=\"p\">.</span><span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s\">'sites_check'</span><span class=\"p\">)</span>\n    <span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">put_item</span><span class=\"p\">(</span>\n        <span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"s\">\"id\"</span><span class=\"p\">:</span> <span class=\"nb\">id</span><span class=\"p\">,</span>\n            <span class=\"s\">\"date\"</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"p\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s\">\"%Y/%m/%d %H:%M\"</span><span class=\"p\">),</span>\n            <span class=\"s\">\"result\"</span><span class=\"p\">:</span> <span class=\"n\">results</span>\n       <span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>時間の増減を行うtimedeltaとかを追加しました。<br>\nDynamoDBのsitesテーブルにタイトル追加しました。<br>\n現在のコード</p>\n\n<div class=\"code-frame\" data-lang=\"python\"><div class=\"highlight\"><pre><code>\n<span class=\"c1\"># coding: utf-8\n</span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib2</span> <span class=\"kn\">import</span> <span class=\"n\">urlopen</span>\n<span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n<span class=\"kn\">from</span> <span class=\"nn\">boto3.dynamodb.conditions</span> <span class=\"kn\">import</span> <span class=\"n\">Key</span><span class=\"p\">,</span> <span class=\"n\">Attr</span>\n\n<span class=\"n\">dynamodb</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"p\">.</span><span class=\"n\">resource</span><span class=\"p\">(</span><span class=\"s\">'dynamodb'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">target</span> <span class=\"ow\">in</span> <span class=\"n\">res</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">web_check</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Serching ... \"</span> <span class=\"o\">+</span> <span class=\"n\">target</span> <span class=\"o\">+</span> <span class=\"s\">\" at \"</span> <span class=\"o\">+</span> <span class=\"n\">url</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">).</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"s\">\"Find!\"</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s\">\"Not Find!\"</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_urls</span><span class=\"p\">():</span>\n    <span class=\"n\">table</span>    <span class=\"o\">=</span> <span class=\"n\">dynamodb</span><span class=\"p\">.</span><span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s\">'sites'</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">scan</span><span class=\"p\">()</span>\n    <span class=\"n\">sites</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s\">\"Items\"</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">sites</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">send_slack</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s\">\"https://hooks.slack.com/\"</span>\n    <span class=\"n\">payload_dic</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"text\"</span><span class=\"p\">:</span><span class=\"n\">text</span><span class=\"p\">,</span>\n        <span class=\"s\">\"icon_emoji\"</span><span class=\"p\">:</span><span class=\"s\">':grin:'</span><span class=\"p\">,</span>\n        <span class=\"s\">\"channel\"</span><span class=\"p\">:</span><span class=\"s\">'bot-test2'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">payload_dic</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">):</span>\n    <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">dynamodb</span><span class=\"p\">.</span><span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s\">'sites_check'</span><span class=\"p\">)</span>\n    <span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">put_item</span><span class=\"p\">(</span>\n        <span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"s\">\"id\"</span><span class=\"p\">:</span> <span class=\"nb\">id</span><span class=\"p\">,</span>\n            <span class=\"s\">\"date\"</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"p\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s\">\"%Y/%m/%d %H:%M\"</span><span class=\"p\">),</span>\n            <span class=\"s\">\"result\"</span><span class=\"p\">:</span> <span class=\"n\">results</span>\n       <span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">lambda_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Check start'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">sites</span> <span class=\"o\">=</span> <span class=\"n\">get_urls</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">site</span> <span class=\"ow\">in</span> <span class=\"n\">sites</span><span class=\"p\">:</span>\n        <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">web_check</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">site</span><span class=\"p\">[</span><span class=\"s\">\"url\"</span><span class=\"p\">]),</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">site</span><span class=\"p\">[</span><span class=\"s\">\"target\"</span><span class=\"p\">]))</span>\n        <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">site</span><span class=\"p\">[</span><span class=\"s\">\"title\"</span><span class=\"p\">])]</span> <span class=\"o\">=</span> <span class=\"n\">msg</span>\n\n    <span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"s\">\"success!\"</span>\n\n\n\n</code></pre></div></div>\n\n<p>データを挿入した結果がこちら。</p>\n\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><code><span class=\"w\">\n</span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"date\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"2017/03/15 18:37\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"result\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"Amazon\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Find!\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"err\">なぜかFindとなってエラー起きず</span><span class=\"w\"> \n    </span><span class=\"nl\">\"Google\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Find!\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"Google-2\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Not Find!\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"Qiita\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Find!\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n\n</span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"date\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"2017/03/15 18:48\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"result\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"Amazon\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"HTTP Error 503: Service Unavailable\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"err\">こちらでエラー起きたときにstr(e)にしました</span><span class=\"w\">\n    </span><span class=\"nl\">\"Google\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Find!\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"Google-2\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Not Find!\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"Qiita\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Find!\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p><code>str(e)</code>ってしないとeがstr型じゃないのでエラーが起きました。<br>\nPythonに慣れてきたので10分くらいで解決。<br>\njsonってコメントつけられないんですね。</p>\n\n<div class=\"code-frame\" data-lang=\"python\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">get_recent_codes</span><span class=\"p\">():</span>\n    <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n    <span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">date</span><span class=\"p\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s\">\"%Y/%m/%d %H:%M\"</span><span class=\"p\">)</span>\n    <span class=\"n\">last</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">date</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=-</span><span class=\"mi\">9</span><span class=\"p\">)).</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s\">\"%Y/%m/%d %H:%M\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># idが0かつ、１０分以内のデータを取ってくる感じのクエリ\n</span>    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">query</span><span class=\"p\">(</span>\n        <span class=\"n\">KeyConditionExpression</span><span class=\"o\">=</span><span class=\"n\">Key</span><span class=\"p\">(</span><span class=\"s\">'id'</span><span class=\"p\">).</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">Key</span><span class=\"p\">(</span><span class=\"s\">'date'</span><span class=\"p\">).</span><span class=\"n\">between</span><span class=\"p\">(</span><span class=\"n\">last</span><span class=\"p\">,</span> <span class=\"n\">now</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n</code></pre></div></div>\n\n<p><code>response['Count']</code>に取ってこれたクエリの数が入ります。<br>\n<code>response['Items']</code>に取ってこれたTableのデータがはいってます。<br>\nそれ以外のデータ必要な場合は適宜、Printしつつデータの取り出しをしてください。</p>\n\n<p>結果こんな感じ</p>\n\n<div class=\"code-frame\" data-lang=\"python\"><div class=\"highlight\"><pre><code><span class=\"c1\"># coding: utf-8\n</span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib2</span> <span class=\"kn\">import</span> <span class=\"n\">urlopen</span>\n<span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n<span class=\"kn\">from</span> <span class=\"nn\">boto3.dynamodb.conditions</span> <span class=\"kn\">import</span> <span class=\"n\">Key</span><span class=\"p\">,</span> <span class=\"n\">Attr</span>\n\n<span class=\"n\">dynamodb</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"p\">.</span><span class=\"n\">resource</span><span class=\"p\">(</span><span class=\"s\">'dynamodb'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">target</span> <span class=\"ow\">in</span> <span class=\"n\">res</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">web_check</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Serching ... \"</span> <span class=\"o\">+</span> <span class=\"n\">target</span> <span class=\"o\">+</span> <span class=\"s\">\" at \"</span> <span class=\"o\">+</span> <span class=\"n\">url</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">).</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"s\">\"Find!\"</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s\">\"Not Find!\"</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_urls</span><span class=\"p\">():</span>\n    <span class=\"n\">table</span>    <span class=\"o\">=</span> <span class=\"n\">dynamodb</span><span class=\"p\">.</span><span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s\">'sites'</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">scan</span><span class=\"p\">()</span>\n    <span class=\"n\">sites</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s\">\"Items\"</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">sites</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">send_slack</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s\">\"https://hooks.slack.com/\"</span>\n    <span class=\"n\">payload_dic</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"text\"</span><span class=\"p\">:</span><span class=\"n\">text</span><span class=\"p\">,</span>\n        <span class=\"s\">\"icon_emoji\"</span><span class=\"p\">:</span><span class=\"s\">':grin:'</span><span class=\"p\">,</span>\n        <span class=\"s\">\"channel\"</span><span class=\"p\">:</span><span class=\"s\">'bot-test2'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">payload_dic</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">):</span>\n    <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">dynamodb</span><span class=\"p\">.</span><span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s\">'sites_check'</span><span class=\"p\">)</span>\n    <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">put_item</span><span class=\"p\">(</span>\n        <span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"s\">\"id\"</span><span class=\"p\">:</span> <span class=\"nb\">id</span><span class=\"p\">,</span>\n            <span class=\"s\">\"date\"</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"p\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s\">\"%Y/%m/%d %H:%M\"</span><span class=\"p\">),</span>\n            <span class=\"s\">\"result\"</span><span class=\"p\">:</span> <span class=\"n\">results</span>\n       <span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_recent_codes</span><span class=\"p\">():</span>\n    <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">dynamodb</span><span class=\"p\">.</span><span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s\">'sites_check'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n    <span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">date</span><span class=\"p\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s\">\"%Y/%m/%d %H:%M\"</span><span class=\"p\">)</span>\n    <span class=\"n\">last</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">date</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=-</span><span class=\"mi\">9</span><span class=\"p\">)).</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s\">\"%Y/%m/%d %H:%M\"</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">last</span> <span class=\"o\">+</span> <span class=\"s\">\" から \"</span> <span class=\"o\">+</span> <span class=\"n\">now</span> <span class=\"o\">+</span> <span class=\"s\">\" までのチェック\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">query</span><span class=\"p\">(</span>\n        <span class=\"n\">KeyConditionExpression</span><span class=\"o\">=</span><span class=\"n\">Key</span><span class=\"p\">(</span><span class=\"s\">'id'</span><span class=\"p\">).</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">Key</span><span class=\"p\">(</span><span class=\"s\">'date'</span><span class=\"p\">).</span><span class=\"n\">between</span><span class=\"p\">(</span><span class=\"n\">last</span><span class=\"p\">,</span> <span class=\"n\">now</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">lambda_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Check start'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">sites</span> <span class=\"o\">=</span> <span class=\"n\">get_urls</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">site</span> <span class=\"ow\">in</span> <span class=\"n\">sites</span><span class=\"p\">:</span>\n        <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">web_check</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">site</span><span class=\"p\">[</span><span class=\"s\">\"url\"</span><span class=\"p\">]),</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">site</span><span class=\"p\">[</span><span class=\"s\">\"target\"</span><span class=\"p\">]))</span>\n        <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">site</span><span class=\"p\">[</span><span class=\"s\">\"title\"</span><span class=\"p\">])]</span> <span class=\"o\">=</span> <span class=\"n\">msg</span>\n\n    <span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_recent_codes</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"s\">\"success!\"</span>\n\n\n\n</code></pre></div></div>\n\n<p>定期実行させたりいろいろできると思われます。</p>\n\n<h1>\n<span id=\"さいごに\" class=\"fragment\"></span><a href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\"><i class=\"fa fa-link\"></i></a>さいごに</h1>\n\n<p>PythonとLambdaの素人なのでかなりエラーだしました。が、PythonとLambdaによるアーキテクトはかなり便利になると思うのでこれからも使っていきたいと思っています。</p>\n","body":"# はじめに\n\n　最近サーバレスアーキテクチャに興味を持っています。以下2エントリーはGoogle Apps ScriptでJava Scriptを使った時の記事ですが、今回はAWS上のLambdaを使って、サーバーレスでPythonコードを実行させることをやっていきたいと思います。記事の内容は、Pythonほぼ初めまして&&AWSほぼ初めましての人が、LambdaとDynamoDBでいろいろできるようになるまでの記録を書いていきます。\n　また最初AWS分かんなさすぎて最初は絶望していたし、Lambdaはエラー出まくって初見殺しだし、Python興味はあるけど使ったこと少なめと、かなり初心者目線で記事を書いていきたいと思ってます。写真多め、初心者がわかる程度の内容を、ひとつずつ書いていく感じですので、PythonistとAWS上級者の方は新しいことはないかと思いますが、どうぞよろしくお願いします。\n\nこの前書いた記事\n- [月末営業日にタスクをリマインドする](http://qiita.com/ykhirao/items/782e20ab0465533c48f6)\n- [Googleカレンダー 自社版](http://qiita.com/ykhirao/items/09ebaedd0f6f0438f422)\n\n\n## 前提\nAWS初めまして\nPython歴2週間くらい\nAWSサービス登録済、無料枠中\n\n# AWS\n自分の場合は、AWSのサービスの多さに混乱したので、どのサービスがどのサービスとつながってるのか、まず概要を勉強しました。下記あたりが参考になるかと思います。またKindleで無料の書籍とか探しました。「ってますが、自分で使いながら、この記事を見直しながらいろいろやってみました。\n\n[「AWS is 何」を3行でまとめてみるよ](http://qiita.com/kohashi/items/1bb952313fb695f12577)\n[AWS1年目無料期間でやったこととハマったこと](http://qiita.com/chroju/items/c7ad918d79b0288bc490)\n\n## 登録\n登録済みと仮定しているのでAWS登録は別の記事を参照ください。\n\n## ロール作成\n\nAWSロールがないといろいろ面倒なので、\nS3,DynamoDB,Lambdaにフルアクセスできるロールを今回作ります。\n\n[AWSサービス一覧](https://us-west-2.console.aws.amazon.com/console/home)からIAM\n\n![スクリーンショット 2017-03-15 14.22.30.png](https://qiita-image-store.s3.amazonaws.com/0/112929/5b6a3f19-12f3-c469-91f6-39e0cdb1167f.png)\n\nロール >> 新しいロールの作成\n\n![スクリーンショット 2017-03-15 14.22.43.png](https://qiita-image-store.s3.amazonaws.com/0/112929/98094a3d-11f7-0ec9-4cbf-8719f256886d.png)\n\nロールの名前\n今回は[lambda_dynamo]\n\n![スクリーンショット 2017-03-15 14.22.48.png](https://qiita-image-store.s3.amazonaws.com/0/112929/99c1a7ba-3fc1-d2f4-4cb0-f20e265e09ed.png)\n\nAmazon Lambda >> 選択\n\n![スクリーンショット 2017-03-15 14.27.00.png](https://qiita-image-store.s3.amazonaws.com/0/112929/a0aec2ac-7ae1-8109-e09f-dc6cae6a1f19.png)\n\nとりあえず今回はFullAccessを3つ付けます。\nAWSLambdaFullAccess\nAmazonS3FullAccess\nAmazonDynamoDBFullAccess\n\n次のステップ\n\n![スクリーンショット 2017-03-15 14.27.27.png](https://qiita-image-store.s3.amazonaws.com/0/112929/c461abce-c9d8-42e0-60f4-0b96cb921052.png)\n\n\nロール >> lambda_dynamo\nといいう項目が追加されてたらOkay。\n\n![スクリーンショット 2017-03-15 14.33.21.png](https://qiita-image-store.s3.amazonaws.com/0/112929/1bf14b83-c4cb-4faa-4e18-58710dcfad6d.png)\n\n\n\n# Lambda\n\nサーバーレスでスクリプト実行できるサービスです。便利。\n\n## 料金体系\n基本的にいくらテストに使っても大丈夫！[公式](https://aws.amazon.com/jp/lambda/pricing/)\n\nラムダ無料枠\n\n|1ヶ月| リクエスト | コンピューティング時間 [GB*秒] |\n|:-:|:-:|:-:|\n|| 1,000,000  | 400,000  |\n\nリクエスト:関数全体に対する合計リクエスト数\nコンピューティング時間: メモリ数と時間をかけたもの\n\nLambdaの最小メモリが128MBなので1ヶ月3,200,000秒()使えば、400,000[GB*sec]に到達します。\n`(128.0[MB] / 1024[MB/GB]) * 3200000[sec] = 400,000[GB*sec]`\nなので、888時間くらいスクリプト動いても大丈夫。どんどん使おう。\n(時間の計算は一応自分でやってみてくださいね！)\n\n## テストコードを使ってみる(Pythonエラー)\n[AWSサービス一覧](https://us-west-2.console.aws.amazon.com/console/home)からLambda\n\n### 最初の関数作成\n\nLambda 関数の作成 >> lambda-canary\n\n![スクリーンショット 2017-03-15 14.52.52.png](https://qiita-image-store.s3.amazonaws.com/0/112929/c4e855f6-81a2-3ed8-e099-1c6e34cd43de.png)\n\n[ トリガーの設定 ] >> 削除 >> 次へ\nここで何分ごとに一度スクリプトを実行とかいじれます。\nが後でも設定できるので今回は削除します。\n\n[ 関数の設定 ]\n名前をとりあえず[ sample ]にしました。\n\n![スクリーンショット 2017-03-15 14.57.34.png](https://qiita-image-store.s3.amazonaws.com/0/112929/0a38cb4e-2e71-6bdb-6230-aebaadf0d369.png)\n\nロールを先程つくったロールにして関数作成します。\nlambda_dynamo\n\n### 最初のテスト\n\n```python\nfrom __future__ import print_function\n\nimport os\nfrom datetime import datetime\nfrom urllib2 import urlopen\n\nSITE = os.environ['site']  # URL of the site to check, stored in the site environment variable\nEXPECTED = os.environ['expected']  # String expected to be on the page, stored in the expected environment variable\n\n\ndef validate(res):\n    return EXPECTED in res\n\n\ndef lambda_handler(event, context):\n    print('Checking {} at {}...'.format(SITE, event['time']))\n    try:\n        if not validate(urlopen(SITE).read()):\n            raise Exception('Validation failed')\n    except:\n        print('Check failed!')\n        raise\n    else:\n        print('Check passed!')\n        return event['time']\n    finally:\n        print('Check complete at {}'.format(str(datetime.now())))\n\n```\n\n![スクリーンショット 2017-03-15 15.06.42.png](https://qiita-image-store.s3.amazonaws.com/0/112929/53c5c570-bd49-fb97-2888-ab34a6d74f22.png)\n\nはい出ましたエラー。\n\n```shell-session\n    print('Checking {} at {}...'.format(SITE, event['time']))\nKeyError: 'time'\n```\n\nこのエラーを解決する前にデフォルトで使用される変数を見ていきます。\n\n### デフォルトで使用される変数\n* event - testで設定したところとか、トリガー発生元のイベントデータ\n* Context - [Context オブジェクト (Python)](https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/python-context-object.html#python-context-object-methods)\n* os.environ - コード自体を変更せずに、AWS上で環境変数を設定できる\n\n>event >> AWS Lambda はこのパラメーターを使用してイベントデータをハンドラーに渡します。このパラメータは通常、Python の dict タイプです。また、list、str、int、float、または NoneType タイプを使用できます。\n\n>context >> AWS Lambda はこのパラメーターを使用してランタイム情報をハンドラーに提供します。このパラメータは LambdaContext タイプになります。\n\nとなってます。\n\n> os.environで取れるところはこの環境変数\n\n![スクリーンショット 2017-03-15 15.15.28.png](https://qiita-image-store.s3.amazonaws.com/0/112929/a30bd4d7-887b-a339-15e5-374f80dc8878.png)\n\n### time ?\n\nさて先程のエラーを処理していきます。\n\n![スクリーンショット 2017-03-15 15.11.53.png](https://qiita-image-store.s3.amazonaws.com/0/112929/df488706-d31a-3a21-082e-9f79479b10d3.png)\n\nテストイベントの設定のtimeを追加します。\n\n```json\n{\n  \"key3\": \"value3\",\n  \"key2\": \"value2\",\n  \"key1\": \"value1\",\n  \"time\": \"now...!\"\n}\n```\n\nこれでTimeの部分でエラーはでないと思います。\n\n```shell-session\nSTART RequestId: a8708105-0948-11e7-b83e-b71ae2e4dbbe Version: $LATEST\nChecking https://www.amazon.com/ at now...!...\nCheck failed!\nCheck complete at 2017-03-15 06:28:53.016209\nHTTP Error 503: Service Unavailable: HTTPError\nTraceback (most recent call last):\n  (省略)\n  File \"/usr/lib64/python2.7/urllib2.py\", line 556, in http_error_default\n    raise HTTPError(req.get_full_url(), code, msg, hdrs, fp)\nHTTPError: HTTP Error 503: Service Unavailable\n\nEND RequestId: a8708105-0948-11e7-b83e-b71ae2e4dbbe\nREPORT RequestId: a8708105-0948-11e7-b83e-b71ae2e4dbbe\tDuration: 348.59 ms\tBilled Duration: 400 ms \tMemory Size: 128 MB\tMax Memory Used: 17 MB\n```\n\nまだエラーでるのでいろいろやっていきます。\n\n### except例外処理してるのになんでエラーでるねん！\n\nまずは赤い画面でるの嫌なので、urlのリクエスト失敗してもエラーをでなくします。\n\n```py\n\n    try:\n        if not validate(urlopen(SITE).read()):\n            raise Exception('Validation failed')\n    except:\n        print('Check failed!')\n        raise\n```\n\nPythonの場合、最後にraiseをいれると、エラーをexceptでキャッチしたのをそのまま素のpython文にエラーを戻しちゃいます。これを書き換えます。\n\n```python\n\ndef lambda_handler(event, context):\n    print('Checking {} at {}...'.format(SITE, event['time']))\n    try:\n        if not validate(urlopen(SITE).read()):\n            raise Exception('Validation failed')\n    except Exception as e:\n        print('Check failed!')\n        print(e)\n    else:\n        print('Check passed!')\n        return event['time']\n    finally:\n        print('Check complete at {}'.format(str(datetime.now())))\n\n```\n\nやっと緑チェックの成功がでました…！！！！\n\n![スクリーンショット 2017-03-15 15.44.10.png](https://qiita-image-store.s3.amazonaws.com/0/112929/0fb9f030-af8a-32d9-e74f-260cda7afe4e.png)\n\n`except Exception as e:`でエラーをキャッチして\n`print(e)`でエラー出力して\n`raise`削除して、とりあえずはエラーでなくしました。\n\nこのあたりのpythonのエラーハンドリングかなり調べました。raise。。\n\n\n### HTTP Error 503\n\n\nエラーがまだ続いてるので`HTTP Error 503: Service Unavailable: HTTPError`の部分を見ていきます。\nまた、Validation failedという文字がないので`validate(urlopen(SITE).read())`この部分で返ってきたエラーが上記のエラーだと判断していきます。\n\n```python\ndef validate(res):\n    return EXPECTED in res\n```\n\nこちらは https://www.amazon.com/ にアクセスして、返ってきたｈｔｍｌファイルの中に「Online Shopping」という文字があるかどうかの診断になります。\n\nとりあえずAmazonからGoogleへのアクセスへ、環境変数の変更をする\n* https://www.google.co.jp/\n* Gmail\n\nそうすると\n\n```shell-session\n\nChecking https://www.google.co.jp/ at now...!...\nCheck passed!\nCheck complete at 2017-03-15 07:00:05.723916\n\n```\n\nやっとCheck passed!が出ました。\n\n> 503 Service Unavailable\nサービス利用不可。サービスが一時的に過負荷やメンテナンスで使用不可能である。\n例として、アクセスが殺到して処理不能に陥った場合に返される。\n\n\nhttps://www.amazon.com/ \nが落ちるわけないじゃーん。って心のそこから思って環境変数を返してチェックしてみることを失念してました。ただのGoogleサービスに変えたらうまくいきました。\nLambdaからのアクセス拒否してるの？\n\nハマったところです。\n\n### indent\n\nPythonのエラーですがインデックスの数とかでも何回かエラー出しました。\n\n```shell-session\nSyntax error in module 'lambda_function': \nunexpected indent (lambda_function.py, line 30)\n```\n\nこのあたり勉強したのですが、タブとスペース(4つ)の戦争ですね。\n[プログラミングのコードを書く時のタブvsスペース戦争がついに決着](http://www.gizmodo.jp/2016/09/tab-vs-space.html)\npythonはスペースで書くのが一般的だということが書かれてます。\n\n自分がローカルで編集してたファイルがtabで入っていて\nAWS上で編集したコードはスペース4つで入ります。\nこのindentエラーを見たくないのでスペース派に乗り換えました。\n\n### Requests\n\nurlopenをそのまま使ってもいいのですがrequestsを導入したいと思います。\n\n[python urllib2モジュール](http://d.hatena.ne.jp/yumimue/20071231/1199129495)\n[Requests: 人間のためのHTTP](http://requests-docs-ja.readthedocs.io/en/latest/)\n[Requestsを使わずに同じ事をするためのコード](https://gist.github.com/kennethreitz/973705)\n\nslackとかにメッセージ送るのが簡単になります。\n\n```今のコード.py\n# coding: utf-8\nfrom __future__ import print_function\n\nimport os\nimport json\nimport requests\nfrom datetime import datetime\nfrom urllib2 import urlopen\n\nSITE = os.environ['site']\nEXPECTED = os.environ['expected']\n\ndef validate(res):\n    return EXPECTED in res\n\ndef lambda_handler(event, context):\n    print('Checking {} at {}...'.format(SITE, event['time']))\n    try:\n        if not validate(urlopen(SITE).read()):\n            raise Exception('Validation failed')\n    except Exception as e:\n        print('Check failed!')\n        print(e)\n    else:\n        print('Check passed!')\n    finally:\n        print('Check complete at {}'.format(str(datetime.now())))\n        return \"Finish\"\n\n```\n\n\n```shell-session\nUnable to import module 'lambda_function': No module named requests\n```\n\nrequestsは外部モジュールなのでこんなエラーおきます。\n\n\n## 外部モジュールの使用\nrequestsみたいなPython標準外のモジュールを入れるのにも一癖あったので書いていきます。\n\n* lambda-uploaderを使ってリモート\n* ローカルで自分でzipにかためてUP\n\n### lambda-uploader\nこのあたりが参考になります。\n\n[lambda-uploaderを使ってAWS Lambdaをリモートで開発、実行、デプロイする](http://qiita.com/Esfahan/items/08fa6af8811dada4cb2a)\n[AWS Lambda Pythonをlambda-uploaderでデプロイ](http://dev.classmethod.jp/cloud/deploy-aws-lambda-python-with-lambda-uploader/)\n\n### 自分のコードをZIPアップロード\n自分はこれで行いました。単発だとすぐできる。\n[【AWS】Lambdaでpipしたいと思ったときにすべきこと](http://qiita.com/Hironsan/items/0eb5578f3321c72637b4)\n\n作業フォルダに`pip install requests -t .`して、それをzipで固めてアップする感じです。\n\n無事アップロードできたら、先程の`今のコード.py`からスタートします。\n\n## Slack\n\nimport \n* urllib2\n* requests\n* どっちでも可\n\napi\n* Slack api(token取得してごにょごにょ xoxp-12131212こんなやつ)\n* Webhook(urlだけ取ってくる)\n* どっちでも可\n\nどの組み合わせを使っても良いのですが、今回は簡単なrequests * Webhookを使います。\n\nこちらWebhookのURL取得はこちらを参考に！\n[SlackのWebhook URL取得手順](http://qiita.com/vmmhypervisor/items/18c99624a84df8b31008)\n\n\n```python\ndef send_slack(text):\n    url = \"先程げっとしたURL\"\n    payload_dic = {\n        \"text\":text,\n        \"icon_emoji\":':grin:',\n        \"channel\":'bot-test2',\n    }\n\n    r = requests.post(url, data=json.dumps(payload_dic))\n```\n\nたったこれだけでSlack送れます！\n\n```python\n# coding: utf-8\nfrom __future__ import print_function\n\nimport os\nimport json\nimport requests\nfrom datetime import datetime\nfrom urllib2 import urlopen\n\nSITE = os.environ['site']\nEXPECTED = os.environ['expected']\n\ndef validate(res):\n    return EXPECTED in res\n\ndef web_check():\n    try:\n        if not validate(urlopen(SITE).read()):\n            raise Exception('Validation failed')\n    except Exception as e:\n        print('Check failed!')\n        print(e)\n    else:\n        print('Check passed!')\n    finally:\n        print('Check complete at {}'.format(str(datetime.now())))\n\ndef lambda_handler(event, context):\n    print('Checking {} at {}...'.format(SITE, event['time']))\n    # web_check()\n    send_slack(\"test\")\n    return \"success!\"\n\ndef send_slack(text):\n    url = \"こちら自分のURL\"\n    payload_dic = {\n        \"text\":text,\n        \"icon_emoji\":':grin:',\n        \"channel\":'bot-test2',\n    }\n\n    r = requests.post(url, data=json.dumps(payload_dic))\n\n\n```\n\n`def web_check():`に処理を移して置きました。\n\n\n```\ndef lambda_handler(event, context):\n    print('Checking {} at {}...'.format(SITE, event['time']))\n    # web_check()\n    send_slack(\"test\")\n    return \"success!\"\n```\n\nこれで\n\n<img width=\"760\" alt=\"スクリーンショット 2017-03-15 16.55.31.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/b3cd2890-00f3-5c7d-0ff2-4016d94aa417.png\">\nSlack到着しました。\n\nOkay。\n次はDynamoDBからデータを取ってきます。\n\n\n# DynamoDB\n\n## 料金体系\n\nAWS の無料利用枠の一部としてのDynamoDB無料枠\n\n|ストレージ| 書き込み容量 | 書き込み容量 |\n|:-:|:-:|:-:|\n|25GB| 25  | 25  |\n\n> 1 つの容量のユニットで 1 秒あたりに 1 つのリクエストを処理します\n1ユニットの書き込み容量: 最大1KBデータを1秒に1書き込み\n1ユニットの読み込み容量: 最大4KBデータを1秒に1読み込み\nDynamoDB ストリームからの 250 万回の読み込みリクエストを無料で利用できます。\n\nとりあえずデータベースを作る時に書き込み容量と読み込み容量を1にセットして使えば、無料枠だとお金かからないと思います。\n今回は1分に1度くらいでもいいので、最小単位の1(1秒に1度アクセスできるレベル)を選びます。\n\n## 作ってみる\n\nとりあえず設定はこんな感じ。\n\n![スクリーンショット 2017-03-15 17.10.25.png](https://qiita-image-store.s3.amazonaws.com/0/112929/984460b7-8dc5-c2d5-31f4-ab5b807679c0.png)\n\nDynamoDBはハッシュ(言語によっては辞書型、連想配列など)のKeyでしかアクセスできません。今回はidをkeyとしてアクセスします。\n\n![スクリーンショット 2017-03-15 17.15.28.png](https://qiita-image-store.s3.amazonaws.com/0/112929/0a861237-db0f-371e-4596-4ad6bc488e94.png)\n\n```json\n\n{\n  \"id\": 1,\n  \"target\": \"Online Shopping\",\n  \"url\": \"https://www.amazon.com/\"\n}\n\n{\n  \"id\": 2,\n  \"target\": \"Gmail\",\n  \"url\": \"https://www.google.co.jp/\"\n}\n```\n\nurlからtargetを探すためのTableとして使います。\n\n\n## pythonコードから先程のデータを取ってみる\n\n```python\n# ２つ追加\nimport boto3\nfrom boto3.dynamodb.conditions import Key, Attr\n\ndef get_urls():\n    table    = dynamodb.Table('sites')\n    response = table.scan()\n    sites = response[\"Items\"]\n    return sites\n```\n\n機能を追加して、get_urls()でDynamoDBから取ってきたurlからtargetの文章があるかサーチしています。\n\n```現在の.py\n# coding: utf-8\nfrom __future__ import print_function\n\nimport os\nimport json\nimport requests\nfrom datetime import datetime\nfrom urllib2 import urlopen\nimport boto3\nfrom boto3.dynamodb.conditions import Key, Attr\n\ndynamodb = boto3.resource('dynamodb')\n\ndef validate(res, target):\n    return target in res\n\ndef web_check(url, target):\n    print(\"Serching ... \" + target)\n    try:\n        if validate(urlopen(url).read(), target):\n            print(\"Find!\")\n        else:\n            print(\"Not Find!\")\n    except Exception as e:\n        print('Error')\n        print(e)\n\ndef get_urls():\n    table    = dynamodb.Table('sites')\n    response = table.scan()\n    sites = response[\"Items\"]\n    return sites\n\ndef send_slack(text):\n    url = \"https://hooks.slack.com/services/\"\n    payload_dic = {\n        \"text\":text,\n        \"icon_emoji\":':grin:',\n        \"channel\":'bot-test2',\n    }\n    r = requests.post(url, data=json.dumps(payload_dic))\n\ndef lambda_handler(event, context):\n    print('Check start')\n\n    sites = get_urls()\n    for site in sites:\n        web_check(str(site[\"url\"]), str(site[\"target\"]))\n    \n    return \"success!\"\n\n\n```\n\n出力結果\n\n```shell-session\n\nCheck start\nSerching ... 技術情報共有サービスです at https://qiita.com/\nFind!\nSerching ... Gmail at https://www.google.co.jp/\nFind!\nSerching ... Gmailですか？ at https://www.google.co.jp/\nNot Find!\nSerching ... Online Shopping at https://www.amazon.com/\nError\nHTTP Error 503: Service Unavailable\nEND RequestId: 3992d81e-095e-11e7-b30a-1ddc7da9e992\n```\n\nここでもエラーおきました。Pythonつまづく！\n\n```shell-session\n\n'utf8' codec can't decode byte 0x90 in position 102: invalid start byte\n```\n\n[PythonのUnicodeEncodeErrorを知る](http://lab.hde.co.jp/2008/08/pythonunicodeencodeerror.html)\nここを参考にエラー解決しました。\n`type(site[\"url\"])`したら`<type 'unicode'>`だったので、\n`str(site[\"url\"])`をして`<type 'str'>`に変えました。\n\n\n## LambdaからDynamoDB書き込み\n\nsites_check1テーブルの追加\n\n![スクリーンショット 2017-03-15 18.19.12.png](https://qiita-image-store.s3.amazonaws.com/0/112929/e809a5ad-65ec-4f94-d2b9-a699380e0497.png)\n\n\n追加\n\n```python\nfrom datetime import datetime, timedelta\n\ndef insert(results):\n    date = datetime.now() + timedelta(hours=9)\n\n    id = 0\n    table = dynamodb.Table('sites_check')\n    table.put_item(\n        Item={\n            \"id\": id,\n            \"date\": date.strftime(\"%Y/%m/%d %H:%M\"),\n            \"result\": results\n       }\n    )\n```\n\n時間の増減を行うtimedeltaとかを追加しました。\nDynamoDBのsitesテーブルにタイトル追加しました。\n現在のコード\n\n```python\n\n# coding: utf-8\nfrom __future__ import print_function\n\nimport os\nimport json\nimport requests\nfrom datetime import datetime, timedelta\nfrom urllib2 import urlopen\nimport boto3\nfrom boto3.dynamodb.conditions import Key, Attr\n\ndynamodb = boto3.resource('dynamodb')\n\ndef validate(res, target):\n    return target in res\n\ndef web_check(url, target):\n    print(\"Serching ... \" + target + \" at \" + url)\n    try:\n        if validate(urlopen(url).read(), target):\n            return \"Find!\"\n        else:\n            return \"Not Find!\"\n    except Exception as e:\n        return str(e)\n\ndef get_urls():\n    table    = dynamodb.Table('sites')\n    response = table.scan()\n    sites = response[\"Items\"]\n    return sites\n\ndef send_slack(text):\n    url = \"https://hooks.slack.com/\"\n    payload_dic = {\n        \"text\":text,\n        \"icon_emoji\":':grin:',\n        \"channel\":'bot-test2',\n    }\n    r = requests.post(url, data=json.dumps(payload_dic))\n\ndef insert(results):\n    date = datetime.now() + timedelta(hours=9)\n\n    id = 0\n    table = dynamodb.Table('sites_check')\n    table.put_item(\n        Item={\n            \"id\": id,\n            \"date\": date.strftime(\"%Y/%m/%d %H:%M\"),\n            \"result\": results\n       }\n    )\n\ndef lambda_handler(event, context):\n    print('Check start')\n\n    results = {}\n    sites = get_urls()\n    for site in sites:\n        msg = web_check(str(site[\"url\"]), str(site[\"target\"]))\n        results[str(site[\"title\"])] = msg\n    \n    insert(results)\n    return \"success!\"\n\n\n\n```\n\nデータを挿入した結果がこちら。\n\n```json\n\n{\n  \"date\": \"2017/03/15 18:37\",\n  \"id\": 0,\n  \"result\": {\n    \"Amazon\": \"Find!\", # なぜかFindとなってエラー起きず \n    \"Google\": \"Find!\",\n    \"Google-2\": \"Not Find!\",\n    \"Qiita\": \"Find!\"\n  }\n}\n\n{\n  \"date\": \"2017/03/15 18:48\",\n  \"id\": 0,\n  \"result\": {\n    \"Amazon\": \"HTTP Error 503: Service Unavailable\", # こちらでエラー起きたときにstr(e)にしました\n    \"Google\": \"Find!\",\n    \"Google-2\": \"Not Find!\",\n    \"Qiita\": \"Find!\"\n  }\n}\n```\n\n\n`str(e)`ってしないとeがstr型じゃないのでエラーが起きました。\nPythonに慣れてきたので10分くらいで解決。\njsonってコメントつけられないんですね。\n\n\n## \n\n```python\ndef get_recent_codes():\n    date = datetime.now() + timedelta(hours=9)\n    now = date.strftime(\"%Y/%m/%d %H:%M\")\n    last = (date + timedelta(minutes=-9)).strftime(\"%Y/%m/%d %H:%M\")\n\n    # idが0かつ、１０分以内のデータを取ってくる感じのクエリ\n    response = table.query(\n        KeyConditionExpression=Key('id').eq(0) & Key('date').between(last, now)\n    )\n\n    return response\n```\n\n`response['Count']`に取ってこれたクエリの数が入ります。\n`response['Items']`に取ってこれたTableのデータがはいってます。\nそれ以外のデータ必要な場合は適宜、Printしつつデータの取り出しをしてください。\n\n\n\n結果こんな感じ\n\n```python\n# coding: utf-8\nfrom __future__ import print_function\n\nimport os\nimport json\nimport requests\nfrom datetime import datetime, timedelta\nfrom urllib2 import urlopen\nimport boto3\nfrom boto3.dynamodb.conditions import Key, Attr\n\ndynamodb = boto3.resource('dynamodb')\n\ndef validate(res, target):\n    return target in res\n\ndef web_check(url, target):\n    print(\"Serching ... \" + target + \" at \" + url)\n    try:\n        if validate(urlopen(url).read(), target):\n            return \"Find!\"\n        else:\n            return \"Not Find!\"\n    except Exception as e:\n        return str(e)\n\ndef get_urls():\n    table    = dynamodb.Table('sites')\n    response = table.scan()\n    sites = response[\"Items\"]\n    return sites\n\ndef send_slack(text):\n    url = \"https://hooks.slack.com/\"\n    payload_dic = {\n        \"text\":text,\n        \"icon_emoji\":':grin:',\n        \"channel\":'bot-test2',\n    }\n    r = requests.post(url, data=json.dumps(payload_dic))\n\ndef insert(results):\n    table = dynamodb.Table('sites_check')\n    date = datetime.now() + timedelta(hours=9)\n    id = 0\n    table.put_item(\n        Item={\n            \"id\": id,\n            \"date\": date.strftime(\"%Y/%m/%d %H:%M\"),\n            \"result\": results\n       }\n    )\n\ndef get_recent_codes():\n    table = dynamodb.Table('sites_check')\n\n    date = datetime.now() + timedelta(hours=9)\n    now = date.strftime(\"%Y/%m/%d %H:%M\")\n    last = (date + timedelta(minutes=-9)).strftime(\"%Y/%m/%d %H:%M\")\n    print(last + \" から \" + now + \" までのチェック\")\n\n    response = table.query(\n        KeyConditionExpression=Key('id').eq(0) & Key('date').between(last, now)\n    )\n    \n    return response\n\ndef lambda_handler(event, context):\n    print('Check start')\n\n    results = {}\n    sites = get_urls()\n    for site in sites:\n        msg = web_check(str(site[\"url\"]), str(site[\"target\"]))\n        results[str(site[\"title\"])] = msg\n    \n    insert(results)\n    print(get_recent_codes())\n    return \"success!\"\n\n\n\n```\n\n定期実行させたりいろいろできると思われます。\n\n\n# さいごに\n\nPythonとLambdaの素人なのでかなりエラーだしました。が、PythonとLambdaによるアーキテクトはかなり便利になると思うのでこれからも使っていきたいと思っています。\n\n","coediting":false,"comments_count":0,"created_at":"2017-03-15T19:30:51+09:00","group":null,"id":"04a921f79574c46f61c0","likes_count":82,"private":false,"reactions_count":0,"stocks_count":66,"tags":[{"name":"Python","versions":[]},{"name":"AWS","versions":[]},{"name":"lambda","versions":[]}],"title":"[ AWS ] 初めてLambda-PythonとDynamoDBに触る人に参考になるかもな話","updated_at":"2019-09-12T14:23:37+09:00","url":"https://qiita.com/ykhirao/items/04a921f79574c46f61c0","user":{"description":"Web Developer From 2016.\r\nPHP/Laravel && React/TypeScript/Node.js\r\n\r\n業務委託の依頼とかはWantedlyとかからでお願いします！","facebook_id":"","followees_count":39,"followers_count":100,"github_login_name":"ykhirao","id":"ykhirao","items_count":83,"linkedin_id":"","location":"Tokyo, Japan","name":"yk","organization":"","permanent_id":112929,"profile_image_url":"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/profile-images/1639030792","team_only":false,"twitter_screen_name":"ykhirao","website_url":"https://www.wantedly.com/id/ykhirao"},"page_views_count":null,"team_membership":null,"organization_url_name":null,"slide":false}},"path":"posts/04a921f79574c46f61c0"}
