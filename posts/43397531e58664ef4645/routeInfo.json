{"template":"__react_static_root__/src/components/QiitaPost","sharedHashesByProp":{},"data":{"post":{"rendered_body":"\n<h1>\n<span id=\"vue-test-utilsのpropsdataの基本的な使い方\" class=\"fragment\"></span><a href=\"#vue-test-utils%E3%81%AEpropsdata%E3%81%AE%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E3%81%84%E6%96%B9\"><i class=\"fa fa-link\"></i></a>Vue-test-utilsのpropsDataの基本的な使い方</h1>\n\n<p>最新版は<a href=\"https://lmiller1990.github.io/vue-testing-handbook/ja/components-with-props.html\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>で、Vue.jsのテストの書き方についてのハンドブックを公開させてもらっています。</p>\n\n<p>この記事を読むと</p>\n\n<ul>\n<li>テスト時にコンポーネントをwrapするときの引数の <code>propsData</code> に詳しくなる</li>\n<li>テストの実践的なリファクタリングが学べる</li>\n</ul>\n\n<p>弊社では、テストのリファクタリングは <code>factory関数</code> というものを作成して行っているので、興味あるかたはぜひ使ってみてください。</p>\n\n<h2>\n<span id=\"propsdataの基本的な使い方\" class=\"fragment\"></span><a href=\"#propsdata%E3%81%AE%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E3%81%84%E6%96%B9\"><i class=\"fa fa-link\"></i></a>propsDataの基本的な使い方</h2>\n\n<p><code>propsData</code> は基本的に <code>mount</code> や <code>shallowMount</code> とともに使うことができ、 <code>propsData</code> は親コンポーネントから <code>props</code> として渡されたものとしてテストで使用できます。</p>\n\n<p>第二引数のオブジェクトの中に書くことができますが、基本的な書き方は次の通りです。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">shallowMount</span><span class=\"p\">(</span><span class=\"nx\">Foo</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">propsData</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">foo</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">bar</span><span class=\"dl\">'</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n\n<h2>\n<span id=\"コンポーネントの作成とテスト\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90%E3%81%A8%E3%83%86%E3%82%B9%E3%83%88\"><i class=\"fa fa-link\"></i></a>コンポーネントの作成とテスト</h2>\n\n<h3>\n<span id=\"submitbuttonvue\" class=\"fragment\"></span><a href=\"#submitbuttonvue\"><i class=\"fa fa-link\"></i></a>SubmitButton.vue</h3>\n\n<p>2つの <code>props</code> を持つ簡単なコンポーネントを作成する。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><code><span class=\"nt\">&lt;template&gt;</span>\n<span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;span</span> <span class=\"na\">v-if=</span><span class=\"s\">\"isAdmin\"</span><span class=\"nt\">&gt;</span>管理者権限を実行する<span class=\"nt\">&lt;/span&gt;</span>\n  <span class=\"nt\">&lt;span</span> <span class=\"na\">v-else</span><span class=\"nt\">&gt;</span>権限がありません<span class=\"nt\">&lt;/span&gt;</span>\n  <span class=\"nt\">&lt;button&gt;</span>\n    {{ msg }}\n  <span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/template&gt;</span>\n\n<span class=\"nt\">&lt;script&gt;</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">SubmitButton</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n\n  <span class=\"na\">props</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">msg</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">,</span>\n      <span class=\"na\">required</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">},</span>\n    <span class=\"na\">isAdmin</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">Boolean</span><span class=\"p\">,</span>\n      <span class=\"na\">default</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n</code></pre></div></div>\n\n<h3>\n<span id=\"最初のテスト\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%88%9D%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88\"><i class=\"fa fa-link\"></i></a>最初のテスト</h3>\n\n<p>権限がない状態でのメッセージを検証していく。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">shallowMount</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@vue/test-utils</span><span class=\"dl\">'</span>\n<span class=\"k\">import</span> <span class=\"nx\">SubmitButton</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@/components/SubmitButton.vue</span><span class=\"dl\">'</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">SubmitButton.vue</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">権限がない状態のメッセージを表示する</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">送信する</span><span class=\"dl\">\"</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">shallowMount</span><span class=\"p\">(</span><span class=\"nx\">SubmitButton</span><span class=\"p\">,{</span>\n      <span class=\"na\">propsData</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">msg</span><span class=\"p\">:</span> <span class=\"nx\">msg</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">html</span><span class=\"p\">())</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">span</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">()).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">権限がありません</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">button</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">()).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">送信する</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n\n<p>テスト結果</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>PASS  tests/unit/SubmitButton.spec.js\n  SubmitButton.vue\n    ✓ 権限がない状態のメッセージを表示する (15ms)\n</code></pre></div></div>\n\n<p>console.logの出力結果</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><code><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;span&gt;</span>権限がありません<span class=\"nt\">&lt;/span&gt;</span>\n  <span class=\"nt\">&lt;button&gt;</span>\n    送信する\n  <span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p><code>props</code> で渡された <code>msg</code> がきちんと描画されていることがわかります。</p>\n\n<h3>\n<span id=\"2つ目のテスト\" class=\"fragment\"></span><a href=\"#2%E3%81%A4%E7%9B%AE%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88\"><i class=\"fa fa-link\"></i></a>2つ目のテスト</h3>\n\n<p>権限がある状態 ( <code>isAdmin</code> が true ) でのメッセージを検証していく。</p>\n\n<p>SubmitButton.spec.js</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">shallowMount</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@vue/test-utils</span><span class=\"dl\">'</span>\n<span class=\"k\">import</span> <span class=\"nx\">SubmitButton</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@/components/SubmitButton.vue</span><span class=\"dl\">'</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">SubmitButton.vue</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">権限がある状態のメッセージを表示する</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">送信する</span><span class=\"dl\">\"</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">isAdmin</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">shallowMount</span><span class=\"p\">(</span><span class=\"nx\">SubmitButton</span><span class=\"p\">,{</span>\n      <span class=\"na\">propsData</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">msg</span><span class=\"p\">,</span>\n        <span class=\"nx\">isAdmin</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">span</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">()).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">管理者権限を実行する</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">button</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">()).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">送信する</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n\n<p>テスト結果</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code>PASS  tests/unit/SubmitButton.spec.js\n  SubmitButton.vue\n    ✓ 権限がある状態のメッセージを表示する <span class=\"o\">(</span>4ms<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>console.logの出力結果</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><code><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;span&gt;</span>管理者権限を実行する<span class=\"nt\">&lt;/span&gt;</span>\n  <span class=\"nt\">&lt;button&gt;</span>\n    送信する\n  <span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p><code>props</code> で渡された <code>isAdmin</code> によって <code>&lt;span&gt;</code> の中がきちんと描画されていることがわかります。</p>\n\n<h2>\n<span id=\"テストのリファクタリング\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%81%AE%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0\"><i class=\"fa fa-link\"></i></a>テストのリファクタリング</h2>\n\n<p><code>Don't repeat yourself</code> の原則に従って従ってテストをリファクタリングしていきましょう。テストがPassしているのでリファクタリングも怖くありません。</p>\n\n<h3>\n<span id=\"factory関数\" class=\"fragment\"></span><a href=\"#factory%E9%96%A2%E6%95%B0\"><i class=\"fa fa-link\"></i></a>factory関数</h3>\n\n<p>テストの度に <code>shallowMount</code> を呼び出し同じような <code>propsData</code> を渡しているので、factory関数でリファクタリングしたいと思います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">送信する</span><span class=\"dl\">\"</span>\n<span class=\"kd\">const</span> <span class=\"nx\">factory</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">propsData</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">shallowMount</span><span class=\"p\">(</span><span class=\"nx\">SubmitButton</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"na\">propsData</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">msg</span><span class=\"p\">,</span>\n      <span class=\"p\">...</span><span class=\"nx\">propsData</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>呼び出すたびに <code>shallowMount</code> で wrap してくれる factory 関数ができました。これを使ってテストをDRYにしていきましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><code>  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">管理者あり</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span><span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">メッセージを表示する</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">factory</span><span class=\"p\">()</span>\n\n      <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">span</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">()).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">権限がありません</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n      <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">button</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">()).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">送信する</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">})</span>\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">管理者なし</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span><span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">メッセージを表示する</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">factory</span><span class=\"p\">({</span><span class=\"na\">isAdmin</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">})</span>\n\n      <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">span</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">()).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">管理者権限を実行する</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n      <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">button</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">()).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">送信する</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">})</span>\n</code></pre></div></div>\n\n<p>さてテストを見ていきたいと思います。まだテストはGreenでPASSしています。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code>PASS  tests/unit/SubmitButton.spec.js\n  SubmitButton.vue\n    リファクタリング\n      管理者あり\n        ✓ メッセージを表示する <span class=\"o\">(</span>5ms<span class=\"o\">)</span>\n      管理者なし\n        ✓ メッセージを表示する <span class=\"o\">(</span>2ms<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>テストがあることで、変更やリファクタリングが怖くなくなりました。</p>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<ul>\n<li>\n<code>propsData</code> はコンポーネントをマウントするときに引数として渡し、 <code>props</code> として利用できる</li>\n<li>factory関数を定義することでテストがDRYにかける</li>\n<li>\n<code>propsData</code> を使わずに <a href=\"https://vue-test-utils.vuejs.org/ja/api/wrapper-array/#setprops-props\" rel=\"nofollow noopener\" target=\"_blank\"><code>setProps</code></a> を使えばプロパティを強制的に更新することもできる</li>\n</ul>\n","body":"# Vue-test-utilsのpropsDataの基本的な使い方\n\n最新版は[こちら](https://lmiller1990.github.io/vue-testing-handbook/ja/components-with-props.html)で、Vue.jsのテストの書き方についてのハンドブックを公開させてもらっています。\n\nこの記事を読むと\n\n- テスト時にコンポーネントをwrapするときの引数の `propsData` に詳しくなる\n- テストの実践的なリファクタリングが学べる\n\n弊社では、テストのリファクタリングは `factory関数` というものを作成して行っているので、興味あるかたはぜひ使ってみてください。\n\n## propsDataの基本的な使い方\n\n`propsData` は基本的に `mount` や `shallowMount` とともに使うことができ、 `propsData` は親コンポーネントから `props` として渡されたものとしてテストで使用できます。\n\n第二引数のオブジェクトの中に書くことができますが、基本的な書き方は次の通りです。\n\n```js\nconst wrapper = shallowMount(Foo, {\n  propsData: {\n    foo: 'bar'\n  }\n})\n```\n\n## コンポーネントの作成とテスト\n\n### SubmitButton.vue\n\n2つの `props` を持つ簡単なコンポーネントを作成する。\n\n```html\n<template>\n<div>\n  <span v-if=\"isAdmin\">管理者権限を実行する</span>\n  <span v-else>権限がありません</span>\n  <button>\n    {{ msg }}\n  </button>\n</div>\n</template>\n\n<script>\nexport default {\n  name: \"SubmitButton\",\n\n  props: {\n    msg: {\n      type: String,\n      required: true\n    },\n    isAdmin: {\n      type: Boolean,\n      default: false\n    }\n  }\n}\n</script>\n```\n\n### 最初のテスト\n\n\b権限がない状態でのメッセージを検証していく。\n\n```js\nimport { shallowMount } from '@vue/test-utils'\nimport SubmitButton from '@/components/SubmitButton.vue'\n\ndescribe('SubmitButton.vue', () => {\n  it('権限がない状態のメッセージを表示する', () => {\n    const msg = \"送信する\"\n    const wrapper = shallowMount(SubmitButton,{\n      propsData: {\n        msg: msg\n      }\n    })\n\n    console.log(wrapper.html())\n\n    expect(wrapper.find(\"span\").text()).toBe(\"権限がありません\")\n    expect(wrapper.find(\"button\").text()).toBe(\"送信する\")\n  })\n})\n```\n\nテスト結果\n\n```\nPASS  tests/unit/SubmitButton.spec.js\n  SubmitButton.vue\n    ✓ 権限がない状態のメッセージを表示する (15ms)\n```\n\nconsole.logの出力結果\n\n```html\n<div>\n  <span>権限がありません</span>\n  <button>\n    送信する\n  </button>\n</div>\n```\n\n`props` で渡された `msg` がきちんと描画されていることがわかります。\n\n### 2つ目のテスト\n\n権限がある状態 ( `isAdmin` が true ) でのメッセージを検証していく。\n\nSubmitButton.spec.js\n\n```js\nimport { shallowMount } from '@vue/test-utils'\nimport SubmitButton from '@/components/SubmitButton.vue'\n\ndescribe('SubmitButton.vue', () => {\n  it('権限がある状態のメッセージを表示する', () => {\n    const msg = \"送信する\"\n    const isAdmin = true\n    const wrapper = shallowMount(SubmitButton,{\n      propsData: {\n        msg,\n        isAdmin\n      }\n    })\n\n    expect(wrapper.find(\"span\").text()).toBe(\"管理者権限を実行する\")\n    expect(wrapper.find(\"button\").text()).toBe(\"送信する\")\n  })\n})\n```\n\nテスト結果\n\n```shell\nPASS  tests/unit/SubmitButton.spec.js\n  SubmitButton.vue\n    ✓ 権限がある状態のメッセージを表示する (4ms)\n```\n\nconsole.logの出力結果\n\n```html\n<div>\n  <span>管理者権限を実行する</span>\n  <button>\n    送信する\n  </button>\n</div>\n```\n\n`props` で渡された `isAdmin` によって `<span>` の中がきちんと描画されていることがわかります。\n\n## テストのリファクタリング\n\n`Don't repeat yourself` の原則に従って従ってテストをリファクタリングしていきましょう。テストがPassしているのでリファクタリングも怖くありません。\n\n### factory関数\n\nテストの度に `shallowMount` を呼び出し\b同じような `propsData` を渡しているので、factory関数でリファクタリングしたいと思います。\n\n```js\nconst msg = \"送信する\"\nconst factory = (propsData) => {\n  return shallowMount(SubmitButton, {\n    propsData: {\n      msg,\n      ...propsData\n    }\n  })\n}\n```\n\n呼び出すたびに `shallowMount` で wrap してくれる factory 関数ができました。これを使ってテストをDRYにしていきましょう。\n\n```js\n  describe(\"管理者あり\", ()=> {\n    it(\"メッセージを表示する\", () => {\n      const wrapper = factory()\n\n      expect(wrapper.find(\"span\").text()).toBe(\"権限がありません\")\n      expect(wrapper.find(\"button\").text()).toBe(\"送信する\")\n    })\n  })\n\n  describe(\"管理者なし\", ()=> {\n    it(\"メッセージを表示する\", () => {\n      const wrapper = factory({isAdmin: true})\n\n      expect(wrapper.find(\"span\").text()).toBe(\"管理者権限を実行する\")\n      expect(wrapper.find(\"button\").text()).toBe(\"送信する\")\n    })\n  })\n```\n\nさてテストを見ていきたいと思います。まだテストはGreenでPASSしています。\n\n```shell\nPASS  tests/unit/SubmitButton.spec.js\n  SubmitButton.vue\n    リファクタリング\n      管理者あり\n        ✓ メッセージを表示する (5ms)\n      管理者なし\n        ✓ メッセージを表示する (2ms)\n```\n\nテストがあることで、変更やリファクタリングが怖くなくなりました。\n\n## まとめ\n\n- `propsData` は\u001dコンポーネントを\bマウントするときに引数として渡し、 `props` として利用できる\n- factory関数を定義することでテストがDRYにかける\n- `propsData` を使わずに [`setProps`](https://vue-test-utils.vuejs.org/ja/api/wrapper-array/#setprops-props) を使えばプロパティを強制的に更新することもできる\n","coediting":false,"comments_count":0,"created_at":"2018-07-19T23:32:25+09:00","group":null,"id":"43397531e58664ef4645","likes_count":7,"private":false,"reactions_count":0,"stocks_count":9,"tags":[{"name":"JavaScript","versions":[]},{"name":"TDD","versions":[]},{"name":"Vue.js","versions":[]},{"name":"vue-test-utils","versions":[]}],"title":"Vue-test-utilsのpropsDataの基本的な使い方","updated_at":"2018-07-20T14:02:07+09:00","url":"https://qiita.com/ykhirao/items/43397531e58664ef4645","user":{"description":"Web Developer From 2016.\r\nPHP/Laravel && React/TypeScript/Node.js\r\n\r\n業務委託の依頼とかはWantedlyとかからでお願いします！","facebook_id":"","followees_count":38,"followers_count":99,"github_login_name":"ykhirao","id":"ykhirao","items_count":72,"linkedin_id":"","location":"Tokyo, Japan","name":"yk","organization":"","permanent_id":112929,"profile_image_url":"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/profile-images/1639030792","team_only":false,"twitter_screen_name":"ykhirao","website_url":"https://www.wantedly.com/id/ykhirao"},"page_views_count":null,"team_membership":null,"organization_url_name":null,"slide":false}},"path":"posts/43397531e58664ef4645"}
