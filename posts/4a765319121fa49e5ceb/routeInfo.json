{"template":"__react_static_root__/src/components/QiitaPost","sharedHashesByProp":{},"data":{"post":{"rendered_body":"<h2 data-sourcepos=\"2:1-2:41\">\n<span id=\"ユーザー定義のtype-guard-の話\" class=\"fragment\"></span><a href=\"#%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E5%AE%9A%E7%BE%A9%E3%81%AEtype-guard-%E3%81%AE%E8%A9%B1\"><i class=\"fa fa-link\"></i></a>ユーザー定義のType Guard の話</h2>\n<p data-sourcepos=\"4:1-4:122\"><code>['test1', undefined].filter(Boolean)</code> だと <code>(string | undefined)[]</code> という型のままでしんどいときの話。</p>\n<div class=\"code-frame\" data-lang=\"typescript\" data-sourcepos=\"8:1-18:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">test1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">test1</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kc\">undefined</span><span class=\"p\">].</span><span class=\"nf\">filter</span><span class=\"p\">(</span><span class=\"nb\">Boolean</span><span class=\"p\">)</span>\n<span class=\"c1\">// const test1: (string | undefined)[]</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nx\">test1</span><span class=\"p\">);</span>\n<span class=\"c1\">// [LOG]: [\"test1\"] </span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">test2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">test2</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kc\">undefined</span><span class=\"p\">].</span><span class=\"nf\">filter</span><span class=\"p\">((</span><span class=\"nx\">v</span><span class=\"p\">):</span> <span class=\"nx\">v</span> <span class=\"k\">is</span> <span class=\"kr\">string</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">v</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"p\">)</span>\n<span class=\"c1\">// const test2: string[]</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nx\">test2</span><span class=\"p\">);</span>\n<span class=\"c1\">// [LOG]: [\"test2\"] </span>\n</code></pre></div></div>\n<p data-sourcepos=\"20:1-21:43\">以下でTypeScriptをWeb上で試せます。<br>\n<a href=\"https://www.typescriptlang.org/play?#code/Q\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.typescriptlang.org/play?#code/Q</a></p>\n<h2 data-sourcepos=\"24:1-24:9\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n<ul data-sourcepos=\"26:1-27:200\">\n<li data-sourcepos=\"26:1-26:116\"><a href=\"https://typescript-jp.gitbook.io/deep-dive/type-system/typeguard#yznotype-guard\" rel=\"nofollow noopener\" target=\"_blank\">ユーザー定義のType Guard</a></li>\n<li data-sourcepos=\"27:1-27:200\"><a href=\"https://zenn.dev/oreo2990/articles/5f75eaa285f2f9#4-%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E5%AE%9A%E7%BE%A9%E5%9E%8B%E3%82%AC%E3%83%BC%E3%83%89\" rel=\"nofollow noopener\" target=\"_blank\">【TypeScript】型ガードを改めて整理する</a></li>\n</ul>\n","body":"\n## ユーザー定義のType Guard の話\n\n`['test1', undefined].filter(Boolean)` だと `(string | undefined)[]` という型のままでしんどいときの話。\n\n\n\n```typescript\nconst test1 = ['test1', undefined].filter(Boolean)\n// const test1: (string | undefined)[]\nconsole.log(test1);\n// [LOG]: [\"test1\"] \n\nconst test2 = ['test2', undefined].filter((v): v is string => v != null)\n// const test2: string[]\nconsole.log(test2);\n// [LOG]: [\"test2\"] \n```\n\n以下でTypeScriptをWeb上で試せます。\nhttps://www.typescriptlang.org/play?#code/Q\n\n\n## 参考\n\n- [ユーザー定義のType Guard](https://typescript-jp.gitbook.io/deep-dive/type-system/typeguard#yznotype-guard)\n- [【TypeScript】型ガードを改めて整理する](https://zenn.dev/oreo2990/articles/5f75eaa285f2f9#4-%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E5%AE%9A%E7%BE%A9%E5%9E%8B%E3%82%AC%E3%83%BC%E3%83%89)\n","coediting":false,"comments_count":0,"created_at":"2022-07-13T17:31:55+09:00","group":null,"id":"4a765319121fa49e5ceb","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"JavaScript","versions":[]},{"name":"TypeScript","versions":[]}],"title":"いつも忘れる .filter で undefined を除去する方法 【TypeScript】","updated_at":"2022-07-13T17:31:55+09:00","url":"https://qiita.com/ykhirao/items/4a765319121fa49e5ceb","user":{"description":"Web Developer From 2016.\r\nPHP/Laravel && React/TypeScript/Node.js\r\n\r\n業務委託の依頼とかはWantedlyとかからでお願いします！","facebook_id":"","followees_count":39,"followers_count":100,"github_login_name":"ykhirao","id":"ykhirao","items_count":83,"linkedin_id":"","location":"Tokyo, Japan","name":"yk","organization":"","permanent_id":112929,"profile_image_url":"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/profile-images/1639030792","team_only":false,"twitter_screen_name":"ykhirao","website_url":"https://www.wantedly.com/id/ykhirao"},"page_views_count":null,"team_membership":null,"organization_url_name":null,"slide":false}},"path":"posts/4a765319121fa49e5ceb"}
