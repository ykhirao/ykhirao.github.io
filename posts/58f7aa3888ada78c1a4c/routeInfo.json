{"template":"__react_static_root__/src/components/QiitaPost","sharedHashesByProp":{},"data":{"post":{"rendered_body":"\n<h1>\n<span id=\"画像から日本の伝統色を取り出してみる\" class=\"fragment\"></span><a href=\"#%E7%94%BB%E5%83%8F%E3%81%8B%E3%82%89%E6%97%A5%E6%9C%AC%E3%81%AE%E4%BC%9D%E7%B5%B1%E8%89%B2%E3%82%92%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>画像から日本の伝統色を取り出してみる</h1>\n\n<h2>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n\n<p>こんにちわ、僕です。</p>\n\n<p>今回は画像の中で専有している色を取り出す既存の <code>rgbaster.js</code> と、今回自分が作った <code>traditionalColors.js</code> を組み合わせてWebアプリを作ってみます。</p>\n\n<h2>\n<span id=\"成果物\" class=\"fragment\"></span><a href=\"#%E6%88%90%E6%9E%9C%E7%89%A9\"><i class=\"fa fa-link\"></i></a>成果物</h2>\n\n<p>イメージは以下にスクリーンショットを貼り付けましたが、画像の中の専有している色に近い「日本の伝統色」を返すという感じのWebアプリです。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/c9443d17f82b3e0d7ba9e172596f758be3c38ef0/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f65376230336633322d623739642d363762362d646530352d6130643933656335636531322e6a706567\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"1188\" alt=\"スクリーンショット 2018-05-25 23.02.17.jpg\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fe7b03f32-b79d-67b6-de05-a0d93ec5ce12.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=426f11cc660079fff8500c65b1fe46f6\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/e7b03f32-b79d-67b6-de05-a0d93ec5ce12.jpeg\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fe7b03f32-b79d-67b6-de05-a0d93ec5ce12.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8ac1a5ed6d35d95c998610eda7431794 1x\" loading=\"lazy\"></a></p>\n\n<p>実際に動作する環境はこちらの<a href=\"https://ykhirao.github.io/traditional-color/\" rel=\"nofollow noopener\" target=\"_blank\">GitHub.io</a>からどうぞ！！</p>\n\n<p>「ファイルを選択」をクリックして適当な画像をブラウザにあげてみてください。そうするとJS/Canvasがごりごり動き出して色を判定してくれるはずです。</p>\n\n<h2>\n<span id=\"成果物2\" class=\"fragment\"></span><a href=\"#%E6%88%90%E6%9E%9C%E7%89%A92\"><i class=\"fa fa-link\"></i></a>成果物2</h2>\n\n<p>イメージは以下にスクリーンショットを貼り付けましたがカラーピッカーを立ち上げて色を入力すると伝統色を返すWebアプリです。どうぞ遊んでみてください。 <a href=\"https://ykhirao.github.io/traditional-color/src/index.html\" rel=\"nofollow noopener\" target=\"_blank\">GitHub.io</a> クリックできるのは上のほうのカラーピッカーだけです！</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/7f666dd8bafaf5c952df14be3c00c5b9e54a3e3b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f64313666323437342d383963662d333562302d666339652d3230646335393362386437322e6a706567\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"681\" alt=\"スクリーンショット 2018-05-26 0.20.00.jpg\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fd16f2474-89cf-35b0-fc9e-20dc593b8d72.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bc5b297633926bf04df246ef2c007c4a\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/d16f2474-89cf-35b0-fc9e-20dc593b8d72.jpeg\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fd16f2474-89cf-35b0-fc9e-20dc593b8d72.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2d8c2343a16ba5a71a4b39ef0120d3fa 1x\" loading=\"lazy\"></a></p>\n\n<h2>\n<span id=\"コード的な話\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%BC%E3%83%89%E7%9A%84%E3%81%AA%E8%A9%B1\"><i class=\"fa fa-link\"></i></a>コード的な話</h2>\n\n<p>コードは <a href=\"https://github.com/ykhirao/traditional-color/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/ykhirao/traditional-color/</a> です。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">traditionalColor.js</span></div>\n<div class=\"highlight\"><pre><code>\n<span class=\"p\">;(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">,</span> <span class=\"kc\">undefined</span><span class=\"p\">){</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">class</span> <span class=\"nx\">TraditionalColors</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">TraditionalColors is roaded !!!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">colors</span> <span class=\"o\">=</span> <span class=\"p\">[]</span> <span class=\"c1\">// 本当はここに伝統色のJSONが入っている</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">distance3D</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">sqrt</span><span class=\"p\">((</span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">pow</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">r</span> <span class=\"o\">-</span> <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">r</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">pow</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">g</span> <span class=\"o\">-</span> <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">g</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">pow</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">b</span> <span class=\"o\">-</span> <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">b</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)));</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">regExpToRgb</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">,</span> <span class=\"nx\">decimal</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">r</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"nx\">decimal</span><span class=\"p\">)</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">g</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"nx\">decimal</span><span class=\"p\">)</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"nx\">decimal</span><span class=\"p\">)</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"nx\">r</span><span class=\"p\">,</span> <span class=\"nx\">g</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">rgbStrToObj</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// from text \"rgb(4,8,16)\" to obj { r: 4, g: 8, a:16 }</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"sr\">/</span><span class=\"se\">([</span><span class=\"sr\">0-9</span><span class=\"se\">]{1,3})</span><span class=\"sr\">,</span><span class=\"se\">([</span><span class=\"sr\">0-9</span><span class=\"se\">]{1,3})</span><span class=\"sr\">,</span><span class=\"se\">([</span><span class=\"sr\">0-9</span><span class=\"se\">]{1,3})</span><span class=\"sr\">/i</span><span class=\"p\">.</span><span class=\"nx\">exec</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">);</span>\n      <span class=\"k\">return</span> <span class=\"nx\">result</span> <span class=\"p\">?</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">regExpToRgb</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">hexToRgbObj</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">){</span>\n      <span class=\"c1\">// \"#1234aa\" to { r: 12, g: 34, a: aa }</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"sr\">/</span><span class=\"se\">([</span><span class=\"sr\">a-zA-Z0-9</span><span class=\"se\">]{2})([</span><span class=\"sr\">a-zA-Z0-9</span><span class=\"se\">]{2})([</span><span class=\"sr\">a-zA-Z0-9</span><span class=\"se\">]{2})</span><span class=\"sr\">/i</span><span class=\"p\">.</span><span class=\"nx\">exec</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">);</span>\n      <span class=\"k\">return</span> <span class=\"nx\">result</span> <span class=\"p\">?</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">regExpToRgb</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">getNearColor</span><span class=\"p\">(</span><span class=\"nx\">rgb</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"nx\">approximationIndex</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"nx\">minDiff</span> <span class=\"o\">=</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">abs</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">distance3D</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">colors</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">rgb</span><span class=\"p\">,</span> <span class=\"nx\">rgb</span><span class=\"p\">)),</span>\n        <span class=\"nx\">diff</span><span class=\"p\">;</span>\n\n      <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">++</span><span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">colors</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">diff</span> <span class=\"o\">=</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">abs</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">distance3D</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">colors</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">rgb</span><span class=\"p\">,</span> <span class=\"nx\">rgb</span><span class=\"p\">));</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">diff</span> <span class=\"o\">&lt;</span> <span class=\"nx\">minDiff</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">minDiff</span> <span class=\"o\">=</span> <span class=\"nx\">diff</span><span class=\"p\">;</span>\n          <span class=\"nx\">approximationIndex</span> <span class=\"o\">=</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">colors</span><span class=\"p\">[</span><span class=\"nx\">approximationIndex</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">TraditionalColors</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">TraditionalColors</span> <span class=\"o\">||</span> <span class=\"nx\">TraditionalColors</span><span class=\"p\">;</span>\n<span class=\"p\">})(</span><span class=\"nb\">window</span><span class=\"p\">);</span>\n</code></pre></div>\n</div>\n\n<p>以上がtraditionalColors.jsですが、見てわかるように大したことはしていません。すべての伝統色との距離測って近いのを返却しているだけです。</p>\n\n<p>使い方は</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">index.html</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"./traditionalColors.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span> |\n<span class=\"nt\">&lt;script&gt;</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">tc</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">TraditionalColors</span><span class=\"p\">();</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">tc</span><span class=\"p\">.</span><span class=\"nx\">getNearColor</span><span class=\"p\">({</span><span class=\"na\">r</span><span class=\"p\">:</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"na\">g</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"na\">b</span><span class=\"p\">:</span> <span class=\"mi\">243</span><span class=\"p\">}))</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n</code></pre></div>\n</div>\n\n<p>的な感じで、インスタンス変数を作ってメソッドを呼びせばいろいろ使えます。さくっと簡単なお遊びで作ったのですが、写真が趣味な人からすると結構楽しかったりします。</p>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p>rgbaster.js のソースコードを読むのは簡単でしたのでぜひ読んでみるといいかと思います。canvasの使い方も学べました。</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<p><a href=\"http://liginc.co.jp/web/js/other-js/130257\" rel=\"nofollow noopener\" target=\"_blank\">rgbaster.jsを使って画像の色を抽出してみよう | 株式会社LIG</a></p>\n","body":"# 画像から日本の伝統色を取り出してみる\n\n## はじめに\n\nこんにちわ、僕です。\n\n今回は画像の中で専有している色を取り出す既存の `rgbaster.js` と、今回自分が作った `traditionalColors.js` を組み合わせてWebアプリを作ってみます。\n\n## 成果物\n\nイメージは以下にスクリーンショットを貼り付けましたが、画像の中の専有している色に近い「日本の伝統色」を返すという感じのWebアプリです。\n\n<img width=\"1188\" alt=\"スクリーンショット 2018-05-25 23.02.17.jpg\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/e7b03f32-b79d-67b6-de05-a0d93ec5ce12.jpeg\">\n\n実際に動作する環境はこちらの[GitHub.io](https://ykhirao.github.io/traditional-color/)からどうぞ！！\n\n「ファイルを選択」をクリックして適当な画像をブラウザにあげてみてください。そうするとJS/Canvasがごりごり動き出して色を判定してくれるはずです。\n\n## 成果物2\n\nイメージは以下にスクリーンショットを貼り付けましたがカラーピッカーを立ち上げて色を入力すると伝統色を返すWebアプリです。どうぞ遊んでみてください。 [GitHub.io](https://ykhirao.github.io/traditional-color/src/index.html) クリックできるのは上のほうのカラーピッカーだけです！\n\n<img width=\"681\" alt=\"スクリーンショット 2018-05-26 0.20.00.jpg\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/d16f2474-89cf-35b0-fc9e-20dc593b8d72.jpeg\">\n\n## コード的な話\n\nコードは https://github.com/ykhirao/traditional-color/ です。\n\n```traditionalColor.js\n\n;(function(window, undefined){\n  \"use strict\";\n\n  class TraditionalColors {\n    constructor() {\n      console.log(\"TraditionalColors is roaded !!!\");\n      this.colors = [] // 本当はここに伝統色のJSONが入っている\n    }\n\n    distance3D(a, b) {\n      return Math.sqrt((Math.pow((a.r - b.r), 2) + Math.pow((a.g - b.g), 2) + Math.pow((a.b - b.b), 2)));\n    }\n\n    regExpToRgb(result, decimal=10) {\n      const r = parseInt(result[1], decimal)\n      const g = parseInt(result[2], decimal)\n      const b = parseInt(result[3], decimal)\n      return {r, g, b}\n    }\n\n    rgbStrToObj(str) {\n      // from text \"rgb(4,8,16)\" to obj { r: 4, g: 8, a:16 }\n      var result = /([0-9]{1,3}),([0-9]{1,3}),([0-9]{1,3})/i.exec(str);\n      return result ? this.regExpToRgb(result) : null;\n    }\n\n    hexToRgbObj(str){\n      // \"#1234aa\" to { r: 12, g: 34, a: aa }\n      var result = /([a-zA-Z0-9]{2})([a-zA-Z0-9]{2})([a-zA-Z0-9]{2})/i.exec(str);\n      return result ? this.regExpToRgb(result, 16) : null;\n    }\n\n    getNearColor(rgb) {\n      let i = 0,\n        approximationIndex = 0,\n        minDiff = Math.abs(this.distance3D(this.colors[0].rgb, rgb)),\n        diff;\n\n      while (++i < this.colors.length) {\n        diff = Math.abs(this.distance3D(this.colors[i].rgb, rgb));\n\n        if (diff < minDiff) {\n          minDiff = diff;\n          approximationIndex = i;\n        }\n      }\n      return this.colors[approximationIndex];\n    }\n  }\n\n  window.TraditionalColors = window.TraditionalColors || TraditionalColors;\n})(window);\n```\n\n以上がtraditionalColors.jsですが、見てわかるように大したことはしていません。すべての伝統色との距離測って近いのを返却しているだけです。\n\n使い方は\n\n```index.html\n<script src=\"./traditionalColors.js\"></script> |\n<script>\n  const tc = new window.TraditionalColors();\n  console.log(tc.getNearColor({r: 14, g: 12, b: 243}))\n</script>\n```\n\n的な感じで、インスタンス変数を作ってメソッドを呼びせばいろいろ使えます。さくっと簡単なお遊びで作ったのですが、写真が趣味な人からすると結構楽しかったりします。\n\n## 終わりに\n\nrgbaster.js のソースコードを読むのは簡単でしたのでぜひ読んでみるといいかと思います。canvasの使い方も学べました。\n\n## 参考\n\n[rgbaster.jsを使って画像の色を抽出してみよう | 株式会社LIG](http://liginc.co.jp/web/js/other-js/130257)\n","coediting":false,"comments_count":0,"created_at":"2018-05-28T09:59:14+09:00","group":null,"id":"58f7aa3888ada78c1a4c","likes_count":13,"private":false,"reactions_count":0,"tags":[{"name":"JavaScript","versions":[]},{"name":"JSON","versions":[]},{"name":"canvas","versions":[]}],"title":"画像から日本の伝統色を取り出してみるライブラリ作った","updated_at":"2018-05-28T09:59:29+09:00","url":"https://qiita.com/ykhirao/items/58f7aa3888ada78c1a4c","user":{"description":"Web Developer For 6 years.\r\nPHP/Laravel && (React OR Vue.js)\r\nTypeScript/node.js\r\n\r\n業務委託の依頼とかはWantedlyとかからでお願いします！","facebook_id":"","followees_count":38,"followers_count":95,"github_login_name":"ykhirao","id":"ykhirao","items_count":58,"linkedin_id":"","location":"Tokyo, Japan","name":"yk","organization":"","permanent_id":112929,"profile_image_url":"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/profile-images/1639030792","team_only":false,"twitter_screen_name":"yk_hirao","website_url":"https://www.wantedly.com/id/ykhirao"},"page_views_count":null,"team_membership":null}},"path":"posts/58f7aa3888ada78c1a4c"}
