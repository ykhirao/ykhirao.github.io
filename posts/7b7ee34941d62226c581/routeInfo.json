{"template":"__react_static_root__/src/components/QiitaPost","sharedHashesByProp":{},"data":{"post":{"rendered_body":"\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>自分が1年くらい独学で勉強して、2017年1月にエンジニアに転職したので、当時苦労した点などを思い出しつつ、このタイミングでまとめられたらいいと思っています。<br>\n何か間違いとか異論ありましたらコメント欄でお願いします。</p>\n\n<h1>\n<span id=\"-記事について\" class=\"fragment\"></span><a href=\"#-%E8%A8%98%E4%BA%8B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a><i></i> 記事について</h1>\n\n<h2>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h2>\n\n<h3>\n<span id=\"一緒にpaizaioを使いrubyで頭の体操をしましょう\" class=\"fragment\"></span><a href=\"#%E4%B8%80%E7%B7%92%E3%81%ABpaizaio%E3%82%92%E4%BD%BF%E3%81%84ruby%E3%81%A7%E9%A0%AD%E3%81%AE%E4%BD%93%E6%93%8D%E3%82%92%E3%81%97%E3%81%BE%E3%81%97%E3%82%87%E3%81%86\"><i class=\"fa fa-link\"></i></a><strong>一緒にpaiza.IOを使いRubyで頭の体操をしましょう!!</strong>\n</h3>\n\n<p>paiza.IO: 言語ごとに環境構築しなくていいオンラインサービスなので、今回はこれを使います。<br>\nRuby: 今回はプログラミング言語のRubyを使います。<br>\n頭の体操: 数独とかクイズとか好きな人は、アルゴリズムの問題サイトを解くのすごく達成感あると思います！！</p>\n\n<h2>\n<span id=\"記事の対象者\" class=\"fragment\"></span><a href=\"#%E8%A8%98%E4%BA%8B%E3%81%AE%E5%AF%BE%E8%B1%A1%E8%80%85\"><i class=\"fa fa-link\"></i></a>記事の対象者</h2>\n\n<ul>\n<li>プログラミングを習い初めたけど、何から始めよう。</li>\n<li>ドットインストールくらいはみたよ</li>\n<li>アルゴリズムの問題解きたい !!</li>\n<li>標準入力ってなに ??</li>\n<li>どんな言語選べば良いのかな。環境構築大変そう。</li>\n<li>Paiza, CodeIQ, yukicoderなどのサイトを使ってみたい。</li>\n</ul>\n\n<h2>\n<span id=\"記事での勉強法おすすめ\" class=\"fragment\"></span><a href=\"#%E8%A8%98%E4%BA%8B%E3%81%A7%E3%81%AE%E5%8B%89%E5%BC%B7%E6%B3%95%E3%81%8A%E3%81%99%E3%81%99%E3%82%81\"><i class=\"fa fa-link\"></i></a>記事での勉強法おすすめ</h2>\n\n<p>アルゴリズムの問題を解きまくろう</p>\n\n<h2>\n<span id=\"記事を読み終えると\" class=\"fragment\"></span><a href=\"#%E8%A8%98%E4%BA%8B%E3%82%92%E8%AA%AD%E3%81%BF%E7%B5%82%E3%81%88%E3%82%8B%E3%81%A8\"><i class=\"fa fa-link\"></i></a>記事を読み終えると</h2>\n\n<p>[ 標準入力 ]が使えるようになる！</p>\n\n<p>アルゴリズムの問題サイトで、簡単な問題を解くことができるようになります！！<br>\n最後までお付き合いください。</p>\n\n<h1>\n<span id=\"paizaio\" class=\"fragment\"></span><a href=\"#paizaio\"><i class=\"fa fa-link\"></i></a>paiza.IO</h1>\n\n<h3>\n<span id=\"paizaioはこちら\" class=\"fragment\"></span><a href=\"#paizaio%E3%81%AF%E3%81%93%E3%81%A1%E3%82%89\"><i class=\"fa fa-link\"></i></a>paiza.IOは<a href=\"https://paiza.io/projects/new\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>。</h3>\n\n<p>コードを書いたらそのまま実行できるオンラインサービスで、かなり便利です。<br>\n<a href=\"https://paiza.io/help\" rel=\"nofollow noopener\" target=\"_blank\">help</a>によると対応言語はこちら。<br>\n[ C, C++, C#, Java, Python2, Python3, Ruby, Perl, PHP, JavaScript, Objective-C, Scala, Swift, Go, Haskell, CoffeeScript, Bash, Erlang, R, COBOL, VB, F#, Clojure, D, Elixir, MySQL ]<br>\n使い方はこちら<a href=\"http://qiita.com/saltheads/items/ecb2292c456738d3e118\" id=\"reference-a6669ec1813428a2ca05\">paiza.IO の使い方</a>にまとまってましたので参考にされるといいかと思います。私が扱うのは標準入力の機能付近です。</p>\n\n<h2>\n<span id=\"簡単な文字の入力と出力はpaizaioが便利\" class=\"fragment\"></span><a href=\"#%E7%B0%A1%E5%8D%98%E3%81%AA%E6%96%87%E5%AD%97%E3%81%AE%E5%85%A5%E5%8A%9B%E3%81%A8%E5%87%BA%E5%8A%9B%E3%81%AFpaizaio%E3%81%8C%E4%BE%BF%E5%88%A9\"><i class=\"fa fa-link\"></i></a>簡単な文字の入力と出力はpaiza.IOが便利</h2>\n\n<p>上記の<a href=\"https://paiza.io/help\" rel=\"nofollow noopener\" target=\"_blank\">help</a>から対応言語をコピーしてきたらこちら</p>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">help.txt</span></div>\n<div class=\"highlight\"><pre><code>C   clang 3.8 / LLVM 3.8 (C99)  2   512\nC++ clang 3.8 / LLVM 3.8 / libc++ (C++14)   2   512\nC#  mono-4.2.1 (C#6, CLI4.5)    2   512\nJava    java 1.8.0  2   512\nPython2 python 2.7.12   2   512\nPython3 python 3.5.2    2   512\n(以下省略)\n</code></pre></div>\n</div>\n\n<p>こういう簡単なテキストの処理がpaiza.IOでは便利だと思ってます。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/d4c42680e92dcd87cb2d4ca259d077cfe683f3d6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f36333935616362382d326432302d613930382d616135362d3137376236376565376431322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"543\" alt=\"スクリーンショット 2017-02-24 12.14.45.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F6395acb8-2d20-a908-aa56-177b67ee7d12.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=458acb87b558ff7c6a5f841ef150bd02\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/6395acb8-2d20-a908-aa56-177b67ee7d12.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F6395acb8-2d20-a908-aa56-177b67ee7d12.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6a7927090359e5bab3abe5c08ebfb4a1 1x\" loading=\"lazy\"></a><br>\n<a href=\"https://paiza.io/help\" rel=\"nofollow noopener\" target=\"_blank\">help</a>の対応言語一覧からのコピーを上の画像の「入力」という部分に貼り付け、rubyコードを書き実行すると「出力」に結果がでます。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">ruby.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[]</span> <span class=\"c1\"># 配列の初期化</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nb\">gets</span><span class=\"p\">)</span> <span class=\"c1\"># 標準入力があるかぎり実行</span>\n    <span class=\"n\">arr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"vg\">$_</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> \n    <span class=\"c1\"># $_に標準入力が入る</span>\n    <span class=\"c1\"># split(\" \")で半角スペースで区切り、配列にする</span>\n    <span class=\"c1\"># 配列の一番目をarrに入れている</span>\n<span class=\"k\">end</span>\n<span class=\"nb\">p</span> <span class=\"n\">arr</span>\n<span class=\"c1\"># p arr の出力結果がこちら</span>\n<span class=\"p\">[</span><span class=\"s2\">\"C\"</span><span class=\"p\">,</span> <span class=\"s2\">\"C++\"</span><span class=\"p\">,</span> <span class=\"s2\">\"C#\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Java\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Python2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Python3\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Ruby\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Perl\"</span><span class=\"p\">,</span> <span class=\"s2\">\"PHP\"</span><span class=\"p\">,</span> \n<span class=\"s2\">\"JavaScript\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Objective-C\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Scala\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Swift\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Go\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Haskell\"</span><span class=\"p\">,</span> <span class=\"s2\">\"CoffeeScript\"</span><span class=\"p\">,</span> \n<span class=\"s2\">\"Bash\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Erlang\"</span><span class=\"p\">,</span> <span class=\"s2\">\"R\"</span><span class=\"p\">,</span> <span class=\"s2\">\"COBOL\"</span><span class=\"p\">,</span> <span class=\"s2\">\"VB\"</span><span class=\"p\">,</span> <span class=\"s2\">\"F#\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Clojure\"</span><span class=\"p\">,</span> <span class=\"s2\">\"D\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Elixir\"</span><span class=\"p\">,</span> <span class=\"s2\">\"MySQL\"</span><span class=\"p\">]</span>\n</code></pre></div>\n</div>\n\n<p>こんな感じで、簡単なテキスト処理をしたいというときにはかなり使ってます。<br>\nコードは非公開設定もできます。</p>\n\n<p>このpaiza.IOを使ってアルゴリズムの問題とか、初心者の時自分がつまずいた点を以下に書いていきたいと思います。</p>\n\n<h1>\n<span id=\"標準入力を使ってみよう\" class=\"fragment\"></span><a href=\"#%E6%A8%99%E6%BA%96%E5%85%A5%E5%8A%9B%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86\"><i class=\"fa fa-link\"></i></a>標準入力を使ってみよう</h1>\n\n<h2>\n<span id=\"今後の書き方のまとめ\" class=\"fragment\"></span><a href=\"#%E4%BB%8A%E5%BE%8C%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>今後の書き方のまとめ</h2>\n\n<p><a href=\"https://camo.qiitausercontent.com/647b7d7423ca1f5efcf17c4959465a02bda0b096/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f38323236666638362d383831342d636262652d313636652d6363383031626539353735352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"569\" alt=\"スクリーンショット 2017-02-24 13.35.10.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F8226ff86-8814-cbbe-166e-cc801be95755.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f89cc8efbcc73098fd3eab4001a48ddc\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/8226ff86-8814-cbbe-166e-cc801be95755.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F8226ff86-8814-cbbe-166e-cc801be95755.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=788fe24d8b209954cd9c126ee3e1e288 1x\" loading=\"lazy\"></a></p>\n\n<p>言語は左上の[Ruby]と選んでください。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">Main.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\"># Main.rbのここにコード書いていきます。</span>\n<span class=\"c1\"># 隣にファイル追加できたりしますが一旦は使わない方向で！</span>\n</code></pre></div>\n</div>\n\n<ul>\n<li>実行 =&gt; ファイル実行。アカウントログインしてる人だと成功するとデータ保存される！</li>\n<li>出力 =&gt; pとかputsとかprintとかの出力結果</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">入力.txt</span></div>\n<div class=\"highlight\"><pre><code># こんな形で入力は[ 入力.txt ]と書く場合があると思いますので、入力欄に入れてください！\n</code></pre></div>\n</div>\n\n<ul>\n<li>入力 =&gt; ここが噂の標準入力</li>\n<li>実行時エラー =&gt; エラーが出た場合は画面がオレンジっぽいの出るので、ここを見ましょう！</li>\n</ul>\n\n<h1>\n<span id=\"さて本題標準入力を使ったデータ操作を見ていきましょう\" class=\"fragment\"></span><a href=\"#%E3%81%95%E3%81%A6%E6%9C%AC%E9%A1%8C%E6%A8%99%E6%BA%96%E5%85%A5%E5%8A%9B%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%83%87%E3%83%BC%E3%82%BF%E6%93%8D%E4%BD%9C%E3%82%92%E8%A6%8B%E3%81%A6%E3%81%84%E3%81%8D%E3%81%BE%E3%81%97%E3%82%87%E3%81%86\"><i class=\"fa fa-link\"></i></a>さて本題、標準入力を使ったデータ操作を見ていきましょう！</h1>\n\n<blockquote>\n<p>Q. こんな感じで問題だしていくのでその操作のサンプルを書いていきます！</p>\n</blockquote>\n\n<p>rubyの[p]というのは出力ですが、文字列ならの5なら[ \"5\" ]と数値の5なら[ 5 ]と出力してくれるので、判断に使ってください！</p>\n\n<h2>\n<span id=\"数字の扱い\" class=\"fragment\"></span><a href=\"#%E6%95%B0%E5%AD%97%E3%81%AE%E6%89%B1%E3%81%84\"><i class=\"fa fa-link\"></i></a>数字の扱い</h2>\n\n<blockquote>\n<p>Q. 数字が与えられるのでそれを5倍して出力しなさい</p>\n</blockquote>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">入力.txt</span></div>\n<div class=\"highlight\"><pre><code>4\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">Main.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"nb\">gets</span>\n<span class=\"nb\">p</span> <span class=\"n\">i</span> <span class=\"c1\"># =&gt; \"4\" 文字列の4が出力されます。</span>\n<span class=\"nb\">p</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">5</span> <span class=\"c1\"># =&gt; \"44444\" 文字列が5回繰り返して出力されます</span>\n<span class=\"nb\">p</span> <span class=\"n\">i</span><span class=\"p\">.</span><span class=\"nf\">to_i</span> <span class=\"c1\"># =&gt; 4 数値の4が出力されました。</span>\n<span class=\"nb\">p</span> <span class=\"n\">i</span><span class=\"p\">.</span><span class=\"nf\">to_i</span> <span class=\"o\">*</span> <span class=\"mi\">5</span> <span class=\"c1\"># =&gt; 20 数値の20が出力</span>\n</code></pre></div>\n</div>\n\n<ul>\n<li>p 文字列か数値かをわかりやすく出力してくれる</li>\n<li>gets 標準入力から一列取得してくる</li>\n<li>iという変数にgetsを代入</li>\n<li>.to_i　というメソッドで数値への変換を行っている</li>\n<li>[ * ]これはかけるという意味で、文字列数値どちらでも使えます。</li>\n</ul>\n\n<p>どんどんいきますよ〜〜〜〜</p>\n\n<hr>\n\n<blockquote>\n<p>Q. 数字が3行で与えられるのですべてを足して出力せよ</p>\n</blockquote>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">入力.txt</span></div>\n<div class=\"highlight\"><pre><code>7\n13\n5\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">Main.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"nb\">gets</span><span class=\"p\">.</span><span class=\"nf\">to_i</span> <span class=\"c1\"># sumには7が足されます</span>\n<span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"nb\">gets</span><span class=\"p\">.</span><span class=\"nf\">to_i</span> <span class=\"c1\"># sumには13が足されます</span>\n<span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"nb\">gets</span><span class=\"p\">.</span><span class=\"nf\">to_i</span> <span class=\"c1\"># sumには5が足されます</span>\n<span class=\"nb\">puts</span> <span class=\"n\">sum</span> <span class=\"c1\"># =&gt; 25が出力されました！</span>\n</code></pre></div>\n</div>\n\n<ul>\n<li>puts 文字列でも数値でも\"\"なしで出力されます</li>\n<li>3回同じ操作をするのはコードが冗長なので、同じ結果が得られる別の書き方にかえます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">Main.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"mi\">3</span><span class=\"p\">.</span><span class=\"nf\">times</span> <span class=\"k\">do</span>\n    <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"nb\">gets</span><span class=\"p\">.</span><span class=\"nf\">to_i</span>\n<span class=\"k\">end</span>\n<span class=\"nb\">puts</span> <span class=\"n\">sum</span> <span class=\"c1\"># =&gt; 25が出力されました！</span>\n</code></pre></div>\n</div>\n\n<ul>\n<li>3.times do end =&gt;　3回実行せよって命令です。</li>\n<li>さきほどと同じように7,13,5がどんどん足されていきます。</li>\n</ul>\n\n<hr>\n\n<blockquote>\n<p>n個の数値をかけ合わせなさい<br>\n一行目にnを、残りのn行に数値を入れるとする</p>\n</blockquote>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">入力.txt</span></div>\n<div class=\"highlight\"><pre><code>4 # ここに書いてある数値の分だけ、掛け算するよ！ \n1\n2\n3\n4\n</code></pre></div>\n</div>\n\n<p>1 * 2 * 3 * 4の出力がみたいってこと！</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">Main.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"nb\">gets</span><span class=\"p\">.</span><span class=\"nf\">to_i</span> <span class=\"c1\"># 最初の4が入る</span>\n<span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"c1\"># 掛け算するので最初は0にしちゃだめ</span>\n<span class=\"n\">num</span><span class=\"p\">.</span><span class=\"nf\">times</span> <span class=\"k\">do</span> <span class=\"c1\"># numの数(4)回実行されるよ</span>\n    <span class=\"n\">sum</span> <span class=\"o\">*=</span> <span class=\"nb\">gets</span><span class=\"p\">.</span><span class=\"nf\">to_i</span> <span class=\"c1\"># 1~4がどんどん掛け算されていく</span>\n<span class=\"k\">end</span>\n<span class=\"nb\">puts</span> <span class=\"n\">sum</span> <span class=\"c1\"># =&gt; 24が出力されました！</span>\n</code></pre></div>\n</div>\n\n<ul>\n<li>num.times do のnumは変数でもOKです！今回は4回実行されました。</li>\n</ul>\n\n<p>次いくよ〜〜</p>\n\n<hr>\n\n<h2>\n<span id=\"配列の操作\" class=\"fragment\"></span><a href=\"#%E9%85%8D%E5%88%97%E3%81%AE%E6%93%8D%E4%BD%9C\"><i class=\"fa fa-link\"></i></a>配列の操作</h2>\n\n<blockquote>\n<p>[n m]と入力があるので、n*mを出力しなさい！</p>\n</blockquote>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">入力.txt</span></div>\n<div class=\"highlight\"><pre><code>4 6\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">Main.rb</span></div>\n<div class=\"highlight\"><pre><code>\n<span class=\"n\">input</span> <span class=\"o\">=</span> <span class=\"nb\">gets</span>\n<span class=\"nb\">p</span> <span class=\"n\">input</span> <span class=\"c1\"># =&gt; [\"4 6\"]</span>\n<span class=\"nb\">p</span> <span class=\"n\">input</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; [\"4\", \"6\"]</span>\n<span class=\"cm\">=begin\n[\"4\", \"6\"]は配列になっていて\n0番目の要素に\"4\"が\n1番目の要素に\"6\"が入っています。\n=end</span>\n<span class=\"nb\">p</span> <span class=\"n\">input</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"c1\"># =&gt; \"4\"</span>\n<span class=\"nb\">p</span> <span class=\"n\">input</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"c1\"># =&gt; \"6\"</span>\n<span class=\"nb\">p</span> <span class=\"n\">input</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nf\">to_i</span> <span class=\"c1\"># =&gt; 4</span>\n<span class=\"nb\">p</span> <span class=\"n\">input</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nf\">to_i</span> <span class=\"c1\"># =&gt; 6</span>\n<span class=\"nb\">puts</span> <span class=\"n\">input</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nf\">to_i</span> <span class=\"o\">*</span> <span class=\"n\">input</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nf\">to_i</span> <span class=\"c1\"># =&gt; 24</span>\n\n</code></pre></div>\n</div>\n\n<ul>\n<li>rubyのコメントは#(一行コメント)</li>\n<li>=beginから=endまで(複数行コメント)</li>\n<li>splitは分割して配列にしてくれるメソッド</li>\n<li>今回はsplit(\"半角スペース\")で[4 6]を分割</li>\n<li>もうちょっときれいに書くと</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">Main.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">input</span> <span class=\"o\">=</span> <span class=\"nb\">gets</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">)</span> <span class=\"c1\"># 入力をすぐに配列に分割</span>\n<span class=\"n\">num1</span> <span class=\"o\">=</span> <span class=\"n\">input</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nf\">to_i</span> <span class=\"c1\"># 配列の0番目を数値に</span>\n<span class=\"n\">num2</span> <span class=\"o\">=</span> <span class=\"n\">input</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nf\">to_i</span> <span class=\"c1\"># 配列の1番目を数値に</span>\n<span class=\"nb\">puts</span> <span class=\"n\">num1</span> <span class=\"o\">*</span> <span class=\"n\">num2</span> <span class=\"c1\"># 数値の掛け算</span>\n</code></pre></div>\n</div>\n\n<p>みたいな感じでしょうか。次行きます〜〜〜</p>\n\n<hr>\n\n<blockquote>\n<p>半角スペース区切りであたえられる5つの数字[n m l s t]を足しなさい。</p>\n</blockquote>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">入力.txt</span></div>\n<div class=\"highlight\"><pre><code>2 3 6 14 6\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">Main.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">input</span> <span class=\"o\">=</span> <span class=\"nb\">gets</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">)</span> <span class=\"c1\"># 半角スペース区切りで配列にする</span>\n<span class=\"nb\">p</span> <span class=\"n\">input</span> <span class=\"c1\"># =&gt; [\"2\", \"3\", \"6\", \"14\", \"6\"] </span>\n<span class=\"n\">input</span><span class=\"p\">.</span><span class=\"nf\">map!</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">to_i</span><span class=\"p\">}</span> <span class=\"c1\"># 配列の中をすべて数字に変えるメソッド</span>\n<span class=\"nb\">p</span> <span class=\"n\">input</span> <span class=\"c1\"># =&gt; [2, 3, 6, 14, 6]</span>\n\n<span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">input</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span> <span class=\"c1\"># inputの中身を一個一個取り出すメソッド</span>\n    <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">item</span>\n<span class=\"k\">end</span>\n\n<span class=\"nb\">puts</span> <span class=\"n\">sum</span> <span class=\"c1\"># 31</span>\n</code></pre></div>\n</div>\n\n<ul>\n<li>mapメソッドの解説</li>\n<li>（mapは難しいので私はなんとなく使ってた。使いたい度にGoogleで調べてたから覚えなくてもいいかも）</li>\n<li>まずは破壊的メソッド(!!!!!)と非破壊の違い</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">map.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"3\"</span><span class=\"p\">]</span>\n<span class=\"nb\">p</span> <span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"nf\">map!</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">to_i</span><span class=\"p\">}</span> <span class=\"c1\"># [2, 3] !つけるとarrの配列を置き換えるよ</span>\n<span class=\"nb\">p</span> <span class=\"n\">arr</span> <span class=\"c1\"># [2, 3]</span>\n<span class=\"nb\">p</span> <span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">to_s</span><span class=\"p\">}</span> <span class=\"c1\"># to_sで文字列に変換　[\"2\", \"3\"]</span>\n<span class=\"nb\">p</span> <span class=\"n\">arr</span> <span class=\"c1\"># [2, 3] 上で!つけてないので、あれ文字列から数値に戻りました。</span>\n\n<span class=\"n\">arr2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"4\"</span><span class=\"p\">,</span> <span class=\"s2\">\"5\"</span><span class=\"p\">]</span>\n<span class=\"n\">arr2</span><span class=\"p\">.</span><span class=\"nf\">map!</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">to_i</span><span class=\"p\">}</span> <span class=\"c1\"># こうやって!つけるか</span>\n<span class=\"nb\">p</span> <span class=\"n\">arr2</span> <span class=\"c1\"># [4, 5]</span>\n<span class=\"n\">arr3</span> <span class=\"o\">=</span> <span class=\"n\">arr2</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">to_i</span><span class=\"p\">}</span> <span class=\"c1\"># 別の配列に入れてあげないと駄目</span>\n<span class=\"nb\">p</span> <span class=\"n\">arr3</span> <span class=\"c1\"># [4, 5]</span>\n</code></pre></div>\n</div>\n\n<ul>\n<li>|item|とはなんぞや</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">map.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"3\"</span><span class=\"p\">]</span>\n<span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"nf\">map!</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">to_i</span><span class=\"p\">}</span>\n<span class=\"cm\">=begin\n|item|の文字はiでもnumでもｓｔｒでもtmpでもなんでもいい\n配列arrにはいってる文字を全てitemにいれて処理してる感じ。\n=end</span>\n\n<span class=\"c1\"># イメージこんな感じ</span>\n<span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"3\"</span><span class=\"p\">]</span>\n<span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"c1\"># itemに最初の文字\"2\"を代入</span>\n<span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">to_i</span> <span class=\"c1\"># arrの0番目に数値2を代入</span>\n<span class=\"nb\">p</span> <span class=\"n\">arr</span> <span class=\"c1\"># [2, \"3\"]</span>\n<span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"c1\"># itemに次の文字\"3\"を代入</span>\n<span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">to_i</span> <span class=\"c1\"># arrの1番目に数値3を代入</span>\n<span class=\"nb\">p</span> <span class=\"n\">arr</span> <span class=\"c1\"># [2, 3]</span>\n<span class=\"c1\"># 無事すべて数字になりました〜〜！！</span>\n\n</code></pre></div>\n</div>\n\n<ul>\n<li>次はeach doメソッド</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">Main.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span> <span class=\"c1\"># arrの中身を一個itemに入れてる感じ</span>\n    <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">item</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># イメージ</span>\n<span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"c1\"># 2</span>\n<span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">item</span> <span class=\"c1\"># 0 + 2</span>\n<span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"c1\"># 3</span>\n<span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">item</span> <span class=\"c1\"># 2 + 3 = 5</span>\n<span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"c1\"># 6</span>\n<span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">item</span> <span class=\"c1\"># 5 + 6 == 11</span>\n<span class=\"nb\">puts</span> <span class=\"n\">sum</span> <span class=\"c1\"># =&gt; 11</span>\n<span class=\"c1\"># こんな感じです！</span>\n</code></pre></div>\n</div>\n\n<ul>\n<li>each doは配列の一つひとつにアクセスするのに便利！</li>\n</ul>\n\n<hr>\n\n<blockquote>\n<p>半角スペース区切りであたえられる5つの数字[n m l s t]を足しなさい。</p>\n</blockquote>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">入力.txt</span></div>\n<div class=\"highlight\"><pre><code>2 3 6 14 6\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">Main.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">input</span> <span class=\"o\">=</span> <span class=\"nb\">gets</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">)</span>\n<span class=\"n\">input</span><span class=\"p\">.</span><span class=\"nf\">map!</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">to_i</span><span class=\"p\">}</span>\n\n<span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">input</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span>\n    <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">item</span>\n<span class=\"k\">end</span>\n\n<span class=\"nb\">puts</span> <span class=\"n\">sum</span> <span class=\"c1\"># 31</span>\n</code></pre></div>\n</div>\n\n<ul>\n<li>です！</li>\n<li>これをメソッドにしときます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">入力.txt</span></div>\n<div class=\"highlight\"><pre><code>2 3 6 14 6\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">Main.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">my_gets</span>\n    <span class=\"n\">input</span> <span class=\"o\">=</span> <span class=\"nb\">gets</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">)</span>\n    <span class=\"n\">input</span><span class=\"p\">.</span><span class=\"nf\">map!</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">to_i</span><span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">input</span>\n<span class=\"k\">end</span>\n<span class=\"nb\">p</span> <span class=\"n\">my_gets</span> <span class=\"c1\"># [2, 3, 6, 14, 6] 数字にしてくれました！</span>\n</code></pre></div>\n</div>\n\n<ul>\n<li>こんな感じでよく使う操作とかはメソッドにして、一番上に書いて、その後呼び出してあげると便利です。</li>\n<li>returnは書かなくてもいいです。（最後に評価された値が返り値になります）</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">Returnの他の書き方(最初はreturn書くのがわかりやすいよ).rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">my_gets</span>\n    <span class=\"n\">input</span> <span class=\"o\">=</span> <span class=\"nb\">gets</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">)</span>\n    <span class=\"n\">input</span><span class=\"p\">.</span><span class=\"nf\">map!</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">to_i</span><span class=\"p\">}</span>\n    <span class=\"n\">input</span> <span class=\"c1\"># 明示的に書いてあげるとわかりやすい</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">my_gets2</span>\n    <span class=\"n\">input</span> <span class=\"o\">=</span> <span class=\"nb\">gets</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">)</span>\n    <span class=\"n\">input</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">to_i</span><span class=\"p\">}</span> <span class=\"c1\"># なんならこれでも同じ値になる</span>\n<span class=\"k\">end</span>\n\n</code></pre></div>\n</div>\n\n<ul>\n<li>ついでに配列を渡すと合計値が返ってくるメソッド</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">Main.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">sum_arr</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span>\n    <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span>\n        <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">item</span>\n    <span class=\"k\">end</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"nb\">p</span> <span class=\"n\">sum_arr</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span> <span class=\"c1\"># 9</span>\n\n</code></pre></div>\n</div>\n\n<hr>\n\n<blockquote>\n<p>半角スペース区切りであたえられる5つの数字[n m l s t]を足しなさい。<br>\n入力は3行あるよ！</p>\n</blockquote>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">入力.txt</span></div>\n<div class=\"highlight\"><pre><code>2 3 6 14 6\n4 1 14 4 4\n8 4 61 11 2\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">Main.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"mi\">3</span><span class=\"p\">.</span><span class=\"nf\">times</span> <span class=\"k\">do</span>\n    <span class=\"n\">input</span> <span class=\"o\">=</span> <span class=\"nb\">gets</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">)</span>\n    <span class=\"n\">input</span><span class=\"p\">.</span><span class=\"nf\">map!</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">to_i</span><span class=\"p\">}</span>\n    <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">input</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span>\n        <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">item</span>\n    <span class=\"k\">end</span>\n    <span class=\"nb\">puts</span> <span class=\"n\">sum</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">出力.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"mi\">31</span>\n<span class=\"mi\">27</span>\n<span class=\"mi\">86</span>\n</code></pre></div>\n</div>\n\n<ul>\n<li>さっきのやつを三回繰り返したらできあがる簡単なもの。</li>\n<li>でもこれをメソッドを使って整理しとくのがおすすめ</li>\n<li>中の処理がなにやってるのかわかりにくくなって</li>\n<li>2週間後思い出せなくなったり</li>\n<li>「コードの再利用がしやすくなるよ」</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">Main.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">sum_arr</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span>\n    <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span>\n        <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">item</span>\n    <span class=\"k\">end</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">my_gets</span>\n    <span class=\"n\">input</span> <span class=\"o\">=</span> <span class=\"nb\">gets</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">)</span>\n    <span class=\"n\">input</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">to_i</span><span class=\"p\">}</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># メインの処理はここから</span>\n<span class=\"mi\">3</span><span class=\"p\">.</span><span class=\"nf\">times</span> <span class=\"k\">do</span> <span class=\"c1\"># </span>\n    <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">my_gets</span> <span class=\"c1\"># 数値型の配列を標準入力から持ってきて</span>\n    <span class=\"nb\">puts</span> <span class=\"n\">sum_arr</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span> <span class=\"c1\"># それを全て足し合わせるメソッドに入れて出力するだけ</span>\n<span class=\"k\">end</span>\n<span class=\"c1\"># ここまで</span>\n</code></pre></div>\n</div>\n\n<ul>\n<li>こんな感じでコードの見通しがよくなります！</li>\n</ul>\n\n<hr>\n\n<blockquote>\n<p>とりあえず、、いっぱい行渡すから全部たせよ…！</p>\n</blockquote>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">入力.txt</span></div>\n<div class=\"highlight\"><pre><code>4\n2\n3\n5\n6\n13\n52\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">Main.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">while</span><span class=\"p\">(</span><span class=\"nb\">gets</span><span class=\"p\">)</span> <span class=\"c1\"># 標準入力がある間実行しなさい</span>\n    <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"vg\">$_</span><span class=\"p\">.</span><span class=\"nf\">to_i</span> <span class=\"c1\"># getsで入力された値は実は$_に入ってます。</span>\n<span class=\"k\">end</span>\n<span class=\"nb\">puts</span> <span class=\"n\">sum</span> <span class=\"c1\"># 85</span>\n</code></pre></div>\n</div>\n\n<ul>\n<li>while(gets)ってすばらしい！</li>\n</ul>\n\n<hr>\n\n<blockquote>\n<p>その他</p>\n</blockquote>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">入力.txt</span></div>\n<div class=\"highlight\"><pre><code>あいうえお\nあいうえお\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">Main.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nb\">p</span> <span class=\"nb\">gets</span> <span class=\"c1\"># \"あいうえお\\n\"</span>\n<span class=\"nb\">p</span> <span class=\"nb\">gets</span><span class=\"p\">.</span><span class=\"nf\">chomp</span> <span class=\"c1\"># \"あいうえお\"</span>\n</code></pre></div>\n</div>\n\n<ul>\n<li>chompは一番うしろの「改行(\\n)」を取り除いてくれたりします</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">Main.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">while</span><span class=\"p\">(</span><span class=\"nb\">gets</span><span class=\"p\">.</span><span class=\"nf\">chomp</span><span class=\"p\">)</span>\n    <span class=\"nb\">p</span> <span class=\"vg\">$_</span>\n<span class=\"k\">end</span>\n<span class=\"c1\"># こんなことやろうとすると、nil(文字が入ってない時)にはつかえねーよ！ってエラーでるので注意！undefined method `chomp' for nil:NilClass (NoMethodError)</span>\n</code></pre></div>\n</div>\n\n<hr>\n\n<p>もうこのコードもわかるようになりましたか？</p>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">入力.txt</span></div>\n<div class=\"highlight\"><pre><code>C   clang 3.8 / LLVM 3.8 (C99)  2   512\nC++ clang 3.8 / LLVM 3.8 / libc++ (C++14)   2   512\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">ruby.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[]</span> <span class=\"c1\"># 配列の初期化</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nb\">gets</span><span class=\"p\">)</span> <span class=\"c1\"># 標準入力があるかぎり実行</span>\n    <span class=\"n\">arr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"vg\">$_</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> \n    <span class=\"c1\"># 配列arrの一番最後に&lt;&lt;を使って、に目をarrに入れている</span>\n<span class=\"k\">end</span>\n<span class=\"nb\">p</span> <span class=\"n\">arr</span> <span class=\"c1\"># [\"C\", \"C++\"]</span>\n</code></pre></div>\n</div>\n\n<ul>\n<li>$_.split(\" \")[0]には [C]とか[C++]とか一番左の文字列が入ります</li>\n<li>その文字列を&lt;&lt;メソッドを使って配列arrに挿入していって</li>\n<li>最後に出力してます</li>\n</ul>\n\n<p>こんなところでしょうか。<br>\n<a href=\"https://paiza.jp/guide/samplecode.html\" rel=\"nofollow noopener\" target=\"_blank\">各言語による標準入力一覧 by paiza</a>で自分の使いたい言語調べてみると面白いですよ！rubyとかpython書くコードすくねえ。。みたいな感想いだきました。</p>\n\n<h1>\n<span id=\"いろんなサイト\" class=\"fragment\"></span><a href=\"#%E3%81%84%E3%82%8D%E3%82%93%E3%81%AA%E3%82%B5%E3%82%A4%E3%83%88\"><i class=\"fa fa-link\"></i></a>いろんなサイト</h1>\n\n<h2>\n<span id=\"プログラミング言語の選び方\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E%E3%81%AE%E9%81%B8%E3%81%B3%E6%96%B9\"><i class=\"fa fa-link\"></i></a>プログラミング言語の選び方</h2>\n\n<blockquote>\n<p>人気言語のまとめは、こちらの記事 <a href=\"https://blog.codecamp.jp/programming_language_2015\" rel=\"nofollow noopener\" target=\"_blank\">これからの時代はプログラミングって聞くけどどの言語がいいの？</a>が参考になると思います。いろんな集計媒体ごとに人気の言語は違うのがよくわかるかと思います。</p>\n\n<p>また、How To Become A Hackerの<a href=\"http://cruel.org/freeware/hacker.html\" rel=\"nofollow noopener\" target=\"_blank\">日本語訳</a>も参考になると思います。</p>\n</blockquote>\n\n<p>初心者の方は、取得の敷居が低い言語(PythonとかRuby?)から初めてみたらいいんじゃないかなとか思ったらい。</p>\n\n<h2>\n<span id=\"アルゴリズムサイトのまとめ\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>アルゴリズムサイトのまとめ</h2>\n\n<h3>\n<span id=\"プログラミングコンテストの解説\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%B3%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88%E3%81%AE%E8%A7%A3%E8%AA%AC\"><i class=\"fa fa-link\"></i></a>プログラミングコンテストの解説</h3>\n\n<blockquote>\n<p>どのプログラミングコンテストに挑戦しよう??と思ったら<a href=\"http://cocodrips.hateblo.jp/entry/2015/10/11/114212\" rel=\"nofollow noopener\" target=\"_blank\">強くなるためのプログラミング -様々なプログラミングコンテストとそのはじめ方-</a>こちらが参考になります。プログラミングコンテストには、サーバーサイド系、セキュリティ系、データマイニング、AI、アルゴリズムとたくさんあって、各コンテストをマトリックスにまとめられてすごく参考になりました。</p>\n</blockquote>\n\n<h3>\n<span id=\"オンラインジャッジ系のサイト一覧\" class=\"fragment\"></span><a href=\"#%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E3%82%B8%E3%83%A3%E3%83%83%E3%82%B8%E7%B3%BB%E3%81%AE%E3%82%B5%E3%82%A4%E3%83%88%E4%B8%80%E8%A6%A7\"><i class=\"fa fa-link\"></i></a>オンラインジャッジ系のサイト一覧</h3>\n\n<blockquote>\n<p>こちらが<a href=\"http://qiita.com/shibacho/items/20f6eee42083c620b556\" id=\"reference-0488521054dd780878ca\">言語の習得やアルゴリズムの学習に最適 オンラインジャッジサイト一覧</a>でまとめられてます。とりあえずストックとかブックマークしておくと、便利です。</p>\n</blockquote>\n\n<h3>\n<span id=\"-ワタシ的なアルゴリズムサイトのおすすめ\" class=\"fragment\"></span><a href=\"#-%E3%83%AF%E3%82%BF%E3%82%B7%E7%9A%84%E3%81%AA%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AE%E3%81%8A%E3%81%99%E3%81%99%E3%82%81\"><i class=\"fa fa-link\"></i></a><i></i> ワタシ的なアルゴリズムサイトのおすすめ</h3>\n\n<p>個人的には断然Paizaをおすすめします。理由は問題のレベルにバラツキがすくないこと、それと数学苦手でも解けるということ、です。問題を解く快感にはまってBランクの問題まで全部解いてます。Aとかは半分くらい。</p>\n\n<h2>\n<span id=\"アルゴリズムの可視化\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%81%AE%E5%8F%AF%E8%A6%96%E5%8C%96\"><i class=\"fa fa-link\"></i></a>アルゴリズムの可視化</h2>\n\n<blockquote>\n<p>海外のサイトですが、アルゴリズムの可視化されてるのでかなりおもしろいずっと眺めてられます。<br>\n<a href=\"https://visualgo.net/sorting\" rel=\"nofollow noopener\" target=\"_blank\">visualgo</a><br>\n適当に触るとソートとかのアルゴリズムが動き出しますが、英語でわからないという方はこちら<a href=\"http://news.livedoor.com/article/detail/9160957/\" rel=\"nofollow noopener\" target=\"_blank\">アルゴリズムとプログラミングをビジュアルで一挙に理解できる「VisuAlgo」</a>を参考にされるといいかと思います。</p>\n</blockquote>\n\n<h2>\n<span id=\"font-awesome\" class=\"fragment\"></span><a href=\"#font-awesome\"><i class=\"fa fa-link\"></i></a>font awesome</h2>\n\n<p><i></i><br>\nこんな感じの絵文字みたいなのをQiitaで使えるのでぜひ！</p>\n\n<h1>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h1>\n\n<p>切に願うことは[標準入力ってなに…]みたいな本当ささいなことでことでつまづく人を減らしていきたい。そんな思いがあります。</p>\n\n<p>コーディングが上達するきっかけは人それぞれだとは思いますが、私はアルゴリズムの問題解きながら、言語の文法を覚えていきました。数独とか、問題解くことが好きな方ってはまると思うんですよ、アルゴリズム。電車で、数独解いてる方みると、ほらアルゴリズムの世界に足を踏み入れてよ、みたいな感情がわいたりします(ちょっと誇張)</p>\n\n<p>この世界に一歩踏み出した方、いっぱいエラーだしてください。google検索してみてください。少しでもこのページが参考になると嬉しいです。</p>\n\n<p>.</p>\n","body":"# はじめに\n\n自分が1年くらい独学で勉強して、2017年1月にエンジニアに転職したので、当時苦労した点などを思い出しつつ、このタイミングでまとめられたらいいと思っています。\n何か間違いとか異論ありましたらコメント欄でお願いします。\n\n# <i class=\"fa fa-cubes\" style=\"font-size:1em;\"></i> 記事について\n## やりたいこと\n### **一緒にpaiza.IOを使いRubyで頭の体操をしましょう!!**\npaiza.IO: 言語ごとに環境構築しなくていいオンラインサービスなので、今回はこれを使います。\nRuby: 今回はプログラミング言語のRubyを使います。\n頭の体操: 数独とかクイズとか好きな人は、アルゴリズムの問題サイトを解くのすごく達成感あると思います！！\n\n## 記事の対象者\n- プログラミングを習い初めたけど、何から始めよう。\n- ドットインストールくらいはみたよ\n- アルゴリズムの問題解きたい !!\n- 標準入力ってなに ??\n- どんな言語選べば良いのかな。環境構築大変そう。\n- Paiza, CodeIQ, yukicoderなどのサイトを使ってみたい。\n\n## 記事での勉強法おすすめ\nアルゴリズムの問題を解きまくろう\n\n## 記事を読み終えると\n[ 標準入力 ]が使えるようになる！\n\nアルゴリズムの問題サイトで、簡単な問題を解くことができるようになります！！\n最後までお付き合いください。\n\n\n\n# paiza.IO\n### paiza.IOは[こちら](https://paiza.io/projects/new)。\nコードを書いたらそのまま実行できるオンラインサービスで、かなり便利です。\n[help](https://paiza.io/help)によると対応言語はこちら。\n[ C, C++, C#, Java, Python2, Python3, Ruby, Perl, PHP, JavaScript, Objective-C, Scala, Swift, Go, Haskell, CoffeeScript, Bash, Erlang, R, COBOL, VB, F#, Clojure, D, Elixir, MySQL ]\n使い方はこちら[paiza.IO の使い方](http://qiita.com/saltheads/items/ecb2292c456738d3e118)にまとまってましたので参考にされるといいかと思います。私が扱うのは標準入力の機能付近です。\n\n## 簡単な文字の入力と出力はpaiza.IOが便利\n\n上記の[help](https://paiza.io/help)から対応言語をコピーしてきたらこちら\n\n```help.txt\nC\tclang 3.8 / LLVM 3.8 (C99)\t2\t512\nC++\tclang 3.8 / LLVM 3.8 / libc++ (C++14)\t2\t512\nC#\tmono-4.2.1 (C#6, CLI4.5)\t2\t512\nJava\tjava 1.8.0\t2\t512\nPython2\tpython 2.7.12\t2\t512\nPython3\tpython 3.5.2\t2\t512\n(以下省略)\n```\nこういう簡単なテキストの処理がpaiza.IOでは便利だと思ってます。\n\n<img width=\"543\" alt=\"スクリーンショット 2017-02-24 12.14.45.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/6395acb8-2d20-a908-aa56-177b67ee7d12.png\">\n[help](https://paiza.io/help)の対応言語一覧からのコピーを上の画像の「入力」という部分に貼り付け、rubyコードを書き実行すると「出力」に結果がでます。\n\n```ruby.rb\narr = [] # 配列の初期化\nwhile (gets) # 標準入力があるかぎり実行\n    arr << $_.split(\" \")[0] \n    # $_に標準入力が入る\n    # split(\" \")で半角スペースで区切り、配列にする\n    # 配列の一番目をarrに入れている\nend\np arr\n# p arr の出力結果がこちら\n[\"C\", \"C++\", \"C#\", \"Java\", \"Python2\", \"Python3\", \"Ruby\", \"Perl\", \"PHP\", \n\"JavaScript\", \"Objective-C\", \"Scala\", \"Swift\", \"Go\", \"Haskell\", \"CoffeeScript\", \n\"Bash\", \"Erlang\", \"R\", \"COBOL\", \"VB\", \"F#\", \"Clojure\", \"D\", \"Elixir\", \"MySQL\"]\n```\nこんな感じで、簡単なテキスト処理をしたいというときにはかなり使ってます。\nコードは非公開設定もできます。\n\nこのpaiza.IOを使ってアルゴリズムの問題とか、初心者の時自分がつまずいた点を以下に書いていきたいと思います。\n\n\n# 標準入力を使ってみよう\n\n## 今後の書き方のまとめ\n<img width=\"569\" alt=\"スクリーンショット 2017-02-24 13.35.10.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/8226ff86-8814-cbbe-166e-cc801be95755.png\">\n \n言語は左上の[Ruby]と選んでください。\n\n```Main.rb\n# Main.rbのここにコード書いていきます。\n# 隣にファイル追加できたりしますが一旦は使わない方向で！\n```\n* 実行 => ファイル実行。アカウントログインしてる人だと成功するとデータ保存される！\n* 出力 => pとかputsとかprintとかの出力結果\n\n```入力.txt\n# こんな形で入力は[ 入力.txt ]と書く場合があると思いますので、入力欄に入れてください！\n```\n* 入力 => ここが噂の標準入力\n* 実行時エラー => エラーが出た場合は画面がオレンジっぽいの出るので、ここを見ましょう！\n\n\n# さて本題、標準入力を使ったデータ操作を見ていきましょう！\n> Q. こんな感じで問題だしていくのでその操作のサンプルを書いていきます！\n\nrubyの[p]というのは出力ですが、文字列ならの5なら[ \"5\" ]と数値の5なら[ 5 ]と出力してくれるので、判断に使ってください！\n\n## 数字の扱い\n\n> Q. 数字が与えられるのでそれを5倍して出力しなさい\n\n```入力.txt\n4\n```\n\n```Main.rb\ni = gets\np i # => \"4\" 文字列の4が出力されます。\np i * 5 # => \"44444\" 文字列が5回繰り返して出力されます\np i.to_i # => 4 数値の4が出力されました。\np i.to_i * 5 # => 20 数値の20が出力\n```\n* p 文字列か数値かをわかりやすく出力してくれる\n* gets 標準入力から一列取得してくる\n* iという変数にgetsを代入\n* .to_i　というメソッドで数値への変換を行っている\n* [ * ]これはかけるという意味で、文字列数値どちらでも使えます。\n\nどんどんいきますよ〜〜〜〜\n\n***\n\n> Q. 数字が3行で与えられるのですべてを足して出力せよ\n\n```入力.txt\n7\n13\n5\n```\n\n```Main.rb\nsum = 0\nsum += gets.to_i # sumには7が足されます\nsum += gets.to_i # sumには13が足されます\nsum += gets.to_i # sumには5が足されます\nputs sum # => 25が出力されました！\n```\n* puts 文字列でも数値でも\"\"なしで出力されます\n* 3回同じ操作をするのはコードが冗長なので、同じ結果が得られる別の書き方にかえます\n\n```Main.rb\nsum = 0\n3.times do\n    sum += gets.to_i\nend\nputs sum # => 25が出力されました！\n```\n* 3.times do end =>　3回実行せよって命令です。\n* さきほどと同じように7,13,5がどんどん足されていきます。\n\n***\n\n> n個の数値をかけ合わせなさい\n> 一行目にnを、残りのn行に数値を入れるとする\n\n```入力.txt\n4 # ここに書いてある数値の分だけ、掛け算するよ！ \n1\n2\n3\n4\n```\n\n1 * 2 * 3 * 4の出力がみたいってこと！\n\n```Main.rb\nnum = gets.to_i # 最初の4が入る\nsum = 1 # 掛け算するので最初は0にしちゃだめ\nnum.times do # numの数(4)回実行されるよ\n    sum *= gets.to_i # 1~4がどんどん掛け算されていく\nend\nputs sum # => 24が出力されました！\n```\n* num.times do のnumは変数でもOKです！今回は4回実行されました。\n\n次いくよ〜〜\n\n*** \n\n## 配列の操作\n\n> [n m]と入力があるので、n*mを出力しなさい！\n\n```入力.txt\n4 6\n```\n\n```Main.rb\n\ninput = gets\np input # => [\"4 6\"]\np input.split(\" \") # => [\"4\", \"6\"]\n=begin\n[\"4\", \"6\"]は配列になっていて\n0番目の要素に\"4\"が\n1番目の要素に\"6\"が入っています。\n=end\np input.split(\" \")[0] # => \"4\"\np input.split(\" \")[1] # => \"6\"\np input.split(\" \")[0].to_i # => 4\np input.split(\" \")[1].to_i # => 6\nputs input.split(\" \")[0].to_i * input.split(\" \")[1].to_i # => 24\n\n```\n* rubyのコメントは#(一行コメント)\n* =beginから=endまで(複数行コメント)\n* splitは分割して配列にしてくれるメソッド\n* 今回はsplit(\"半角スペース\")で[4 6]を分割\n* もうちょっときれいに書くと\n\n```Main.rb\ninput = gets.split(\" \") # 入力をすぐに配列に分割\nnum1 = input[0].to_i # 配列の0番目を数値に\nnum2 = input[1].to_i # 配列の1番目を数値に\nputs num1 * num2 # 数値の掛け算\n```\n\nみたいな感じでしょうか。次行きます〜〜〜\n\n***\n\n> 半角スペース区切りであたえられる5つの数字[n m l s t]を足しなさい。\n\n```入力.txt\n2 3 6 14 6\n```\n\n```Main.rb\ninput = gets.split(\" \") # 半角スペース区切りで配列にする\np input # => [\"2\", \"3\", \"6\", \"14\", \"6\"] \ninput.map!{|item| item.to_i} # 配列の中をすべて数字に変えるメソッド\np input # => [2, 3, 6, 14, 6]\n\nsum = 0\ninput.each do |item| # inputの中身を一個一個取り出すメソッド\n    sum += item\nend\n\nputs sum # 31\n```\n* mapメソッドの解説\n* （mapは難しいので私はなんとなく使ってた。使いたい度にGoogleで調べてたから覚えなくてもいいかも）\n* まずは破壊的メソッド(!!!!!)と非破壊の違い\n\n```map.rb\narr = [\"2\", \"3\"]\np arr.map!{|item| item.to_i} # [2, 3] !つけるとarrの配列を置き換えるよ\np arr # [2, 3]\np arr.map{|item| item.to_s} # to_sで文字列に変換　[\"2\", \"3\"]\np arr # [2, 3] 上で!つけてないので、あれ文字列から数値に戻りました。\n\narr2 = [\"4\", \"5\"]\narr2.map!{|item| item.to_i} # こうやって!つけるか\np arr2 # [4, 5]\narr3 = arr2.map{|item| item.to_i} # 別の配列に入れてあげないと駄目\np arr3 # [4, 5]\n```\n* |item|とはなんぞや\n\n```map.rb\narr = [\"2\", \"3\"]\narr.map!{|item| item.to_i}\n=begin\n|item|の文字はiでもnumでもｓｔｒでもtmpでもなんでもいい\n配列arrにはいってる文字を全てitemにいれて処理してる感じ。\n=end\n\n# イメージこんな感じ\narr = [\"2\", \"3\"]\nitem = arr[0] # itemに最初の文字\"2\"を代入\narr[0] = item.to_i # arrの0番目に数値2を代入\np arr # [2, \"3\"]\nitem = arr[1] # itemに次の文字\"3\"を代入\narr[1] = item.to_i # arrの1番目に数値3を代入\np arr # [2, 3]\n# 無事すべて数字になりました〜〜！！\n\n```\n\n* 次はeach doメソッド\n\n```Main.rb\narr = [2, 3, 6]\nsum = 0\narr.each do |item| # arrの中身を一個itemに入れてる感じ\n    sum += item\nend\n\n# イメージ\nsum = 0\nitem = arr[0] # 2\nsum += item # 0 + 2\nitem = arr[1] # 3\nsum += item # 2 + 3 = 5\nitem = arr[2] # 6\nsum += item # 5 + 6 == 11\nputs sum # => 11\n# こんな感じです！\n```\n* each doは配列の一つひとつにアクセスするのに便利！\n\n***\n\n> 半角スペース区切りであたえられる5つの数字[n m l s t]を足しなさい。\n\n```入力.txt\n2 3 6 14 6\n```\n\n```Main.rb\ninput = gets.split(\" \")\ninput.map!{|item| item.to_i}\n\nsum = 0\ninput.each do |item|\n    sum += item\nend\n\nputs sum # 31\n```\n* です！\n* これをメソッドにしときます\n\n```入力.txt\n2 3 6 14 6\n```\n\n```Main.rb\ndef my_gets\n    input = gets.split(\" \")\n    input.map!{|item| item.to_i}\n    return input\nend\np my_gets # [2, 3, 6, 14, 6] 数字にしてくれました！\n```\n* こんな感じでよく使う操作とかはメソッドにして、一番上に書いて、その後呼び出してあげると便利です。\n* returnは書かなくてもいいです。（最後に評価された値が返り値になります）\n\n```Returnの他の書き方(最初はreturn書くのがわかりやすいよ).rb\ndef my_gets\n    input = gets.split(\" \")\n    input.map!{|item| item.to_i}\n    input # 明示的に書いてあげるとわかりやすい\nend\n\ndef my_gets2\n    input = gets.split(\" \")\n    input.map{|item| item.to_i} # なんならこれでも同じ値になる\nend\n\n```\n* ついでに配列を渡すと合計値が返ってくるメソッド\n\n```Main.rb\ndef sum_arr(arr)\n    sum = 0\n    arr.each do |item|\n        sum += item\n    end\n    return sum\nend\n\narr = [1, 3, 5]\np sum_arr(arr) # 9\n\n```\n\n***\n\n> 半角スペース区切りであたえられる5つの数字[n m l s t]を足しなさい。\n> 入力は3行あるよ！\n\n```入力.txt\n2 3 6 14 6\n4 1 14 4 4\n8 4 61 11 2\n```\n\n```Main.rb\n3.times do\n    input = gets.split(\" \")\n    input.map!{|item| item.to_i}\n    sum = 0\n    input.each do |item|\n        sum += item\n    end\n    puts sum\nend\n```\n\n```出力.rb\n31\n27\n86\n```\n* さっきのやつを三回繰り返したらできあがる簡単なもの。\n* でもこれをメソッドを使って整理しとくのがおすすめ\n* 中の処理がなにやってるのかわかりにくくなって\n* 2週間後思い出せなくなったり\n* 「コードの再利用がしやすくなるよ」\n\n```Main.rb\ndef sum_arr(arr)\n    sum = 0\n    arr.each do |item|\n        sum += item\n    end\n    return sum\nend\n\ndef my_gets\n    input = gets.split(\" \")\n    input.map{|item| item.to_i}\nend\n\n# メインの処理はここから\n3.times do # \n    arr = my_gets # 数値型の配列を標準入力から持ってきて\n    puts sum_arr(arr) # それを全て足し合わせるメソッドに入れて出力するだけ\nend\n# ここまで\n```\n* こんな感じでコードの見通しがよくなります！\n\n***\n\n> とりあえず、、いっぱい行渡すから全部たせよ…！\n\n```入力.txt\n4\n2\n3\n5\n6\n13\n52\n```\n\n```Main.rb\nsum = 0\nwhile(gets) # 標準入力がある間実行しなさい\n    sum += $_.to_i # getsで入力された値は実は$_に入ってます。\nend\nputs sum # 85\n```\n* while(gets)ってすばらしい！\n\n*** \n\n> その他\n\n```入力.txt\nあいうえお\nあいうえお\n```\n\n```Main.rb\np gets # \"あいうえお\\n\"\np gets.chomp # \"あいうえお\"\n```\n* chompは一番うしろの「改行(\\n)」を取り除いてくれたりします\n\n```Main.rb\nwhile(gets.chomp)\n    p $_\nend\n# こんなことやろうとすると、nil(文字が入ってない時)にはつかえねーよ！ってエラーでるので注意！undefined method `chomp' for nil:NilClass (NoMethodError)\n```\n\n***\n\nもうこのコードもわかるようになりましたか？\n\n```入力.txt\nC\tclang 3.8 / LLVM 3.8 (C99)\t2\t512\nC++\tclang 3.8 / LLVM 3.8 / libc++ (C++14)\t2\t512\n```\n\n```ruby.rb\narr = [] # 配列の初期化\nwhile (gets) # 標準入力があるかぎり実行\n    arr << $_.split(\" \")[0] \n    # 配列arrの一番最後に<<を使って、に目をarrに入れている\nend\np arr # [\"C\", \"C++\"]\n```\n\n* $_.split(\" \")[0]には [C]とか[C++]とか一番左の文字列が入ります\n* その文字列を<<メソッドを使って配列arrに挿入していって\n* 最後に出力してます\n\n\n\nこんなところでしょうか。\n[各言語による標準入力一覧 by paiza](https://paiza.jp/guide/samplecode.html)で自分の使いたい言語調べてみると面白いですよ！rubyとかpython書くコードすくねえ。。みたいな感想いだきました。\n\n\n\n# いろんなサイト\n\n## プログラミング言語の選び方\n> 人気言語のまとめは、こちらの記事 [これからの時代はプログラミングって聞くけどどの言語がいいの？](https://blog.codecamp.jp/programming_language_2015)が参考になると思います。いろんな集計媒体ごとに人気の言語は違うのがよくわかるかと思います。\n\n> また、How To Become A Hackerの[日本語訳](http://cruel.org/freeware/hacker.html)も参考になると思います。\n\n初心者の方は、取得の敷居が低い言語(PythonとかRuby?)から初めてみたらいいんじゃないかなとか思ったらい。\n\n## アルゴリズムサイトのまとめ\n\n### プログラミングコンテストの解説\n> どのプログラミングコンテストに挑戦しよう??と思ったら[強くなるためのプログラミング -様々なプログラミングコンテストとそのはじめ方-](http://cocodrips.hateblo.jp/entry/2015/10/11/114212)こちらが参考になります。プログラミングコンテストには、サーバーサイド系、セキュリティ系、データマイニング、AI、アルゴリズムとたくさんあって、各コンテストをマトリックスにまとめられてすごく参考になりました。\n\n### オンラインジャッジ系のサイト一覧\n> こちらが[言語の習得やアルゴリズムの学習に最適 オンラインジャッジサイト一覧](http://qiita.com/shibacho/items/20f6eee42083c620b556)でまとめられてます。とりあえずストックとかブックマークしておくと、便利です。\n\n### <i class=\"fa fa-comment-o\" aria-hidden=\"true\"></i> ワタシ的なアルゴリズムサイトのおすすめ\n個人的には断然Paizaをおすすめします。理由は問題のレベルにバラツキがすくないこと、それと数学苦手でも解けるということ、です。問題を解く快感にはまってBランクの問題まで全部解いてます。Aとかは半分くらい。\n\n## アルゴリズムの可視化\n> 海外のサイトですが、アルゴリズムの可視化されてるのでかなりおもしろいずっと眺めてられます。\n[visualgo](https://visualgo.net/sorting)\n適当に触るとソートとかのアルゴリズムが動き出しますが、英語でわからないという方はこちら[アルゴリズムとプログラミングをビジュアルで一挙に理解できる「VisuAlgo」](http://news.livedoor.com/article/detail/9160957/)を参考にされるといいかと思います。\n\n## font awesome\n<i class=\"fa fa-cubes\" style=\"font-size:1em;\"></i>\nこんな感じの絵文字みたいなのをQiitaで使えるのでぜひ！\n\n# 最後に\n切に願うことは[標準入力ってなに…]みたいな本当ささいなことでことでつまづく人を減らしていきたい。そんな思いがあります。\n\nコーディングが上達するきっかけは人それぞれだとは思いますが、私はアルゴリズムの問題解きながら、言語の文法を覚えていきました。数独とか、問題解くことが好きな方ってはまると思うんですよ、アルゴリズム。電車で、数独解いてる方みると、ほらアルゴリズムの世界に足を踏み入れてよ、みたいな感情がわいたりします(ちょっと誇張)\n\nこの世界に一歩踏み出した方、いっぱいエラーだしてください。google検索してみてください。少しでもこのページが参考になると嬉しいです。\n\n\n\n\n.\n","coediting":false,"comments_count":0,"created_at":"2017-02-25T16:39:12+09:00","group":null,"id":"7b7ee34941d62226c581","likes_count":46,"private":false,"reactions_count":0,"tags":[{"name":"Ruby","versions":[]},{"name":"アルゴリズム","versions":[]}],"title":"[ paiza.IOを使った ] 標準入力入門とアルゴリズム入門(Ruby)","updated_at":"2018-02-27T11:51:29+09:00","url":"https://qiita.com/ykhirao/items/7b7ee34941d62226c581","user":{"description":"Web Developer For 6 years.\r\nPHP/Laravel && (React OR Vue.js)\r\nTypeScript/node.js\r\n\r\n業務委託の依頼とかはWantedlyとかからでお願いします！","facebook_id":"","followees_count":38,"followers_count":95,"github_login_name":"ykhirao","id":"ykhirao","items_count":59,"linkedin_id":"","location":"Tokyo, Japan","name":"yk","organization":"","permanent_id":112929,"profile_image_url":"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/profile-images/1639030792","team_only":false,"twitter_screen_name":"yk_hirao","website_url":"https://www.wantedly.com/id/ykhirao"},"page_views_count":null,"team_membership":null}},"path":"posts/7b7ee34941d62226c581"}
