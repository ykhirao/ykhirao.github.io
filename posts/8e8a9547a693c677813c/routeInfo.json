{"template":"__react_static_root__/src/components/QiitaPost","sharedHashesByProp":{},"data":{"post":{"rendered_body":"\n<h1>\n<span id=\"vue-test-utilsのshallowmountとmountの違いについて\" class=\"fragment\"></span><a href=\"#vue-test-utils%E3%81%AEshallowmount%E3%81%A8mount%E3%81%AE%E9%81%95%E3%81%84%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>Vue-test-utilsのshallowMountとmountの違いについて</h1>\n\n<p>この記事では Vue-test-utils の <code>shallowMount</code> と <code>mount</code> の違いについてをメインに記事にしていきます。また <code>shallowMount</code> + <code>stubs</code> についても書いていきたいと思います。 <code>Component.methods</code> とコンポーネントから直接 <code>methods</code> を呼び出す方法もあるのでよかったら見ていってください。</p>\n\n<ul>\n<li><code>mount</code></li>\n<li><code>shallowMount</code></li>\n<li><code>shallowMount + stubs</code></li>\n<li><code>TodoContainer.methods</code></li>\n</ul>\n\n<p>このあたりでを書いていきたいと思います。</p>\n\n<p>個人的には「Vue-test-utils」には、Vue.jsのコンポーネントとかをいい感じにwrapしてくれて、jestとかのテストランナーに乗せれるようにしてくれるいい感じのヤツという認識があります。（訂正とか正確な表現があればコメント欄なりPRお願いします。）</p>\n\n<p>Vue-test-utilsがどんなものか、どういう感じで誕生したかは、以下の記事に詳しいかと思います。 <a href=\"https://qiita.com/re-fort/items/63bef6778bf3d3939815\" id=\"reference-9b98871f22795d5e56b6\">vue-test-utilsを使用してテストを書いてみた(Vue.js)</a></p>\n\n<p>ドキュメントは <a href=\"https://vue-test-utils.vuejs.org/ja/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://vue-test-utils.vuejs.org/ja/</a> こちらになります。今回の内容は、ドキュメントに書いてあることがほとんどなので、私の記事からテストに入った方もぜひドキュメントを読んでみてください。このドキュメントは長くないので流し読みなら1時間もあれば読めると思います。</p>\n\n<h2>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n\n<p>こんにちは。僕です。</p>\n\n<p>前回は <a href=\"https://qiita.com/ykhirao/items/becd9be857dbe6804314\" id=\"reference-01d39c889864b022bf46\">【Vue.js】いつから「フロントエンド開発でTDDができない」と錯覚していた？</a> ※1 という記事を書かせていただきました。。フロントエンド界隈ってまったくテストが盛り上がっていなくて、ましてや「弊社TDDやってます」なんという声とかはほとんどあがっていない状況です。（私はそう感じているという主観的な意見ですが。）</p>\n\n<p>※1 タイトルの元ネタ BLEACHの藍染惣右介のセリフより</p>\n\n<p>「フロントエンドのテストって難しくないよ！！」とか「フロントエンドのロジック部分はTDDできるよ！！」って伝えたくて記事を書かせていただきました。基本的にVueのテストについての記事はQiitaに書いていくので、QiitaかTwitterをフォローしてくれると情報が早いかと思います。</p>\n\n<h2>\n<span id=\"本文\" class=\"fragment\"></span><a href=\"#%E6%9C%AC%E6%96%87\"><i class=\"fa fa-link\"></i></a>本文</h2>\n\n<h3>\n<span id=\"前回のコンポーネントの復習\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E5%9B%9E%E3%81%AE%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E5%BE%A9%E7%BF%92\"><i class=\"fa fa-link\"></i></a>前回のコンポーネントの復習</h3>\n\n<p>前回の <a href=\"https://qiita.com/ykhirao/items/becd9be857dbe6804314\">記事</a> を読んでいないかたはぜひ読んできてください。同じコンポーネントを使うことにします。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/0ee3eb29716b7ab791d1027846efc697224fcd1d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f61633235363134362d373838302d633835662d383264392d3464376538303731316130642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"643\" alt=\"スクリーンショット 2018-06-24 0.21.35のコピー3.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fac256146-7880-c85f-82d9-4d7e80711a0d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=84cd2a1a16ae95fc5e449e45853bbff3\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/ac256146-7880-c85f-82d9-4d7e80711a0d.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fac256146-7880-c85f-82d9-4d7e80711a0d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=fe0e9354e8c365223739ac0218691e4c 1x\" loading=\"lazy\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ git clone https://github.com/ykhirao/vue-todos.git\n</code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">src/components/TodoContainer.vue</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;NewTodo</span>\n    <span class=\"err\">@</span><span class=\"na\">createTodo=</span><span class=\"s\">\"addTodo\"</span>\n  <span class=\"nt\">&gt;&lt;/NewTodo&gt;</span>\n  <span class=\"nt\">&lt;TodoItem</span>\n    <span class=\"na\">v-for=</span><span class=\"s\">\"todo in todos\"</span>\n    <span class=\"na\">:id=</span><span class=\"s\">\"todo.id\"</span>\n    <span class=\"na\">:key=</span><span class=\"s\">\"todo.id\"</span>\n    <span class=\"na\">:text=</span><span class=\"s\">\"todo.text\"</span>\n    <span class=\"na\">:checked=</span><span class=\"s\">\"todo.checked\"</span>\n    <span class=\"err\">@</span><span class=\"na\">toggleChecked=</span><span class=\"s\">\"toggleChecked\"</span>\n  <span class=\"nt\">&gt;&lt;/TodoItem&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n<span class=\"k\">import</span> <span class=\"nx\">NewTodo</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@/components/NewTodo.vue</span><span class=\"dl\">\"</span>\n<span class=\"k\">import</span> <span class=\"nx\">TodoItem</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@/components/TodoItem.vue</span><span class=\"dl\">'</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">todo-container</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">components</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">NewTodo</span><span class=\"p\">,</span>\n    <span class=\"nx\">TodoItem</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">data</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"na\">todos</span><span class=\"p\">:</span> <span class=\"p\">[]</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">methods</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">addTodo</span><span class=\"p\">(</span><span class=\"nx\">text</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">todos</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">({</span><span class=\"nx\">text</span><span class=\"p\">,</span> <span class=\"na\">checked</span><span class=\"p\">:</span><span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">todos</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">toggleChecked</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">todo</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">todos</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"nx\">x</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">x</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"o\">===</span> <span class=\"nx\">id</span><span class=\"p\">)</span>\n      <span class=\"nx\">todo</span><span class=\"p\">.</span><span class=\"nx\">checked</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"nx\">todo</span><span class=\"p\">.</span><span class=\"nx\">checked</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">src/components/TodoItem.vue</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;input</span>\n    <span class=\"na\">type=</span><span class=\"s\">\"radio\"</span>\n    <span class=\"na\">class=</span><span class=\"s\">\"radio\"</span>\n    <span class=\"na\">:checked=</span><span class=\"s\">\"checked\"</span>\n    <span class=\"err\">@</span><span class=\"na\">click=</span><span class=\"s\">\"toggleChecked\"</span>\n  <span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;span&gt;</span><span class=\"si\">{{</span><span class=\"nx\">text</span><span class=\"si\">}}</span><span class=\"nt\">&lt;/span&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n\n<span class=\"nt\">&lt;</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">todo-item</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">props</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">,</span>\n      <span class=\"na\">required</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">},</span>\n    <span class=\"na\">checked</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">Boolean</span><span class=\"p\">,</span>\n      <span class=\"na\">required</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">},</span>\n    <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">Number</span><span class=\"p\">,</span>\n      <span class=\"na\">required</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">methods</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">toggleChecked</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$emit</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">toggleChecked</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">src/components/NewTodo.vue</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;input</span>\n      <span class=\"na\">class=</span><span class=\"s\">\"new\"</span>\n      <span class=\"na\">v-model=</span><span class=\"s\">\"text\"</span>\n      <span class=\"err\">@</span><span class=\"na\">keyup.enter=</span><span class=\"s\">\"submit\"</span>\n    <span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n\n<span class=\"nt\">&lt;</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">new-todo</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"nx\">data</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"dl\">\"\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n   <span class=\"na\">methods</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">submit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$emit</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">createTodo</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span> \n<span class=\"p\">}</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n\n</code></pre></div>\n</div>\n\n<h3>\n<span id=\"htmlの比較\" class=\"fragment\"></span><a href=\"#html%E3%81%AE%E6%AF%94%E8%BC%83\"><i class=\"fa fa-link\"></i></a>htmlの比較</h3>\n\n<p>さて</p>\n\n<h4>\n<span id=\"html-methodについて\" class=\"fragment\"></span><a href=\"#html-method%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>html methodについて</h4>\n\n<h4>\n<span id=\"shallowmountのhtml\" class=\"fragment\"></span><a href=\"#shallowmount%E3%81%AEhtml\"><i class=\"fa fa-link\"></i></a>shallowMountのhtml()</h4>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">tests/unit/TodoContainer.spec.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nx\">it</span><span class=\"p\">.</span><span class=\"nx\">only</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">toggleChecked</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">shallowMount</span><span class=\"p\">(</span><span class=\"nx\">TodoContainer</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"nx\">data</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"na\">todos</span><span class=\"p\">:</span> <span class=\"p\">[{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">text</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">checked</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}]</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">})</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">html</span><span class=\"p\">())</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">console.log.html</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;new-todo-stub&gt;&lt;/new-todo-stub&gt;</span>\n  <span class=\"nt\">&lt;todo-item-stub&gt;&lt;/todo-item-stub&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div>\n</div>\n\n<h4>\n<span id=\"mountのhtml\" class=\"fragment\"></span><a href=\"#mount%E3%81%AEhtml\"><i class=\"fa fa-link\"></i></a>mountのhtml()</h4>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">tests/unit/TodoContainer.spec.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nx\">it</span><span class=\"p\">.</span><span class=\"nx\">only</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">toggleChecked</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">mount</span><span class=\"p\">(</span><span class=\"nx\">TodoContainer</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"nx\">data</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"na\">todos</span><span class=\"p\">:</span> <span class=\"p\">[{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">text</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">checked</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}]</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">})</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">html</span><span class=\"p\">())</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">console.log.html</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">class=</span><span class=\"s\">\"new\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"radio\"</span> <span class=\"na\">class=</span><span class=\"s\">\"radio\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;span&gt;</span>text<span class=\"nt\">&lt;/span&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div>\n</div>\n\n<p><qiita-embed-ogp src=\"https://github.com/vuejs/vue-test-utils/issues/773\"></qiita-embed-ogp></p>\n\n<h4>\n<span id=\"結論\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E8%AB%96\"><i class=\"fa fa-link\"></i></a>結論</h4>\n\n<p><code>mount</code> の方はコンポーネントすべてをレンダリングしてくれるのですごく便利だったりします。<br>\nただ大規模なコンポーネントになるとstubで表示してくれる <code>shallowMount</code> の方が便利だったりします。</p>\n\n<p>また<code>shallowMount</code> + <code>stub</code> という書き方もあるので、それも紹介します。</p>\n\n<h3>\n<span id=\"shallowmountのhtml--stubで書く方法\" class=\"fragment\"></span><a href=\"#shallowmount%E3%81%AEhtml--stub%E3%81%A7%E6%9B%B8%E3%81%8F%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>shallowMountのhtml + stubで書く方法</h3>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><code>  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">shallowMount + stubs</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">shallowMount</span><span class=\"p\">(</span><span class=\"nx\">TodoContainer</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">stubs</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">NewTodo</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">&lt;div&gt;NewTodo&lt;/div&gt;</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">TodoItem</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">&lt;div data-test='todo' :id='id' /&gt;</span><span class=\"dl\">\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n    <span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">setData</span><span class=\"p\">({</span>\n      <span class=\"na\">todos</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n          <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n          <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">text</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n          <span class=\"na\">checked</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">]</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">html</span><span class=\"p\">())</span>\n  <span class=\"p\">})</span>\n</code></pre></div></div>\n\n<p>以下のように出力されます。特にコンポーネントをレンダリングする必要ないときは自分は <code>&lt;div&gt;NewTodo&lt;/div&gt;</code> もしくは <code>&lt;div /&gt;</code> でstub を作ったりします。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><code><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>NewTodo<span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">data-test=</span><span class=\"s\">\"todo\"</span> <span class=\"na\">id=</span><span class=\"s\">\"1\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>また <code>&lt;div data-test=\"todo\" id=\"1\"&gt;</code> みたいに <code>:id=\"id\"</code> みたいなv-bindもきちんとレンダリングされるのである程度しっかりした検証もできます。</p>\n\n<h3>\n<span id=\"wrapしない方法\" class=\"fragment\"></span><a href=\"#wrap%E3%81%97%E3%81%AA%E3%81%84%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>Wrapしない方法</h3>\n\n<p>実はwrapしなくてもテストがかけたりします。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><code>  <span class=\"k\">import</span> <span class=\"nx\">TodoContainer</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@/components/TodoContainer.vue</span><span class=\"dl\">\"</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">.</span><span class=\"nx\">only</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Methodsのテスト</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">TodoContainer</span><span class=\"p\">.</span><span class=\"nx\">methods</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n</code></pre></div></div>\n\n<p>import したコンポーネントから <code>methods</code> でアクセスできます。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><code>{\n  addTodo: [Function: addTodo],\n  toggleChecked: [Function: toggleChecked]\n}\n</code></pre></div></div>\n\n<p>メソッドの検証でwrapが必要ないときに使ったりします。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><code>  <span class=\"nx\">methods</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">addTodo</span><span class=\"p\">(</span><span class=\"nx\">text</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">todos</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">({</span><span class=\"nx\">text</span><span class=\"p\">,</span> <span class=\"na\">checked</span><span class=\"p\">:</span><span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">todos</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><code><span class=\"nx\">it</span><span class=\"p\">.</span><span class=\"nx\">only</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Methodsのテスト</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">TodoContainer</span><span class=\"p\">.</span><span class=\"nx\">methods</span><span class=\"p\">)</span>\n<span class=\"c1\">//    { addTodo: [Function: addTodo],</span>\n<span class=\"c1\">//      toggleChecked: [Function: toggleChecked] }</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">localThis</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">todos</span><span class=\"p\">:</span> <span class=\"p\">[]</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">localThis</span><span class=\"p\">)</span>\n  <span class=\"c1\">// { todos: [] }</span>\n\n  <span class=\"nx\">TodoContainer</span><span class=\"p\">.</span><span class=\"nx\">methods</span><span class=\"p\">.</span><span class=\"nx\">addTodo</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">localThis</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">test</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">localThis</span><span class=\"p\">)</span>\n  <span class=\"c1\">// { todos: [ { text: 'test', checked: false, id: 1 } ] }</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n\n<p><code>addTodo</code> を呼び出したときに <code>this</code> のスコープが変わるので、 <code>call</code> でテストように <code>this</code> を渡してあげていますが、それ以外は難しい処理をしていないと思います。</p>\n\n<p>このやり方は結構特殊であまり記事はないので <code>console.log</code> しまくって <code>あ、これでアクセスできるんだ</code> 的にやっていってほしいのですが <code>もしcreated, mountedで重い処理がある場合、マウントせずにメソッドを呼び出したい時</code> であれば使えばいいと思います。</p>\n\n<p>他の例はまだ作成中ですが <a href=\"https://lmiller1990.github.io/vue-testing-handbook/ja/testing-emitted-events.html\" rel=\"nofollow noopener\" target=\"_blank\">vue-testing-handbook # testing-emitted-events</a> を見ていただけるといいかと思います。</p>\n\n<h3>\n<span id=\"余談\" class=\"fragment\"></span><a href=\"#%E4%BD%99%E8%AB%87\"><i class=\"fa fa-link\"></i></a>余談</h3>\n\n<h4>\n<span id=\"bind系メソッドがhtmlレンダリングされない件\" class=\"fragment\"></span><a href=\"#bind%E7%B3%BB%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%8Chtml%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E4%BB%B6\"><i class=\"fa fa-link\"></i></a>bind系メソッドがhtmlレンダリングされない件</h4>\n\n<p>現状Vue-test-utilsのhtml()メソッドで<code>:bind</code>系の要素が上手くレンダリングされないみたいです。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">tests/unit/TodoContainer.spec.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nx\">it</span><span class=\"p\">.</span><span class=\"nx\">only</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">toggleChecked</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">mount</span><span class=\"p\">(</span><span class=\"nx\">TodoContainer</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"nx\">data</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"na\">todos</span><span class=\"p\">:</span> <span class=\"p\">[{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">text</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">checked</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}]</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">})</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">html</span><span class=\"p\">())</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">console.log.html</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">class=</span><span class=\"s\">\"new\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"radio\"</span> <span class=\"na\">class=</span><span class=\"s\">\"radio\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"c\">&lt;!-- \n    本当はこっちになってほしい。\n    &lt;input type=\"radio\" class=\"radio\" checked=\"true\"&gt;\n    --&gt;</span>\n    <span class=\"nt\">&lt;span&gt;</span>text<span class=\"nt\">&lt;/span&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div>\n</div>\n\n<p><a href=\"https://github.com/vuejs/vue-test-utils/issues/773\" rel=\"nofollow noopener\" target=\"_blank\">Vue-test-utilsのIssue</a> に記載しておきましたので、そのうち修正されるかもしれません。そのうち。また仮にこのfeatureがマージされると <code>snapshot-test</code> がたくさん更新されるはずなので、その時はsnapshotだけのPR作らないとね、という話で盛り上がりました。</p>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<ul>\n<li>\n<code>mount</code> は子コンポーネントの html をマウントしてくれる</li>\n<li>\n<code>shallowMount</code> は子コンポーネントの html をマウントしない</li>\n<li>\n<code>shallowMount + stubs</code> は子コンポーネントの html をstubでマウントできる</li>\n<li>\n<code>TodoContainer.methods</code> でメソッドだけのテストは意外に便利</li>\n</ul>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p>いい感じにwrapできるようになりましたか？いい感じにwrapができるようになればVue-test-utilsマスターになれると思いますよ◎</p>\n","body":"# Vue-test-utilsのshallowMountとmountの違いについて\n\nこの記事では Vue-test-utils の `shallowMount` と `mount` の違いについてをメインに記事にしていきます。また `shallowMount` + `stubs` についても書いていきたいと思います。 `Component.methods` とコンポーネントから直接 `methods` を呼び出す方法もあるのでよかったら見ていってください。\n\n- `mount`\n- `shallowMount`\n- `shallowMount + stubs`\n- `TodoContainer.methods`\n\nこのあたりでを書いていきたいと思います。\n\n個人的には「Vue-test-utils」には、Vue.jsのコンポーネントとかをいい感じにwrapしてくれて、jestとかのテストランナーに乗せれるようにしてくれるいい感じのヤツという認識があります。（訂正とか正確な表現があればコメント欄なりPRお願いします。）\n\nVue-test-utilsがどんなものか、どういう感じで誕生したかは、以下の記事に詳しいかと思います。 [vue-test-utilsを使用してテストを書いてみた(Vue.js)](https://qiita.com/re-fort/items/63bef6778bf3d3939815)\n\nドキュメントは https://vue-test-utils.vuejs.org/ja/ こちらになります。今回の内容は、ドキュメントに書いてあることがほとんどなので、私の記事からテストに入った方もぜひドキュメントを読んでみてください。このドキュメントは長くないので流し読みなら1時間もあれば読めると思います。\n\n## はじめに\n\nこんにちは。僕です。\n\n前回は [【Vue.js】いつから「フロントエンド開発でTDDができない」と錯覚していた？](https://qiita.com/ykhirao/items/becd9be857dbe6804314) ※1 という記事を書かせていただきました。。フロントエンド界隈ってまったくテストが盛り上がっていなくて、ましてや「弊社TDDやってます」なんという声とかはほとんどあがっていない状況です。（私はそう感じているという主観的な意見ですが。）\n\n※1 タイトルの元ネタ BLEACHの藍染惣右介のセリフより\n\n「フロントエンドのテストって難しくないよ！！」とか「フロントエンドのロジック部分はTDDできるよ！！」って伝えたくて記事を書かせていただきました。基本的にVueのテストについての記事はQiitaに書いていくので、QiitaかTwitterをフォローしてくれると情報が早いかと思います。\n\n## 本文\n\n### 前回のコンポーネントの復習\n\n前回の [記事](https://qiita.com/ykhirao/items/becd9be857dbe6804314) を読んでいないかたはぜひ読んできてください。同じコンポーネントを使うことにします。\n\n<img width=\"643\" alt=\"スクリーンショット 2018-06-24 0.21.35のコピー3.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/ac256146-7880-c85f-82d9-4d7e80711a0d.png\">\n\n```\n$ git clone https://github.com/ykhirao/vue-todos.git\n```\n\n```src/components/TodoContainer.vue\n<template>\n<div>\n  <NewTodo\n    @createTodo=\"addTodo\"\n  ></NewTodo>\n  <TodoItem\n    v-for=\"todo in todos\"\n    :id=\"todo.id\"\n    :key=\"todo.id\"\n    :text=\"todo.text\"\n    :checked=\"todo.checked\"\n    @toggleChecked=\"toggleChecked\"\n  ></TodoItem>\n</div>\n</template>\n<script>\nimport NewTodo from \"@/components/NewTodo.vue\"\nimport TodoItem from '@/components/TodoItem.vue'\n\nexport default {\n  name: \"todo-container\",\n  components: {\n    NewTodo,\n    TodoItem\n  },\n  data() {\n    return {\n      todos: []\n    }\n  },\n  methods: {\n    addTodo(text) {\n      this.todos.push({text, checked:false, id: this.todos.length + 1 })\n    },\n    toggleChecked(id) {\n      const todo = this.todos.find(x => x.id === id)\n      todo.checked = !todo.checked\n    }\n  }\n}\n</script>\n\n```\n\n```src/components/TodoItem.vue\n<template>\n<div>\n  <input\n    type=\"radio\"\n    class=\"radio\"\n    :checked=\"checked\"\n    @click=\"toggleChecked\"\n  >\n  <span>{{text}}</span>\n</div>\n</template>\n\n<script>\nexport default {\n  name: \"todo-item\",\n  props: {\n    text: {\n      type: String,\n      required: true\n    },\n    checked: {\n      type: Boolean,\n      required: true\n    },\n    id: {\n      type: Number,\n      required: true\n    }\n  },\n  methods: {\n    toggleChecked() {\n      this.$emit(\"toggleChecked\", this.id)\n    }\n  }\n}\n</script>\n\n```\n\n```src/components/NewTodo.vue\n<template>\n  <div>\n    <input\n      class=\"new\"\n      v-model=\"text\"\n      @keyup.enter=\"submit\"\n    >\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"new-todo\",\n  data() {\n    return {\n      text: \"\"\n    }\n  },\n   methods: {\n    submit() {\n      this.$emit(\"createTodo\", this.text)\n    }\n  } \n}\n</script>\n\n```\n\n### htmlの比較\n\nさて\n\n#### html methodについて\n\n#### shallowMountのhtml()\n\n```tests/unit/TodoContainer.spec.js\nit.only(\"toggleChecked\", () => {\n  const wrapper = shallowMount(TodoContainer, {\n    data() {\n      return {\n        todos: [{ id: 1, text: \"text\", checked: true }]\n      }\n    }\n  })\n  console.log(wrapper.html())\n})\n```\n\n```console.log.html\n<div>\n  <new-todo-stub></new-todo-stub>\n  <todo-item-stub></todo-item-stub>\n</div>\n```\n\n#### mountのhtml()\n\n```tests/unit/TodoContainer.spec.js\nit.only(\"toggleChecked\", () => {\n  const wrapper = mount(TodoContainer, {\n    data() {\n      return {\n        todos: [{ id: 1, text: \"text\", checked: true }]\n      }\n    }\n  })\n  console.log(wrapper.html())\n})\n```\n\n```console.log.html\n<div>\n  <div>\n    <input class=\"new\">\n  </div>\n  <div>\n    <input type=\"radio\" class=\"radio\">\n    <span>text</span>\n  </div>\n</div>\n```\n\nhttps://github.com/vuejs/vue-test-utils/issues/773\n\n#### 結論\n\n`mount` の方はコンポーネントすべてをレンダリングしてくれるのですごく便利だったりします。\nただ大規模なコンポーネントになるとstubで表示してくれる `shallowMount` の方が便利だったりします。\n\nまた`shallowMount` + `stub` という書き方もあるので、それも紹介します。\n\n### shallowMountのhtml + stubで書く方法\n\n```js\n  it(\"shallowMount + stubs\", () => {\n    const wrapper = shallowMount(TodoContainer, {\n      stubs: {\n        NewTodo: \"<div>NewTodo</div>\",\n        TodoItem: \"<div data-test='todo' :id='id' />\"\n      }\n    })\n    wrapper.setData({\n      todos: [\n        {\n          id: 1,\n          text: \"text\",\n          checked: false\n        }\n      ]\n    })\n\n    console.log(wrapper.html())\n  })\n```\n\n以下のように出力されます。特にコンポーネントをレンダリングする必要ないときは自分は `<div>NewTodo</div>` もしくは `<div />` でstub を作ったりします。\n\n```html\n<div>\n  <div>NewTodo</div>\n  <div data-test=\"todo\" id=\"1\"></div>\n</div>\n```\n\nまた `<div data-test=\"todo\" id=\"1\">` みたいに `:id=\"id\"` みたいなv-bindもきちんとレンダリングされるのである程度しっかりした検証もできます。\n\n### Wrapしない方法\n\n実はwrapしなくてもテストがかけたりします。\n\n```js\n  import TodoContainer from \"@/components/TodoContainer.vue\"\n\n  it.only(\"Methodsのテスト\", () => {\n    console.log(TodoContainer.methods)\n  })\n```\n\nimport したコンポーネントから `methods` でアクセスできます。\n\n```html\n{\n  addTodo: [Function: addTodo],\n  toggleChecked: [Function: toggleChecked]\n}\n```\n\nメソッドの検証でwrapが必要ないときに使ったりします。\n\n```js\n  methods: {\n    addTodo(text) {\n      this.todos.push({text, checked:false, id: this.todos.length + 1 })\n    }\n  }\n```\n\n```js\nit.only(\"Methodsのテスト\", () => {\n  console.log(TodoContainer.methods)\n//    { addTodo: [Function: addTodo],\n//      toggleChecked: [Function: toggleChecked] }\n  const localThis = {\n    todos: []\n  }\n\n  console.log(localThis)\n  // { todos: [] }\n\n  TodoContainer.methods.addTodo.call(localThis, \"test\")\n\n  console.log(localThis)\n  // { todos: [ { text: 'test', checked: false, id: 1 } ] }\n})\n```\n\n`addTodo ` を呼び出したときに `this` のスコープが変わるので、 `call` でテストように `this` を渡してあげていますが、それ以外は難しい処理をしていないと思います。\n\nこのやり方は結構特殊であまり記事はないので `console.log` しまくって `あ、これでアクセスできるんだ` 的にやっていってほしいのですが `もしcreated, mountedで重い処理がある場合、マウントせずにメソッドを呼び出したい時` であれば使えばいいと思います。\n\n他の例はまだ作成中ですが [vue-testing-handbook # testing-emitted-events](https://lmiller1990.github.io/vue-testing-handbook/ja/testing-emitted-events.html) を見ていただけるといいかと思います。\n\n### 余談\n#### bind系メソッドがhtmlレンダリングされない件\n\n現状Vue-test-utilsのhtml()メソッドで`:bind`系の要素が上手くレンダリングされないみたいです。\n\n```tests/unit/TodoContainer.spec.js\nit.only(\"toggleChecked\", () => {\n  const wrapper = mount(TodoContainer, {\n    data() {\n      return {\n        todos: [{ id: 1, text: \"text\", checked: true }]\n      }\n    }\n  })\n  console.log(wrapper.html())\n})\n```\n\n```console.log.html\n<div>\n  <div>\n    <input class=\"new\">\n  </div>\n  <div>\n    <input type=\"radio\" class=\"radio\">\n    <!-- \n    本当はこっちになってほしい。\n    <input type=\"radio\" class=\"radio\" checked=\"true\">\n    -->\n    <span>text</span>\n  </div>\n</div>\n```\n\n[Vue-test-utilsのIssue](https://github.com/vuejs/vue-test-utils/issues/773) に記載しておきましたので、そのうち修正されるかもしれません。そのうち。また仮にこのfeatureがマージされると `snapshot-test` がたくさん更新されるはずなので、その時はsnapshotだけのPR作らないとね、という話で盛り上がりました。\n\n## まとめ\n\n- `mount` は子コンポーネントの html をマウントしてくれる\n- `shallowMount` は子コンポーネントの html をマウントしない\n- `shallowMount + stubs` は子コンポーネントの html をstubでマウントできる\n- `TodoContainer.methods` でメソッドだけのテストは意外に便利\n\n## 終わりに\n\nいい感じにwrapできるようになりましたか？いい感じにwrapができるようになればVue-test-utilsマスターになれると思いますよ◎\n","coediting":false,"comments_count":0,"created_at":"2018-07-12T09:56:45+09:00","group":null,"id":"8e8a9547a693c677813c","likes_count":88,"private":false,"reactions_count":0,"tags":[{"name":"JavaScript","versions":[]},{"name":"Vue.js","versions":[]},{"name":"Jest","versions":[]},{"name":"vue-test-utils","versions":[]}],"title":"Vue.jsのテストでコンポーネントをいい感じにwrapする方法","updated_at":"2018-07-12T11:51:56+09:00","url":"https://qiita.com/ykhirao/items/8e8a9547a693c677813c","user":{"description":"Web Developer For 6 years.\r\nPHP/Laravel && (React OR Vue.js)\r\nTypeScript/node.js\r\n\r\n業務委託の依頼とかはWantedlyとかからでお願いします！","facebook_id":"","followees_count":38,"followers_count":95,"github_login_name":"ykhirao","id":"ykhirao","items_count":59,"linkedin_id":"","location":"Tokyo, Japan","name":"yk","organization":"","permanent_id":112929,"profile_image_url":"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/profile-images/1639030792","team_only":false,"twitter_screen_name":"yk_hirao","website_url":"https://www.wantedly.com/id/ykhirao"},"page_views_count":null,"team_membership":null}},"path":"posts/8e8a9547a693c677813c"}
