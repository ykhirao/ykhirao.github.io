{"template":"__react_static_root__/src/components/QiitaPost","sharedHashesByProp":{},"data":{"post":{"rendered_body":"\n<h1>\n<span id=\"google-apps-scriptの開発をローカルで行うためにwebpackによる自作テンプレート作成をしてみる\" class=\"fragment\"></span><a href=\"#google-apps-script%E3%81%AE%E9%96%8B%E7%99%BA%E3%82%92%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E8%A1%8C%E3%81%86%E3%81%9F%E3%82%81%E3%81%ABwebpack%E3%81%AB%E3%82%88%E3%82%8B%E8%87%AA%E4%BD%9C%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E4%BD%9C%E6%88%90%E3%82%92%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>Google Apps Scriptの開発をローカルで行うためにWebpackによる自作テンプレート作成をしてみる</h1>\n\n<p>今回はWebpackを使った自作テンプレート作成をやったことない人向けのチュートリアルになります。<br>\nちゃんと調べて真面目な記事のつもりですが、Webpack歴1週間くらいの人間が書いているので間違ってそうなところは編集リクエストお願いします。。。<img alt=\":pray:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f64f.png\" title=\":pray:\" width=\"20\" loading=\"lazy\"></p>\n\n<h2>\n<span id=\"想定している記事の読者層\" class=\"fragment\"></span><a href=\"#%E6%83%B3%E5%AE%9A%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E8%A8%98%E4%BA%8B%E3%81%AE%E8%AA%AD%E8%80%85%E5%B1%A4\"><i class=\"fa fa-link\"></i></a>想定している記事の読者層</h2>\n\n<p>GoogleAppsScriptはとても便利なスクリプトの実行環境なので、Qiitaの記事でも人気で本日付けで1713の記事が公開されていますね。</p>\n\n<p>とても便利なので<strong>Webからさくっと作成して</strong>、そのまま放置している人も多いと思います。またプロダクトとして公開していたり、<strong>社内BotでSlack通知させていたり</strong>と、結構がっつり使っているのにGit管理されていないであったり、<strong>社内の誰からもレビュー受けていない状態</strong>になっていませんか？</p>\n\n<p>であるので以下のような考えを持つかたはこの記事が参考になるかと思います。</p>\n\n<ul>\n<li>\n<strong>ウェブ上でGAS</strong>を書いたことがある人 &amp;&amp; <strong>プロダクトで使っている</strong>\n</li>\n<li>\n<strong>GitHub/GitLabでコードを管理したい</strong>、レビューしてもらいたい</li>\n<li>どうせなら<strong>npmモジュール</strong>使ったり<strong>ES6</strong>とかTypescriptで書きたい（GASはES５までの構文のみ）</li>\n</ul>\n\n<p>また自分はVue-cliとかでなんかいい感じにWebpackとかBabelがコンパイルしてくれるのでしっかり自分で定義とかしたことなかったので、そのあたりをテンプレート作成を通して学んでいきたいと思います。</p>\n\n<p>なので、以下のような人が読むと、Webpac筋のレベルがあがるのではないでしょうか。</p>\n\n<ul>\n<li>Vue.js/Reactとか使っているときに<strong>Webpackを使っているはず</strong>だけど、設定したことない</li>\n<li>\n<strong>babel?トランスパイル？？</strong>なにそれ食べれるの。</li>\n</ul>\n\n<h2>\n<span id=\"参考にさせてもらった記事\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E3%81%AB%E3%81%95%E3%81%9B%E3%81%A6%E3%82%82%E3%82%89%E3%81%A3%E3%81%9F%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>参考にさせてもらった記事</h2>\n\n<h4>\n<span id=\"google-apps-script-のモダンな開発環境を求めて\" class=\"fragment\"></span><a href=\"#google-apps-script-%E3%81%AE%E3%83%A2%E3%83%80%E3%83%B3%E3%81%AA%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%82%92%E6%B1%82%E3%82%81%E3%81%A6\"><i class=\"fa fa-link\"></i></a><a href=\"https://kenchan0130.github.io/post/2018-12-03-1\" rel=\"nofollow noopener\" target=\"_blank\">Google Apps Script のモダンな開発環境を求めて</a>\n</h4>\n\n<p>こちらの記事は2018年末におけるGAS開発のいろんなものを丁寧にまとめてくださっているので、３往復くらい読ませていただきました。</p>\n\n<h4>\n<span id=\"google-apps-script-をローカル環境で快適に開発するためのテンプレートを作りました---qiita\" class=\"fragment\"></span><a href=\"#google-apps-script-%E3%82%92%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E7%92%B0%E5%A2%83%E3%81%A7%E5%BF%AB%E9%81%A9%E3%81%AB%E9%96%8B%E7%99%BA%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F---qiita\"><i class=\"fa fa-link\"></i></a><a href=\"https://qiita.com/howdy39/items/0e799a9bfc1d3bccf6e5\" id=\"reference-047d83ddeafc31825c61\">Google Apps Script をローカル環境で快適に開発するためのテンプレートを作りました - Qiita</a>\n</h4>\n\n<p>今回作ろうと思ったテンプレートの一番参考になった記事です。</p>\n\n<p>2018/03/28 - gas-clasp-starter という Google Apps Script を ローカル環境で開発するためのテンプレートを作りました。 2018年に登場した、google/clasp をベースに webpack, TypeScript, TSLint, Prettier, Jest を利用したテンプレートになっています。</p>\n\n<h2>\n<span id=\"開発\" class=\"fragment\"></span><a href=\"#%E9%96%8B%E7%99%BA\"><i class=\"fa fa-link\"></i></a>開発</h2>\n\n<h3>\n<span id=\"グローバルに必要なパッケージ\" class=\"fragment\"></span><a href=\"#%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8\"><i class=\"fa fa-link\"></i></a>グローバルに必要なパッケージ</h3>\n\n<p>今回コードはyarnのサンプルなのでnpmでやるかたは適宜読み替えてください。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>node <span class=\"nt\">-v</span>\n<span class=\"go\">v12.4.0\n</span><span class=\"gp\">$</span><span class=\"w\"> </span>npm <span class=\"nt\">-v</span>\n<span class=\"go\">6.9.0\n</span><span class=\"gp\">$</span><span class=\"w\"> </span>yarn <span class=\"nt\">-v</span>\n<span class=\"go\">1.16.0\n</span><span class=\"gp\">$</span><span class=\"w\"> </span>clasp <span class=\"nt\">-v</span>\n<span class=\"go\">2.1.0\n</span></code></pre></div></div>\n\n<p>webpack-cliと、claspはGoogleが提供しているGAS用のSDK的なものなのでインストールとログインしておく。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">npm i @webpack-cli/init -g\nnpm i @google/clasp -g\nclasp login\n</span></code></pre></div></div>\n\n<h3>\n<span id=\"webpack設定\" class=\"fragment\"></span><a href=\"#webpack%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>Webpack設定</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>mkdir qiita-gas-template\ncd qiita-gas-template/\n</code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">yarn add gas-webpack-plugin webpack webpack-cli @webpack-cli/init --dev\nnpx webpack-cli init\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>A name parameter is required to create a storage\n</code></pre></div></div>\n\n<p><code>npx</code> は <code>./node_modules/webpack-cli/bin/cli.js</code> 的なパスをわざわざ叩かなくても <code>npx webpack-cli</code> だけで実行できる魔法のスクリプトです。気になるかたは調べてみて。</p>\n\n<p>nameエラー出るので <code>package.json</code> に <code>\"name\": \"qiita-gas-template\"</code> を追加修正します。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"qiita-gas-template\"</span><span class=\"p\">,</span><span class=\"w\"> \n  </span><span class=\"nl\">\"devDependencies\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<p>もう一度 <code>webpack-cli</code> で初期化します。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">npx webpack-cli init\n\nℹ INFO  For more information and a detailed description of each question, have a look at: https://github.com/webpack/webpack-cli/blob/master/INIT.md\nℹ INFO  Alternatively, run \"webpack(-cli) --help\" for usage info\n\n? Will your application have multiple bundles? No\n? Which will be your application entry point? src/index\n? In which folder do you want to store your generated bundles? dist\n? Will you use one of the below JS solutions? ES6\n? Will you use one of the below CSS solutions? No\n conflict package.json\n? Overwrite package.json? overwrite\n</span></code></pre></div></div>\n\n<p>選択肢は適当に必要なものを選んでください。Typescript使いたい人はここでES6じゃなくてTS<br>\nがあるはず。</p>\n\n<p>initのときいろいろハマったので、ハマった人はこのあたり読むといいかも<br>\n<a href=\"https://github.com/webpack/webpack-cli/blob/master/INIT.md\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/webpack/webpack-cli/blob/master/INIT.md</a></p>\n\n<p>次に <code>package.json</code> を確認して、実行コマンドを確かめます。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><code><span class=\"w\">  </span><span class=\"nl\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"webpack\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"webpack-dev-server\"</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<p><code>yarn build</code> でコンパイルしてくれそうですね。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>yarn build\n<span class=\"gp\">#</span><span class=\"w\"> </span>index.html\n<span class=\"gp\">#</span><span class=\"w\"> </span>main.xxxx.js\n</code></pre></div></div>\n\n<p><code>? In which folder do you want to store your generated bundles? dist</code> 先程 <code>dist</code> というディレクトリをコンパイル先に指定したので確認してみます。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>tree <span class=\"nt\">-L</span> 2 dist\n<span class=\"go\">dist\n├── index.html\n└── main.55d8ca80f289d8387835.js\n</span></code></pre></div></div>\n\n<p><code>index.js</code> が作られてほしかったのに違う感じになったので一旦削除する。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">rm -fr dist/\n</span></code></pre></div></div>\n\n<p>index.jsが作られないのでwebpackの設定を確認する。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">webpack.config.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">// html系のプラグインはいらないので</span>\n<span class=\"c1\">// 代わりに最初にyarnで追加したGAS用のwebpackプラグインを入れる</span>\n<span class=\"kd\">const</span> <span class=\"nx\">HtmlWebpackPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">html-webpack-plugin</span><span class=\"dl\">'</span><span class=\"p\">);</span> <span class=\"c1\">// 削除</span>\n<span class=\"nl\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"k\">new</span> <span class=\"nx\">webpack</span><span class=\"p\">.</span><span class=\"nx\">ProgressPlugin</span><span class=\"p\">(),</span> <span class=\"k\">new</span> <span class=\"nx\">HtmlWebpackPlugin</span><span class=\"p\">()],</span> <span class=\"c1\">// HtmlWebpackPluginだけ削除</span>\n<span class=\"c1\">// それぞれの行を以下の用に書き換える</span>\n<span class=\"kd\">const</span> <span class=\"nx\">GasWebpackPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">gas-webpack-plugin</span><span class=\"dl\">'</span><span class=\"p\">);</span> <span class=\"c1\">// 追加</span>\n<span class=\"nl\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"k\">new</span> <span class=\"nx\">webpack</span><span class=\"p\">.</span><span class=\"nx\">ProgressPlugin</span><span class=\"p\">(),</span> <span class=\"k\">new</span> <span class=\"nx\">GasWebpackPlugin</span><span class=\"p\">()],</span> <span class=\"c1\">// GasWebpackPluginを追加。</span>\n\n<span class=\"nx\">output</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n  <span class=\"nl\">filename</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">index.js</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"c1\">// ここをindex.jsに書き換える</span>\n  <span class=\"nx\">path</span><span class=\"p\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">dist</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">},</span>\n</code></pre></div>\n</div>\n\n<p>最終的には以下のような感じになっていると思う。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">webpack.config.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">path</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">webpack</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">webpack</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">GasWebpackPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">gas-webpack-plugin</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">mode</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">development</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">entry</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">./src/index.js</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n\n    <span class=\"na\">output</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">filename</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">index.js</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n        <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">dist</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"na\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"k\">new</span> <span class=\"nx\">webpack</span><span class=\"p\">.</span><span class=\"nx\">ProgressPlugin</span><span class=\"p\">(),</span> <span class=\"k\">new</span> <span class=\"nx\">GasWebpackPlugin</span><span class=\"p\">()],</span>\n\n</code></pre></div>\n</div>\n\n<p>コンパイルが成功するか確認する。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>yarn build\n<span class=\"gp\">$</span><span class=\"w\"> </span>tree <span class=\"nt\">-L</span> 2 dist\n<span class=\"go\">dist\n└── index.js\n</span></code></pre></div></div>\n\n<p><code>dist/index.js</code> が作られてそうです！</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">src/index.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">// dist/index.jsじゃないよ！ src/index.jsだよ！</span>\n<span class=\"nb\">global</span><span class=\"p\">.</span><span class=\"nx\">doGet</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">HtmlService</span><span class=\"p\">.</span><span class=\"nx\">createHtmlOutput</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">&lt;h1&gt;Getのサンプル&lt;/h1&gt;</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n\n<p>と書き換える。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">yarn build\n</span></code></pre></div></div>\n\n<p>コンパイルすると</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">dist/index.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">// (いろいろ長いのでこのあたりまで省略)</span>\n<span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">global.doGet = function () {</span><span class=\"se\">\\n</span><span class=\"s2\">  return HtmlService.createHtmlOutput(</span><span class=\"se\">\\\"</span><span class=\"s2\">&lt;h1&gt;Getのサンプル&lt;/h1&gt;</span><span class=\"se\">\\\"</span><span class=\"s2\">);</span><span class=\"se\">\\n</span><span class=\"s2\">};</span><span class=\"se\">\\n\\n</span><span class=\"s2\">//# sourceURL=webpack:///./src/index.js?</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div>\n</div>\n\n<p><code>() =&gt; {}</code> が <code>function(){}</code> に変換されているので問題なさそうですが、全部evalの中で見にくいですね。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">webpack.config.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nx\">entry</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">./src/index.js</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n<span class=\"nx\">devtool</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"c1\">// ここの行を追加する</span>\n</code></pre></div>\n</div>\n\n<p>ちょっと今回は以上の設定を追加してみます。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">yarn build\n</span></code></pre></div></div>\n\n<p>webpackのその他の記述がたくさんあるので、必要なところだけ見ると</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">dist/index.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">// (略)</span>\n\n<span class=\"cm\">/* WEBPACK VAR INJECTION */</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nb\">global</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nb\">global</span><span class=\"p\">.</span><span class=\"nx\">doGet</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">HtmlService</span><span class=\"p\">.</span><span class=\"nx\">createHtmlOutput</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">&lt;h1&gt;Getのサンプル&lt;/h1&gt;</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// (略)</span>\n</code></pre></div>\n</div>\n\n<p>いい感じにコンパイルされてそうですね。</p>\n\n<h3>\n<span id=\"googleappsscriptの設定\" class=\"fragment\"></span><a href=\"#googleappsscript%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>GoogleAppsScriptの設定</h3>\n\n<p>次にGASアプリ作成する。standaloneを選ぶ。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">clasp create --rootDir dist\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>loginから求められるかも。\n<span class=\"gp\">#</span><span class=\"w\"> </span>appsscript.jsonが作成される\n<span class=\"gp\">#</span><span class=\"w\"> </span>https://script.google.com/d/xxxxxx/edit という文字列が出力される\n<span class=\"gp\">#</span><span class=\"w\"> </span>こちらの画面からコードが編集できるようになる\n</code></pre></div></div>\n\n<p>間違えて <code>--rootDir dist</code> をつけ忘れたらclaspからpushするときにルートディレクトリをすべてpushしようとするので修正が必要です。 <code>.clasp.json</code> にrootのオプション <code>{\"rootDir\": \"dist\",\"scriptId\": \"xxx\"}</code> を追記して、 <code>appsscript.json</code> を <code>dist/</code> 以下に配置しなおします。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>clasp push\n<span class=\"gp\">&gt;</span><span class=\"w\"> </span>no such file or directory, open <span class=\"s1\">'dist/appsscript.json'</span>\n</code></pre></div></div>\n\n<p><code>dist/appsscript.json</code> がないって怒れれたので移動させる。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">mv appsscript.json dist/appsscript.json\nclasp push\n</span></code></pre></div></div>\n\n<p><code>clasp push</code> 二回目以降は <code>? Manifest file has been updated. Do you want to push and overwrite? Yes</code> って聞かれるので上書きしたげる。</p>\n\n<p><a href=\"https://script.google.com/home\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://script.google.com/home</a> ここから確認するか<br>\n<a href=\"https://script.google.com/d/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://script.google.com/d/</a>&lt;.clasp.jsonのscriptIdをここにいれる&gt;</p>\n\n<p>どっちかから確認してみましょう</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/f7a8a3923a8b5faf077031968664e1c52707cb30/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f31666466626161382d353961622d356466642d333437352d6137393364653239306133352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"681\" alt=\"スクリーンショット 2019-06-22 0.38.25.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F1fdfbaa8-59ab-5dfd-3475-a793de290a35.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a0f460e7e40020ebbb7af98e3aa59c28\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/1fdfbaa8-59ab-5dfd-3475-a793de290a35.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F1fdfbaa8-59ab-5dfd-3475-a793de290a35.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f98e751606f432e0947b8b8af578495c 1x\" loading=\"lazy\"></a></p>\n\n<p>アップロードされていたらOK◎</p>\n\n<p>公開&gt;ウェブアプリケーションとして導入&gt;導入</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/8fe37c10c3703c62435db791a828184901df5b5d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f62393037313338322d373333312d376264612d373862332d6336666562636433303436342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"694\" alt=\"スクリーンショット 2019-06-22 0.32.47.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fb9071382-7331-7bda-78b3-c6febcd30464.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=dd12735b5aa1a84abbf823db54079ddf\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/b9071382-7331-7bda-78b3-c6febcd30464.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fb9071382-7331-7bda-78b3-c6febcd30464.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=26d0bb6b0ab3a7475a7ef29b76c8687a 1x\" loading=\"lazy\"></a></p>\n\n<p>で 表示される <code>https://script.google.com/macros/s/xx_それっぽいコード_xx/exec</code> にアクセスすると。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/a3d9d470f5e0a12bffb71ba8b6f2d34c48d7f646/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f39346337333839382d646131662d643733372d656638332d3432323136376332656266372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"740\" alt=\"スクリーンショット 2019-06-22 0.38.14.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F94c73898-da1f-d737-ef83-422167c2ebf7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2e8dc29fe4c21b9d60c3faba6623d9e9\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/94c73898-da1f-d737-ef83-422167c2ebf7.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F94c73898-da1f-d737-ef83-422167c2ebf7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=56eb2786a72d0a67063967e6081ed6cd 1x\" loading=\"lazy\"></a></p>\n\n<p>と表示されてたらOKです！！！</p>\n\n<h3>\n<span id=\"テンプレート化する\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E5%8C%96%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>テンプレート化する</h3>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">rm .clasp.json\nrm -rf dist/\nrm -rf node_modules/\n</span></code></pre></div></div>\n\n<p>gitignoreを追加しとく</p>\n\n<p><code>vim .gitignore</code></p>\n\n<div class=\"code-frame\" data-lang=\"gitignore\"><div class=\"highlight\"><pre><code>/node_modules\n/test/js\n/test/browsertest/js\n/test/fixtures/temp-cache-fixture\n/benchmark/js\n/benchmark/fixtures\n/examples/**/dist\n/coverage\n/dist\n.DS_Store\n*.log\n.idea\n.vscode\n.eslintcache\npackage-lock.json\n\n# 参考 https://github.com/webpack/webpack/blob/master/.gitignore\n# distも保存しないほうがいいと思うので追加\n</code></pre></div></div>\n\n<p>テンプレートを含む <code>gas-dev</code> みたいなルートディレクトリに <code>qiita-gas-template</code> をいれて、それをコピーして使い回せば完成です。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>tree <span class=\"nt\">-L</span> 1 \n<span class=\"c\">.\n</span><span class=\"go\">├── gas-dir\n└── qiita-gas-template\n</span></code></pre></div></div>\n\n<p>以降はこのディレクトリをコピペしてそのディレクトリで以下のコマンドを実行して、GASを作りまくる感じです。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">cp -r qiita-gas-template gas-dir\ncd gas-dir\nyarn\nclasp create --rootDir dist\nyarn build\nclasp push\n// https://script.google.com/home\n</span></code></pre></div></div>\n\n<p>以上、テンプレート作成でした。</p>\n\n<p>あとはGitHub/GitLabのプライベートレポジトリとかでレビューしてもらったりいろいろやってみてください。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>clasp pull                                                                                                                                           <span class=\"o\">(</span>git<span class=\"o\">)</span>-[master]\n<span class=\"go\">Could not find script.\nDid you provide the correct scriptId?\nAre you logged in to the correct account with the script?\n</span></code></pre></div></div>\n\n<p>共同編集者（GASに権限のないアカウント）がpullしようとするとエラーがでるので、GAS画面上から共有して編集権限を与えてあげてください。<br>\n（Git管理を至上として、 <code>clasp pull</code> は禁止にしたほうがいいと思いますが）</p>\n\n<p><code>yarn</code> して <code>yarn deploy</code> をすれば、別の人も開発に加われると思います。</p>\n\n<h3>\n<span id=\"もっといいテンプレートを使う\" class=\"fragment\"></span><a href=\"#%E3%82%82%E3%81%A3%E3%81%A8%E3%81%84%E3%81%84%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>もっといいテンプレートを使う</h3>\n\n<p><a href=\"https://qiita.com/howdy39/items/0e799a9bfc1d3bccf6e5\">Google Apps Script をローカル環境で快適に開発するためのテンプレートを作りました - Qiita</a></p>\n\n<p>最初の方に紹介したテンプレートのほうが出来がいいのでこちらを使うことを推奨します。<br>\nいまWebpack周りを解説したので多分コード読めるようになっていると思います。</p>\n\n<p>具体的にはTypescriptを導入しているんですよね。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><code><span class=\"w\">  </span><span class=\"nl\">\"devDependencies\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"@types/google-apps-script\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.0.53\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"@types/jest\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"24.0.13\"</span><span class=\"p\">,</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<p>なので <code>Logger.lo</code> とかまで打つと、VSCodeとかだとタイプヒンティングでGAS上で開発するときに必要なGASのAPIが表示されたり、かなりローカルの開発効率があがります。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/97eeb9db52ad1c8c0bc595c82c3ea576c463ad3c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f62393034343232642d663863312d303864642d313633322d3839306332386561643139392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"602\" alt=\"スクリーンショット 2019-06-22 0.53.05.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fb904422d-f8c1-08dd-1632-890c28ead199.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=664d2314e8da911fdc63d215ca2a0b6e\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/b904422d-f8c1-08dd-1632-890c28ead199.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fb904422d-f8c1-08dd-1632-890c28ead199.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=69ed0d3edb0fed138e70c0e194bbd4cb 1x\" loading=\"lazy\"></a></p>\n\n<p>今回私が作ったテンプレートでも、以下のような感じでごにょっとpackegeとか追加してあげると、タイプヒンティング自体は動くようになるので、（たぶん、、）ちょっとやってみるといいかもしれません。howdy39さんのコードとか読んでみるといいかも。。。（力つきた。）</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">yarn add --dev typescript @types/google-apps-script ts-loader\ntouch tsconfig.json\nmv src/index.js src/index.ts\n</span></code></pre></div></div>\n\n<h2>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h2>\n\n<p>今回はGASをローカルで開発する方法とGit管理しようぜって話と、テンプレート作ってみようぜ！って話をすべて込めてみました。最後まで読んでいただきありがとうございました！</p>\n\n<p>.</p>\n","body":"# Google Apps Scriptの開発をローカルで行うためにWebpackによる自作テンプレート作成をしてみる\n\n今回はWebpackを使った自作テンプレート作成をやったことない人向けのチュートリアルになります。\nちゃんと調べて真面目な記事のつもりですが、Webpack歴1週間くらいの人間が書いているので間違ってそうなところは編集リクエストお願いします。。。:pray:\n\n## 想定している記事の読者層\n\nGoogleAppsScriptはとても便利なスクリプトの実行環境なので、Qiitaの記事でも人気で本日付けで1713の記事が公開されていますね。\n\nとても便利なので**Webからさくっと作成して**、そのまま放置している人も多いと思います。またプロダクトとして公開していたり、**社内BotでSlack通知させていたり**と、結構がっつり使っているのにGit管理されていないであったり、**社内の誰からもレビュー受けていない状態**になっていませんか？\n\nであるので以下のような考えを持つかたはこの記事が参考になるかと思います。\n\n- **ウェブ上でGAS**を書いたことがある人 && **プロダクトで使っている**\n- **GitHub/GitLabでコードを管理したい**、レビューしてもらいたい\n- どうせなら**npmモジュール**使ったり**ES6**とかTypescriptで書きたい（GASはES５までの構文のみ）\n\nまた自分はVue-cliとかでなんかいい感じにWebpackとかBabelがコンパイルしてくれるのでしっかり自分で定義とかしたことなかったので、そのあたりをテンプレート作成を通して学んでいきたいと思います。\n\nなので、以下のような人が読むと、Webpac筋のレベルがあがるのではないでしょうか。\n\n- Vue.js/Reactとか使っているときに**Webpackを使っているはず**だけど、設定したことない\n- **babel?トランスパイル？？**なにそれ食べれるの。\n\n## 参考にさせてもらった記事\n\n#### [Google Apps Script のモダンな開発環境を求めて](https://kenchan0130.github.io/post/2018-12-03-1)\n\nこちらの記事は2018年末におけるGAS開発のいろんなものを丁寧にまとめてくださっているので、３往復くらい読ませていただきました。\n\n#### [Google Apps Script をローカル環境で快適に開発するためのテンプレートを作りました - Qiita](https://qiita.com/howdy39/items/0e799a9bfc1d3bccf6e5)\n\n今回作ろうと思ったテンプレートの一番参考になった記事です。\n\n2018/03/28 - gas-clasp-starter という Google Apps Script を ローカル環境で開発するためのテンプレートを作りました。 2018年に登場した、google/clasp をベースに webpack, TypeScript, TSLint, Prettier, Jest を利用したテンプレートになっています。\n\n## 開発\n### グローバルに必要なパッケージ\n\n今回コードはyarnのサンプルなのでnpmでやるかたは適宜読み替えてください。\n\n```shell-session\n$ node -v\nv12.4.0\n$ npm -v\n6.9.0\n$ yarn -v\n1.16.0\n$ clasp -v\n2.1.0\n```\n\nwebpack-cliと、claspはGoogleが提供しているGAS用のSDK的なものなのでインストールとログインしておく。\n\n```shell-session\nnpm i @webpack-cli/init -g\nnpm i @google/clasp -g\nclasp login\n```\n\n### Webpack設定\n\n```\nmkdir qiita-gas-template\ncd qiita-gas-template/\n```\n\n```shell-session\nyarn add gas-webpack-plugin webpack webpack-cli @webpack-cli/init --dev\nnpx webpack-cli init\n# A name parameter is required to create a storage\n```\n\n`npx` は `./node_modules/webpack-cli/bin/cli.js` 的なパスをわざわざ叩かなくても `npx webpack-cli` だけで実行できる魔法のスクリプトです。気になるかたは調べてみて。\n\nnameエラー出るので `package.json` に `\"name\": \"qiita-gas-template\"` を追加修正します。\n\n```package.json\n{\n  \"name\": \"qiita-gas-template\", \n  \"devDependencies\": {\n```\n\nもう一度 `webpack-cli` で初期化します。\n\n```shell-session\nnpx webpack-cli init\n\nℹ INFO  For more information and a detailed description of each question, have a look at: https://github.com/webpack/webpack-cli/blob/master/INIT.md\nℹ INFO  Alternatively, run \"webpack(-cli) --help\" for usage info\n\n? Will your application have multiple bundles? No\n? Which will be your application entry point? src/index\n? In which folder do you want to store your generated bundles? dist\n? Will you use one of the below JS solutions? ES6\n? Will you use one of the below CSS solutions? No\n conflict package.json\n? Overwrite package.json? overwrite\n```\n\n選択肢は適当に必要なものを選んでください。Typescript使いたい人はここでES6じゃなくてTS\nがあるはず。\n\ninitのときいろいろハマったので、ハマった人はこのあたり読むといいかも\nhttps://github.com/webpack/webpack-cli/blob/master/INIT.md\n\n次に `package.json` を確認して、実行コマンドを確かめます。\n\n```package.json\n  \"scripts\": {\n    \"build\": \"webpack\",\n    \"start\": \"webpack-dev-server\"\n```\n\n`yarn build` でコンパイルしてくれそうですね。\n\n```shell-session\n$ yarn build\n# index.html\n# main.xxxx.js\n```\n\n`? In which folder do you want to store your generated bundles? dist` 先程 `dist` というディレクトリをコンパイル先に指定したので確認してみます。\n\n\n```shell-session\n$ tree -L 2 dist\ndist\n├── index.html\n└── main.55d8ca80f289d8387835.js\n```\n\n`index.js` が作られてほしかったのに違う感じになったので一旦削除する。\n\n```shell-session\nrm -fr dist/\n```\n\nindex.jsが作られないのでwebpackの設定を確認する。\n\n```webpack.config.js\n// html系のプラグインはいらないので\n// 代わりに最初にyarnで追加したGAS用のwebpackプラグインを入れる\nconst HtmlWebpackPlugin = require('html-webpack-plugin'); // 削除\nplugins: [new webpack.ProgressPlugin(), new HtmlWebpackPlugin()], // HtmlWebpackPluginだけ削除\n// それぞれの行を以下の用に書き換える\nconst GasWebpackPlugin = require('gas-webpack-plugin'); // 追加\nplugins: [new webpack.ProgressPlugin(), new GasWebpackPlugin()], // GasWebpackPluginを追加。\n\noutput: {\n  filename: 'index.js', // ここをindex.jsに書き換える\n  path: path.resolve(__dirname, 'dist')\n},\n```\n\n最終的には以下のような感じになっていると思う。\n\n```webpack.config.js\nconst path = require('path');\nconst webpack = require('webpack');\nconst GasWebpackPlugin = require('gas-webpack-plugin');\nmodule.exports = {\n\tmode: 'development',\n\tentry: './src/index.js',\n\n\toutput: {\n\t\tfilename: 'index.js',\n\t\tpath: path.resolve(__dirname, 'dist')\n\t},\n\n\tplugins: [new webpack.ProgressPlugin(), new GasWebpackPlugin()],\n\n```\n\nコンパイルが成功するか確認する。\n\n```shell-session\n$ yarn build\n$ tree -L 2 dist\ndist\n└── index.js\n```\n\n`dist/index.js` が作られてそうです！\n\n```src/index.js\n// dist/index.jsじゃないよ！ src/index.jsだよ！\nglobal.doGet = () => {\n  return HtmlService.createHtmlOutput(\"<h1>Getのサンプル</h1>\");\n}\n```\n\nと書き換える。\n\n```shell-session\nyarn build\n```\n\nコンパイルすると\n\n```dist/index.js\n// (いろいろ長いのでこのあたりまで省略)\neval(\"global.doGet = function () {\\n  return HtmlService.createHtmlOutput(\\\"<h1>Getのサンプル</h1>\\\");\\n};\\n\\n//# sourceURL=webpack:///./src/index.js?\");\n```\n\n`() => {}` が `function(){}` に変換されているので問題なさそうですが、全部evalの中で見にくいですね。\n\n```webpack.config.js\nentry: './src/index.js',\ndevtool: false, // ここの行を追加する\n```\n\nちょっと今回は以上の設定を追加してみます。\n\n```shell-session\nyarn build\n```\n\nwebpackのその他の記述がたくさんあるので、必要なところだけ見ると\n\n```dist/index.js\n// (略)\n\n/* WEBPACK VAR INJECTION */(function(global) {global.doGet = function () {\n  return HtmlService.createHtmlOutput(\"<h1>Getのサンプル</h1>\");\n};\n\n// (略)\n```\n\nいい感じにコンパイルされてそうですね。\n\n### GoogleAppsScriptの設定\n\n次にGASアプリ作成する。standaloneを選ぶ。\n\n```shell-session\nclasp create --rootDir dist\n# loginから求められるかも。\n# appsscript.jsonが作成される\n# https://script.google.com/d/xxxxxx/edit という文字列が出力される\n# こちらの画面からコードが編集できるようになる\n```\n\n間違えて `--rootDir dist` をつけ忘れたらclaspからpushするときにルートディレクトリをすべてpushしようとするので修正が必要です。 `.clasp.json` にrootのオプション `{\"rootDir\": \"dist\",\"scriptId\": \"xxx\"}` を追記して、 `appsscript.json` を `dist/` 以下に配置しなおします。\n\n```shell-session\n$ clasp push\n> no such file or directory, open 'dist/appsscript.json'\n```\n\n`dist/appsscript.json` がないって怒れれたので移動させる。\n\n```shell-session\nmv appsscript.json dist/appsscript.json\nclasp push\n```\n\n`clasp push` 二回目以降は `? Manifest file has been updated. Do you want to push and overwrite? Yes` って聞かれるので上書きしたげる。\n\nhttps://script.google.com/home ここから確認するか\nhttps://script.google.com/d/<.clasp.jsonのscriptIdをここにいれる>\n\nどっちかから確認してみましょう\n\n<img width=\"681\" alt=\"スクリーンショット 2019-06-22 0.38.25.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/1fdfbaa8-59ab-5dfd-3475-a793de290a35.png\">\n\nアップロードされていたらOK◎\n\n公開>ウェブアプリケーションとして導入>導入\n\n<img width=\"694\" alt=\"スクリーンショット 2019-06-22 0.32.47.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/b9071382-7331-7bda-78b3-c6febcd30464.png\">\n\nで 表示される `https://script.google.com/macros/s/xx_それっぽいコード_xx/exec` にアクセスすると。\n\n<img width=\"740\" alt=\"スクリーンショット 2019-06-22 0.38.14.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/94c73898-da1f-d737-ef83-422167c2ebf7.png\">\n\nと表示されてたらOKです！！！\n\n### テンプレート化する\n\n```shell-session\nrm .clasp.json\nrm -rf dist/\nrm -rf node_modules/\n```\n\ngitignoreを追加しとく\n\n`vim .gitignore`\n\n```.gitignore\n/node_modules\n/test/js\n/test/browsertest/js\n/test/fixtures/temp-cache-fixture\n/benchmark/js\n/benchmark/fixtures\n/examples/**/dist\n/coverage\n/dist\n.DS_Store\n*.log\n.idea\n.vscode\n.eslintcache\npackage-lock.json\n\n# 参考 https://github.com/webpack/webpack/blob/master/.gitignore\n# distも保存しないほうがいいと思うので追加\n```\n\nテンプレートを含む `gas-dev` みたいなルートディレクトリに `qiita-gas-template` をいれて、それをコピーして使い回せば完成です。\n\n```shell-session\n$ tree -L 1 \n.\n├── gas-dir\n└── qiita-gas-template\n```\n\n以降はこのディレクトリをコピペしてそのディレクトリで以下のコマンドを実行して、GASを作りまくる感じです。\n\n```shell-session\ncp -r qiita-gas-template gas-dir\ncd gas-dir\nyarn\nclasp create --rootDir dist\nyarn build\nclasp push\n// https://script.google.com/home\n```\n\n以上、テンプレート作成でした。\n\nあとはGitHub/GitLabのプライベートレポジトリとかでレビューしてもらったりいろいろやってみてください。\n\n```shell-session\n$ clasp pull                                                                                                                                           (git)-[master]\nCould not find script.\nDid you provide the correct scriptId?\nAre you logged in to the correct account with the script?\n```\n\n共同編集者（GASに権限のないアカウント）がpullしようとするとエラーがでるので、GAS画面上から共有して編集権限を与えてあげてください。\n（Git管理を至上として、 `clasp pull` は禁止にしたほうがいいと思いますが）\n\n`yarn` して `yarn deploy` をすれば、別の人も開発に加われると思います。\n\n### もっといいテンプレートを使う\n\n[Google Apps Script をローカル環境で快適に開発するためのテンプレートを作りました - Qiita](https://qiita.com/howdy39/items/0e799a9bfc1d3bccf6e5)\n\n最初の方に紹介したテンプレートのほうが出来がいいのでこちらを使うことを推奨します。\nいまWebpack周りを解説したので多分コード読めるようになっていると思います。\n\n具体的にはTypescriptを導入しているんですよね。\n\n```package.json\n  \"devDependencies\": {\n    \"@types/google-apps-script\": \"0.0.53\",\n    \"@types/jest\": \"24.0.13\",\n```\n\nなので `Logger.lo` とかまで打つと、VSCodeとかだとタイプヒンティングでGAS上で開発するときに必要なGASのAPIが表示されたり、かなりローカルの開発効率があがります。\n\n<img width=\"602\" alt=\"スクリーンショット 2019-06-22 0.53.05.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/b904422d-f8c1-08dd-1632-890c28ead199.png\">\n\n今回私が作ったテンプレートでも、以下のような感じでごにょっとpackegeとか追加してあげると、タイプヒンティング自体は動くようになるので、（たぶん、、）ちょっとやってみるといいかもしれません。howdy39さんのコードとか読んでみるといいかも。。。（力つきた。）\n\n```shell-session\nyarn add --dev typescript @types/google-apps-script ts-loader\ntouch tsconfig.json\nmv src/index.js src/index.ts\n```\n\n\n## 最後に\n\n今回はGASをローカルで開発する方法とGit管理しようぜって話と、テンプレート作ってみようぜ！って話をすべて込めてみました。最後まで読んでいただきありがとうございました！\n\n\n.\n","coediting":false,"comments_count":2,"created_at":"2019-06-24T10:24:02+09:00","group":null,"id":"9de38a012b5f3f3e81f6","likes_count":65,"private":false,"reactions_count":0,"stocks_count":52,"tags":[{"name":"JavaScript","versions":[]},{"name":"Git","versions":[]},{"name":"GoogleAppsScript","versions":[]},{"name":"webpack","versions":[]},{"name":"babel","versions":[]}],"title":"【GAS】webpackでテンプレートを作成してGit/Local開発しよう","updated_at":"2019-06-24T11:03:15+09:00","url":"https://qiita.com/ykhirao/items/9de38a012b5f3f3e81f6","user":{"description":"Web Developer For 6 years.\r\nPHP/Laravel && (React OR Vue.js)\r\nTypeScript/node.js\r\n\r\n業務委託の依頼とかはWantedlyとかからでお願いします！","facebook_id":"","followees_count":38,"followers_count":95,"github_login_name":"ykhirao","id":"ykhirao","items_count":60,"linkedin_id":"","location":"Tokyo, Japan","name":"yk","organization":"","permanent_id":112929,"profile_image_url":"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/profile-images/1639030792","team_only":false,"twitter_screen_name":"ykhirao","website_url":"https://www.wantedly.com/id/ykhirao"},"page_views_count":null,"team_membership":null}},"path":"posts/9de38a012b5f3f3e81f6"}
