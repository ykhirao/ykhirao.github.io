{"template":"__react_static_root__/src/components/QiitaPost","sharedHashesByProp":{},"data":{"post":{"rendered_body":"\n<h1>\n<span id=\"rspecのdescribeとitを自作してみる\" class=\"fragment\"></span><a href=\"#rspec%E3%81%AEdescribe%E3%81%A8it%E3%82%92%E8%87%AA%E4%BD%9C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>rspecのdescribeとitを自作してみる</h1>\n\n<h2>\n<span id=\"読書コード対象者\" class=\"fragment\"></span><a href=\"#%E8%AA%AD%E6%9B%B8%E3%82%B3%E3%83%BC%E3%83%89%E5%AF%BE%E8%B1%A1%E8%80%85\"><i class=\"fa fa-link\"></i></a>読書コード対象者</h2>\n\n<p>Rubyのコード少しでも読める方なら最後まで読了できるかと思います。</p>\n\n<ul>\n<li>Rubyの引数について詳しくなります。</li>\n<li>GrapeというAPIを簡単に作れるOSSのソースコードを少しだけ一緒に読んで行きたいと思うので毎日使っているコードが親近感でます</li>\n</ul>\n\n<p>最終的には、下記の文法が何しているかわかります。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\"><div class=\"highlight\"><pre><code><span class=\"n\">describe</span> <span class=\"s2\">\"RspecでこちらのコードがRuby内部でどういう文法で動いているか\"</span> <span class=\"k\">do</span>\n\n  <span class=\"nb\">puts</span> <span class=\"s2\">\"分かるようになります\"</span>\n\n<span class=\"k\">end</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Status</span> <span class=\"o\">&lt;</span> <span class=\"no\">Grape</span><span class=\"o\">::</span><span class=\"no\">Entity</span>\n    <span class=\"c1\"># またGrapeのこのあたりのコードにも詳しくなります</span>\n    <span class=\"n\">expose</span> <span class=\"ss\">:style</span>\n    <span class=\"n\">expose</span> <span class=\"ss\">:html</span><span class=\"p\">,</span> <span class=\"ss\">documentation: </span><span class=\"p\">{</span> <span class=\"ss\">type: </span><span class=\"no\">String</span><span class=\"p\">,</span> <span class=\"ss\">desc: </span><span class=\"s1\">'html'</span> <span class=\"p\">}</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">f</span><span class=\"o\">|</span>\n        <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">body</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>またこの <code>do end</code> や <code>{ }</code> みたいな<code>ブロック</code>と呼ばれるものへの理解が少し広がるかと思います。</p>\n\n<h2>\n<span id=\"背景\" class=\"fragment\"></span><a href=\"#%E8%83%8C%E6%99%AF\"><i class=\"fa fa-link\"></i></a>背景</h2>\n\n<p>こんにちは僕です。この話は、Vue.jsからAPIを叩こう思い、Rails側にGrapeによるAPIを作っていたことから始まります。そのときに <code>Grapeエラーでるよ〜〜あああああ〜〜</code> って思いソースコードまで追ってみたのでその時の話を順番にしていきます。（ ドキュメント見てから実装開始しろってツッコミはなしで ）</p>\n\n<h2>\n<span id=\"grapeのコードを追ってみる\" class=\"fragment\"></span><a href=\"#grape%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E8%BF%BD%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>Grapeのコードを追ってみる</h2>\n\n<h3>\n<span id=\"entityのサンプル\" class=\"fragment\"></span><a href=\"#entity%E3%81%AE%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\"><i class=\"fa fa-link\"></i></a>Entityのサンプル</h3>\n\n<p><a href=\"https://github.com/ruby-grape/grape-entity\" rel=\"nofollow noopener\" target=\"_blank\">Grape::EntityのGitHub</a></p>\n\n<div class=\"code-frame\" data-lang=\"ruby\"><div class=\"highlight\"><pre><code><span class=\"k\">class</span> <span class=\"nc\">Status</span> <span class=\"o\">&lt;</span> <span class=\"no\">Grape</span><span class=\"o\">::</span><span class=\"no\">Entity</span>\n    <span class=\"n\">expose</span> <span class=\"ss\">:style</span>\n    <span class=\"n\">expose</span> <span class=\"ss\">:html</span><span class=\"p\">,</span> <span class=\"ss\">documentation: </span><span class=\"p\">{</span> <span class=\"ss\">type: </span><span class=\"no\">String</span><span class=\"p\">,</span> <span class=\"ss\">desc: </span><span class=\"s1\">'html'</span> <span class=\"p\">}</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">f</span><span class=\"o\">|</span>\n        <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">body</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>と書いておくと</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\"><div class=\"highlight\"><pre><code><span class=\"n\">present</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"ss\">with: </span><span class=\"no\">Status</span>\n</code></pre></div></div>\n\n<p>みたいな感じでJSONの返却をぬるっとやってくれるのがGrapeです。</p>\n\n<p>今回はこの <code>expose</code> の引数に何を渡せばいいのか全くわからなかったので、そのあたりのコードを追っていきます。</p>\n\n<h3>\n<span id=\"rubyの引数の振り返り\" class=\"fragment\"></span><a href=\"#ruby%E3%81%AE%E5%BC%95%E6%95%B0%E3%81%AE%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A\"><i class=\"fa fa-link\"></i></a>Rubyの引数の振り返り</h3>\n\n<div class=\"code-frame\" data-lang=\"ruby\"><div class=\"highlight\"><pre><code>\n<span class=\"k\">def</span> <span class=\"nf\">x1</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n    <span class=\"nb\">puts</span> <span class=\"n\">text</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">x2</span> <span class=\"n\">text</span>\n    <span class=\"nb\">puts</span> <span class=\"n\">text</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">x1</span><span class=\"p\">(</span><span class=\"s2\">\"it calls x1\"</span><span class=\"p\">)</span> <span class=\"c1\"># it calls x1</span>\n<span class=\"n\">x2</span> <span class=\"s2\">\"it calls x2\"</span>  <span class=\"c1\"># it calls x2</span>\n\n</code></pre></div></div>\n\n<p>おもむろにTerminalでirbと打つとRubyが対話モードで使えるので（MacUser）上のコードは適当に自分で流し込んで試してください。！！</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>irb\n<span class=\"gp\">$</span><span class=\"w\"> </span>irb<span class=\"o\">(</span>main<span class=\"o\">)</span>:001:0&gt;\n</code></pre></div></div>\n\n<p><a href=\"https://camo.qiitausercontent.com/876982e5f3a76c4196709e9487b7c1552dde0648/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f33386235386439382d356331382d376566322d343264642d3438373132353662626135382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"634\" alt=\"スクリーンショット 2018-06-21 0.43.36.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F38b58d98-5c18-7ef2-42dd-4871256bba58.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fe89cf9c4ddd34c666f0ceb15b200683\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/38b58d98-5c18-7ef2-42dd-4871256bba58.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F38b58d98-5c18-7ef2-42dd-4871256bba58.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f5f30adb661e7be21b2d69f902b2f8d9 1x\" loading=\"lazy\"></a></p>\n\n<p>こんな感じでRubyは <code>()</code> が省略できたりします。</p>\n\n<p>参考: <a href=\"http://i.loveruby.net/ja/ruby/codingstyle.html\" rel=\"nofollow noopener\" target=\"_blank\">Ruby のコーディングスタイル</a></p>\n\n<h3>\n<span id=\"grapeの-expose-の使い方をもう一度見る\" class=\"fragment\"></span><a href=\"#grape%E3%81%AE-expose-%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9%E3%82%92%E3%82%82%E3%81%86%E4%B8%80%E5%BA%A6%E8%A6%8B%E3%82%8B\"><i class=\"fa fa-link\"></i></a>Grapeの <code>expose</code> の使い方をもう一度見る</h3>\n\n<p>前回はRubyの()の省略について学んだので次のコードも理解できるはずです。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\"><div class=\"highlight\"><pre><code><span class=\"n\">expose</span> <span class=\"ss\">:user_name</span>\n</code></pre></div></div>\n\n<p>つまり <code>expose</code> はメソッドで、引数に <code>:user_name</code> というシンボルを渡している、という風に見えて来ましたね。（間違ってたら偉い人が教えてくれるのでコメント欄参照！！）</p>\n\n<p>ここまでで、ちょっとRubyに詳しくなった気がします。</p>\n\n<p>なので次は <code>expose</code> というメソッドを見に行きます。</p>\n\n<h3>\n<span id=\"grapeの-expose-のソースコードを見る\" class=\"fragment\"></span><a href=\"#grape%E3%81%AE-expose-%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E8%A6%8B%E3%82%8B\"><i class=\"fa fa-link\"></i></a>Grapeの <code>expose</code> のソースコードを見る</h3>\n\n<p>ソースコードはこちら <a href=\"https://github.com/ruby-grape/grape-entity/blob/master/lib/grape_entity/entity.rb\" rel=\"nofollow noopener\" target=\"_blank\">lib/grape_entity/entity.rb</a></p>\n\n<div class=\"code-frame\" data-lang=\"ruby\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">expose</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">block</span><span class=\"p\">)</span>\n    <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">merge_options</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"nf\">last</span><span class=\"p\">.</span><span class=\"nf\">is_a?</span><span class=\"p\">(</span><span class=\"no\">Hash</span><span class=\"p\">)</span> <span class=\"p\">?</span> <span class=\"n\">args</span><span class=\"p\">.</span><span class=\"nf\">pop</span> <span class=\"p\">:</span> <span class=\"p\">{})</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">args</span><span class=\"p\">.</span><span class=\"nf\">size</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span>\n        <span class=\"k\">raise</span> <span class=\"no\">ArgumentError</span><span class=\"p\">,</span> <span class=\"s1\">'You may not use the :as option on multi-attribute exposures.'</span> <span class=\"k\">if</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"ss\">:as</span><span class=\"p\">]</span>\n        <span class=\"k\">raise</span> <span class=\"no\">ArgumentError</span><span class=\"p\">,</span> <span class=\"s1\">'You may not use the :expose_nil on multi-attribute exposures.'</span> <span class=\"k\">if</span> <span class=\"n\">options</span><span class=\"p\">.</span><span class=\"nf\">key?</span><span class=\"p\">(</span><span class=\"ss\">:expose_nil</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"no\">ArgumentError</span><span class=\"p\">,</span> <span class=\"s1\">'You may not use block-setting on multi-attribute exposures.'</span> <span class=\"k\">if</span> <span class=\"nb\">block_given?</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">raise</span> <span class=\"no\">ArgumentError</span><span class=\"p\">,</span> <span class=\"s1\">'You may not use block-setting when also using format_with'</span> <span class=\"k\">if</span> <span class=\"nb\">block_given?</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"ss\">:format_with</span><span class=\"p\">].</span><span class=\"nf\">respond_to?</span><span class=\"p\">(</span><span class=\"ss\">:call</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">block_given?</span>\n        <span class=\"k\">if</span> <span class=\"n\">block</span><span class=\"p\">.</span><span class=\"nf\">parameters</span><span class=\"p\">.</span><span class=\"nf\">any?</span>\n            <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"ss\">:proc</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">block</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"ss\">:nesting</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kp\">true</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"vi\">@documentation</span> <span class=\"o\">=</span> <span class=\"kp\">nil</span>\n    <span class=\"vi\">@nesting_stack</span> <span class=\"o\">||=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">args</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">attribute</span><span class=\"o\">|</span> <span class=\"n\">build_exposure_for_attribute</span><span class=\"p\">(</span><span class=\"n\">attribute</span><span class=\"p\">,</span> <span class=\"vi\">@nesting_stack</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"p\">,</span> <span class=\"n\">block</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>20行くらいなのでみんなすぐ理解できますよね（ちなみに私理解できなかったのでこの記事書きながら理解しています）</p>\n\n<h3>\n<span id=\"grapeの-expose-のソースコードを適当に理解する\" class=\"fragment\"></span><a href=\"#grape%E3%81%AE-expose-%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E9%81%A9%E5%BD%93%E3%81%AB%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>Grapeの <code>expose</code> のソースコードを適当に理解する</h3>\n\n<div class=\"code-frame\" data-lang=\"ruby\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">expose</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">block</span><span class=\"p\">)</span>\n    <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"s2\">\"引数の *args からオプションをいい感じに整形する\"</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">args</span><span class=\"p\">.</span><span class=\"nf\">size</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span>\n        <span class=\"s2\">\"問題あったらエラーだす\"</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">raise</span> <span class=\"no\">ArgumentError</span><span class=\"p\">,</span> <span class=\"s1\">'問題ないよね…？'</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">block_given?</span>\n        <span class=\"s2\">\"引数として &amp;block が渡されてるとごにょごにょ\"</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"vi\">@documentation</span> <span class=\"o\">=</span> <span class=\"kp\">nil</span>\n    <span class=\"vi\">@nesting_stack</span> <span class=\"o\">||=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">args</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">attribute</span><span class=\"o\">|</span> <span class=\"s2\">\"いい感じにゴニョゴニョしてデータ作り出す\"</span> <span class=\"p\">}</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>正直なんかよくわからないけど <code>def self.expose(*args, &amp;block)</code> これの <code>*args</code> は <code>引数はたくさん渡せるよ！</code>で、 最後の <code>&amp;block</code> は <code>引数の最後にブロック渡せるぜ！！！！</code> って意味だと思ったらいいと思います。（強引） </p>\n\n<p>※ブロックとは <code>do end</code> とか <code>{}</code> のことで、ブロックが引数として渡されたのを判定するのは Rubyの <code>block_given?</code> というメソッドが使えます。</p>\n\n<h3>\n<span id=\"grapeの-expose-の使い方をもう一度見る3度目\" class=\"fragment\"></span><a href=\"#grape%E3%81%AE-expose-%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9%E3%82%92%E3%82%82%E3%81%86%E4%B8%80%E5%BA%A6%E8%A6%8B%E3%82%8B3%E5%BA%A6%E7%9B%AE\"><i class=\"fa fa-link\"></i></a>Grapeの <code>expose</code> の使い方をもう一度見る（3度目）</h3>\n\n<p>なので、こちらももう読めるようになったはずです。。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\"><div class=\"highlight\"><pre><code><span class=\"n\">expose</span> <span class=\"ss\">:html</span><span class=\"p\">,</span> <span class=\"ss\">documentation: </span><span class=\"p\">{</span> <span class=\"ss\">type: </span><span class=\"no\">String</span><span class=\"p\">,</span> <span class=\"ss\">desc: </span><span class=\"s1\">'html'</span> <span class=\"p\">}</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">f</span><span class=\"o\">|</span>\n    <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">body</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>exposeというメソッドの引数は</p>\n\n<ol>\n<li><code>:html</code></li>\n<li><code>documentation: { type: String, desc: 'html' })</code></li>\n<li><code>do |f| f.body; end</code></li>\n</ol>\n\n<p>の３つで、最後の3つ目はブロック要素として認識されています。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">expose</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">block</span><span class=\"p\">)</span>\n    <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">merge_options</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"nf\">last</span><span class=\"p\">.</span><span class=\"nf\">is_a?</span><span class=\"p\">(</span><span class=\"no\">Hash</span><span class=\"p\">)</span> <span class=\"p\">?</span> <span class=\"n\">args</span><span class=\"p\">.</span><span class=\"nf\">pop</span> <span class=\"p\">:</span> <span class=\"p\">{})</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>そして、もう一度exposeメソッドを見ると、1と2は(*args)に入って、3のブロックは(&amp;block)に入っていくことがわかります。</p>\n\n<p><code>args.last.is_a?(Hash)</code> は <code>*args の最後がハッシュなら</code> という意味ですが、おそらくですが、この <code>*args</code> の最後には <code>documentation</code> のドキュメントをいれないとエラー起きるような気がします（今回はそこは追わない）</p>\n\n<h3>\n<span id=\"ブロックが渡されたか判断する-block\" class=\"fragment\"></span><a href=\"#%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%8C%E6%B8%A1%E3%81%95%E3%82%8C%E3%81%9F%E3%81%8B%E5%88%A4%E6%96%AD%E3%81%99%E3%82%8B-block\"><i class=\"fa fa-link\"></i></a>ブロックが渡されたか判断する (&amp;block)</h3>\n\n<p>Rubyのメソッドに<code>block_given?</code>で渡されたかチェックできます。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">expose</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">block</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">block_given?</span>\n        <span class=\"s2\">\"引数として &amp;block が渡されてるとごにょごにょ\"</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>なのでexposeには２つの書き方があります。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\"><div class=\"highlight\"><pre><code><span class=\"k\">class</span> <span class=\"nc\">Status</span> <span class=\"o\">&lt;</span> <span class=\"no\">Grape</span><span class=\"o\">::</span><span class=\"no\">Entity</span>\n    <span class=\"n\">expose</span> <span class=\"ss\">:style</span>\n    <span class=\"n\">expose</span> <span class=\"ss\">:html</span><span class=\"p\">,</span> <span class=\"ss\">documentation: </span><span class=\"p\">{</span> <span class=\"ss\">type: </span><span class=\"no\">String</span><span class=\"p\">,</span> <span class=\"ss\">desc: </span><span class=\"s1\">'html'</span> <span class=\"p\">}</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">f</span><span class=\"o\">|</span>\n        <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">body</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p><code>do; end;</code>をつける書き方、何もつけない書き方、どちらも文法的に正しくなるように <code>expose</code> は設計されています。</p>\n\n<p>普段なんとなく使っているコードをしっかり追ってみましたが、個人的にはRubyをちゃんと知らなくなんとなく使っているのはエンジニアとして成長するためにもだめだなあと思いました。</p>\n\n<p><a href=\"https://docs.ruby-lang.org/ja/latest/method/Kernel/m/block_given=3f.html\" rel=\"nofollow noopener\" target=\"_blank\">block_given? のドキュメント</a></p>\n\n<h2>\n<span id=\"rspecのコードは追わないが作ってみる\" class=\"fragment\"></span><a href=\"#rspec%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AF%E8%BF%BD%E3%82%8F%E3%81%AA%E3%81%84%E3%81%8C%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>Rspecのコードは追わないが作ってみる</h2>\n\n<h3>\n<span id=\"rspec序文\" class=\"fragment\"></span><a href=\"#rspec%E5%BA%8F%E6%96%87\"><i class=\"fa fa-link\"></i></a>Rspec序文</h3>\n\n<p>ここまでで <code>expose</code> のコードを読んでrubyの使い方への理解が深まったと思います。</p>\n\n<p>次は本題ですが Rspecの <code>describe</code> を自分で書いてみようと思います。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\"><div class=\"highlight\"><pre><code><span class=\"n\">describe</span> <span class=\"s2\">\"xxxをテストする\"</span> <span class=\"k\">do</span>\n  <span class=\"nb\">puts</span> <span class=\"s2\">\"これで合ってるかな…\"</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>ここまで読んだ読者はもうわかると思いますが、<code>describe</code> というメソッドは引数は <code>（text, block）</code> テキストとブロックだと判断がつきます。</p>\n\n<h3>\n<span id=\"rspec作成編\" class=\"fragment\"></span><a href=\"#rspec%E4%BD%9C%E6%88%90%E7%B7%A8\"><i class=\"fa fa-link\"></i></a>Rspec作成編</h3>\n\n<div class=\"code-frame\" data-lang=\"ruby\"><div class=\"highlight\"><pre><code><span class=\"c1\"># encoding: utf-8</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">block</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">block_given?</span>\n        <span class=\"n\">block</span><span class=\"p\">.</span><span class=\"nf\">call</span>\n    <span class=\"k\">else</span>\n        <span class=\"nb\">puts</span> <span class=\"n\">msg</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"nb\">puts</span> <span class=\"s2\">\"~~~~~~~~~~~~~~~~~~~~~~~~~~\"</span>\n\n<span class=\"n\">describe</span> <span class=\"s2\">\"こちらテストですよ！！！！！！\"</span>\n\n\n<span class=\"nb\">puts</span> <span class=\"s2\">\"~~~~~~~~~~~~~~~~~~~~~~~~~~\"</span>\n\n<span class=\"n\">describe</span> <span class=\"s2\">\"こちらテストです\"</span> <span class=\"k\">do</span>\n  <span class=\"nb\">puts</span> <span class=\"s2\">\"ブロック渡したらどうなるかテスト\"</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># 返ってくる値</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># ~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"c1\"># こちらテストですよ！！！！！！</span>\n<span class=\"c1\"># ~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"c1\"># ブロック渡したらどうなるかテスト</span>\n\n</code></pre></div></div>\n\n<p>今回作成した <code>describe</code> はブロックを渡したかどうかで処理を分岐させてみました。</p>\n\n<ol>\n<li>\n<p>ブロックを渡した場合</p>\n\n<ul>\n<li> <code>block_given?</code> が <code>true</code> になる</li>\n<li>\n<code>block.call</code>を実行させる</li>\n</ul>\n</li>\n<li>\n<p>ブロックを渡さない場合</p>\n\n<ul>\n<li> ただ第一引数で渡したmsgをputsするだけになります。</li>\n</ul>\n</li>\n</ol>\n\n<p><a href=\"https://paiza.io/projects/e/KB5pPxfpANaqrggZbqLTLQ\" rel=\"nofollow noopener\" target=\"_blank\">Paiza.ioでの動作サンプル</a></p>\n\n<p>ここまで自分で作れるようになったら、Rubyの引数マスターだと思います</p>\n\n<h3>\n<span id=\"blockcall\" class=\"fragment\"></span><a href=\"#blockcall\"><i class=\"fa fa-link\"></i></a>block.call</h3>\n\n<p>渡したブロックを実行させられます。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\"><div class=\"highlight\"><pre><code><span class=\"n\">block</span><span class=\"p\">.</span><span class=\"nf\">call</span>\n</code></pre></div></div>\n\n<h3>\n<span id=\"rspecのソースコードについて\" class=\"fragment\"></span><a href=\"#rspec%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>Rspecのソースコードについて</h3>\n\n<p>たぶんレポジトリは<a href=\"https://github.com/rspec/rspec-rails/\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>ですが <code>describe</code> とかどこで実装されているか正直読んでないです。分かる方は記事を書いてくれると楽しんで読みたいと思うのでコメント欄でお願いします〜〜</p>\n\n<h2>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h2>\n\n<p>自分が普段使っているソースコードを、気になったところだけでもいいので読んで見る。これだけでもOSS使ってるっぽいし（形から入る人）、ドキュメントにしっかりかかれていないこともなんとなく分かるのがすごくいいですね。（今回は <code>expose</code> の最後の引数はdocumentじゃね？って考えれたこととか）</p>\n\n<p>Ruby詳しいですとは口がさけても言えないので詳しい方PRとかコメント欄でご指導いただけると幸いです。最後まで読んでいただきありがとうございました〜！！</p>\n","body":"# rspecのdescribeとitを自作してみる\n\n## 読書コード対象者\n\nRubyのコード少しでも読める方なら最後まで読了できるかと思います。\n\n- Rubyの引数について詳しくなります。\n- GrapeというAPIを簡単に作れるOSSのソースコードを少しだけ一緒に読んで行きたいと思うので毎日使っているコードが親近感でます\n\n最終的には、下記の文法が何しているかわかります。\n\n```ruby\ndescribe \"RspecでこちらのコードがRuby内部でどういう文法で動いているか\" do\n\n  puts \"分かるようになります\"\n\nend\n\nclass Status < Grape::Entity\n    # またGrapeのこのあたりのコードにも詳しくなります\n    expose :style\n    expose :html, documentation: { type: String, desc: 'html' } do |f|\n        f.body\n    end\nend\n```\n\nまたこの `do end` や `{ }` みたいな`ブロック`と呼ばれるものへの理解が少し広がるかと思います。\n\n## 背景\n\nこんにちは僕です。この話は、Vue.jsからAPIを叩こう思い、Rails側にGrapeによるAPIを作っていたことから始まります。そのときに `Grapeエラーでるよ〜〜あああああ〜〜` って思いソースコードまで追ってみたのでその時の話を順番にしていきます。（ ドキュメント見てから実装開始しろってツッコミはなしで ）\n\n## Grapeのコードを追ってみる\n\n### Entityのサンプル\n\n[Grape::EntityのGitHub](https://github.com/ruby-grape/grape-entity)\n\n```ruby\nclass Status < Grape::Entity\n    expose :style\n    expose :html, documentation: { type: String, desc: 'html' } do |f|\n        f.body\n    end\nend\n```\n\nと書いておくと\n\n```ruby\npresent s, with: Status\n```\n\nみたいな感じでJSONの返却をぬるっとやってくれるのがGrapeです。\n\n今回はこの `expose` の引数に何を渡せばいいのか全くわからなかったので、そのあたりのコードを追っていきます。\n\n### Rubyの引数の振り返り\n\n```ruby\n\ndef x1(text)\n    puts text\nend\n\ndef x2 text\n    puts text\nend\n\nx1(\"it calls x1\") # it calls x1\nx2 \"it calls x2\"  # it calls x2\n\n```\n\nおもむろにTerminalでirbと打つとRubyが対話モードで使えるので（MacUser）上のコードは適当に自分で流し込んで試してください。！！\n\n```shell-session\n$ irb\n$ irb(main):001:0>\n```\n\n<img width=\"634\" alt=\"スクリーンショット 2018-06-21 0.43.36.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/38b58d98-5c18-7ef2-42dd-4871256bba58.png\">\n\nこんな感じでRubyは `()` が省略できたりします。\n\n参考: [Ruby のコーディングスタイル](http://i.loveruby.net/ja/ruby/codingstyle.html)\n\n### Grapeの `expose` の使い方をもう一度見る\n\n前回はRubyの()の省略について学んだので次のコードも理解できるはずです。\n\n```ruby\nexpose :user_name\n```\n\nつまり `expose` はメソッドで、引数に `:user_name` というシンボルを渡している、という風に見えて来ましたね。（間違ってたら偉い人が教えてくれるのでコメント欄参照！！）\n\nここまでで、ちょっとRubyに詳しくなった気がします。\n\nなので次は `expose` というメソッドを見に行きます。\n\n### Grapeの `expose` のソースコードを見る\n\nソースコードはこちら [lib/grape_entity/entity.rb](https://github.com/ruby-grape/grape-entity/blob/master/lib/grape_entity/entity.rb)\n\n```ruby\ndef self.expose(*args, &block)\n    options = merge_options(args.last.is_a?(Hash) ? args.pop : {})\n\n    if args.size > 1\n        raise ArgumentError, 'You may not use the :as option on multi-attribute exposures.' if options[:as]\n        raise ArgumentError, 'You may not use the :expose_nil on multi-attribute exposures.' if options.key?(:expose_nil)\n        raise ArgumentError, 'You may not use block-setting on multi-attribute exposures.' if block_given?\n    end\n\n    raise ArgumentError, 'You may not use block-setting when also using format_with' if block_given? && options[:format_with].respond_to?(:call)\n\n    if block_given?\n        if block.parameters.any?\n            options[:proc] = block\n        else\n            options[:nesting] = true\n        end\n    end\n\n    @documentation = nil\n    @nesting_stack ||= []\n    args.each { |attribute| build_exposure_for_attribute(attribute, @nesting_stack, options, block) }\nend\n```\n\n20行くらいなのでみんなすぐ理解できますよね（ちなみに私理解できなかったのでこの記事書きながら理解しています）\n\n### Grapeの `expose` のソースコードを適当に理解する\n\n```ruby\ndef self.expose(*args, &block)\n    options = \"引数の *args からオプションをいい感じに整形する\"\n\n    if args.size > 1\n        \"問題あったらエラーだす\"\n    end\n\n    raise ArgumentError, '問題ないよね…？'\n\n    if block_given?\n        \"引数として &block が渡されてるとごにょごにょ\"\n    end\n\n    @documentation = nil\n    @nesting_stack ||= []\n    args.each { |attribute| \"いい感じにゴニョゴニョしてデータ作り出す\" }\nend\n```\n\n正直なんかよくわからないけど `def self.expose(*args, &block)` これの `*args` は `引数はたくさん渡せるよ！`で、 最後の `&block` は `引数の最後にブロック渡せるぜ！！！！` って意味だと思ったらいいと思います。（強引） \n\n※ブロックとは `do end` とか `{}` のことで、ブロックが引数として渡されたのを判定するのは Rubyの `block_given?` というメソッドが使えます。\n\n### Grapeの `expose` の使い方をもう一度見る（3度目）\n\nなので、こちらももう読めるようになったはずです。。\n\n```ruby\nexpose :html, documentation: { type: String, desc: 'html' } do |f|\n    f.body\nend\n```\n\nexposeというメソッドの引数は\n\n1. `:html`\n2. `documentation: { type: String, desc: 'html' })`\n3. `do |f| f.body; end`\n\nの３つで、最後の3つ目はブロック要素として認識されています。\n\n\n```ruby\ndef self.expose(*args, &block)\n    options = merge_options(args.last.is_a?(Hash) ? args.pop : {})\nend\n```\n\nそして、もう一度exposeメソッドを見ると、1と2は(*args)に入って、3のブロックは(&block)に入っていくことがわかります。\n\n`args.last.is_a?(Hash)` は `*args の最後がハッシュなら` という意味ですが、おそらくですが、この `*args` の最後には `documentation` のドキュメントをいれないとエラー起きるような気がします（今回はそこは追わない）\n\n### ブロックが渡されたか判断する (&block)\n\nRubyのメソッドに`block_given?`で渡されたかチェックできます。\n\n```ruby\ndef self.expose(*args, &block)\n    if block_given?\n        \"引数として &block が渡されてるとごにょごにょ\"\n    end\nend\n```\n\nなのでexposeには２つの書き方があります。\n\n```ruby\nclass Status < Grape::Entity\n    expose :style\n    expose :html, documentation: { type: String, desc: 'html' } do |f|\n        f.body\n    end\nend\n```\n\n`do; end;`をつける書き方、何もつけない書き方、どちらも文法的に正しくなるように `expose` は設計されています。\n\n普段なんとなく使っているコードをしっかり追ってみましたが、個人的にはRubyをちゃんと知らなくなんとなく使っているのはエンジニアとして成長するためにもだめだなあと思いました。\n\n[block_given? のドキュメント](https://docs.ruby-lang.org/ja/latest/method/Kernel/m/block_given=3f.html)\n\n\n## Rspecのコードは追わないが作ってみる\n\n### Rspec序文\n\nここまでで `expose` のコードを読んでrubyの使い方への理解が深まったと思います。\n\n次は本題ですが Rspecの `describe` を自分で書いてみようと思います。\n\n```ruby\ndescribe \"xxxをテストする\" do\n  puts \"これで合ってるかな…\"\nend\n```\n\nここまで読んだ読者はもうわかると思いますが、`describe` というメソッドは引数は `（text, block）` テキストとブロックだと判断がつきます。\n\n### Rspec作成編\n\n```ruby\n# encoding: utf-8\n\ndef describe(msg, &block)\n    if block_given?\n        block.call\n    else\n        puts msg\n    end\nend\n\nputs \"~~~~~~~~~~~~~~~~~~~~~~~~~~\"\n\ndescribe \"こちらテストですよ！！！！！！\"\n\n\nputs \"~~~~~~~~~~~~~~~~~~~~~~~~~~\"\n\ndescribe \"こちらテストです\" do\n  puts \"ブロック渡したらどうなるかテスト\"\nend\n\n# 返ってくる値\n#\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~\n# こちらテストですよ！！！！！！\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~\n# ブロック渡したらどうなるかテスト\n\n```\n\n今回作成した `describe` はブロックを渡したかどうかで処理を分岐させてみました。\n\n1. ブロックを渡した場合\n    -  `block_given?` が `true` になる\n    - `block.call`を実行させる\n\n2.  ブロックを渡さない場合\n    -  ただ第一引数で渡したmsgをputsするだけになります。\n\n[Paiza.ioでの動作サンプル](https://paiza.io/projects/e/KB5pPxfpANaqrggZbqLTLQ)\n\nここまで自分で作れるようになったら、Rubyの引数マスターだと思います\n\n### block.call\n\n渡したブロックを実行させられます。\n\n```ruby\nblock.call\n```\n\n### Rspecのソースコードについて\n\nたぶんレポジトリは[こちら](https://github.com/rspec/rspec-rails/)ですが `describe` とかどこで実装されているか正直読んでないです。分かる方は記事を書いてくれると楽しんで読みたいと思うのでコメント欄でお願いします〜〜\n\n## 最後に\n\n自分が普段使っているソースコードを、気になったところだけでもいいので読んで見る。これだけでもOSS使ってるっぽいし（形から入る人）、ドキュメントにしっかりかかれていないこともなんとなく分かるのがすごくいいですね。（今回は `expose` の最後の引数はdocumentじゃね？って考えれたこととか）\n\nRuby詳しいですとは口がさけても言えないので詳しい方PRとかコメント欄でご指導いただけると幸いです。最後まで読んでいただきありがとうございました〜！！\n","coediting":false,"comments_count":2,"created_at":"2018-06-21T09:57:25+09:00","group":null,"id":"b13334dc90df2e2c8c14","likes_count":4,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"Ruby","versions":[]},{"name":"Rails","versions":[]}],"title":"rspecのdescribeとitを自作する / ついでにGrapeのexposeのソースコードを読む","updated_at":"2019-03-23T13:35:08+09:00","url":"https://qiita.com/ykhirao/items/b13334dc90df2e2c8c14","user":{"description":"Web Developer From 2016.\r\nPHP/Laravel && React/TypeScript/Node.js\r\n\r\n業務委託の依頼とかはWantedlyとかからでお願いします！","facebook_id":"","followees_count":38,"followers_count":98,"github_login_name":"ykhirao","id":"ykhirao","items_count":68,"linkedin_id":"","location":"Tokyo, Japan","name":"yk","organization":"","permanent_id":112929,"profile_image_url":"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/profile-images/1639030792","team_only":false,"twitter_screen_name":"ykhirao","website_url":"https://www.wantedly.com/id/ykhirao"},"page_views_count":null,"team_membership":null,"organization_url_name":null}},"path":"posts/b13334dc90df2e2c8c14"}
