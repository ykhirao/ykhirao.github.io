{"template":"__react_static_root__/src/components/QiitaPost","sharedHashesByProp":{},"data":{"post":{"rendered_body":"\n<h1>\n<span id=\"vuejsのコンポーネント開発をtddでやってみる\" class=\"fragment\"></span><a href=\"#vuejs%E3%81%AE%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E9%96%8B%E7%99%BA%E3%82%92tdd%E3%81%A7%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>Vue.jsのコンポーネント開発をTDDでやってみる</h1>\n\n<p>※ TDD (test-driven development): テスト駆動開発<br>\n※ テスト駆動開発は文化です。チームの「状況」「納期」「スキルレベル」、その他いろんな要因が絡んできた結果、そのチームが導入するかどうか決めたらいいと思います。<br>\n※ 例えがいいかはわかりませんが、私は「早起き」と「テスト」は同じようなものだと思っています。「早起き」は健康にいいよねって誰でも言うと思うけど、実際に万人がやっているかどうかは別じゃないですか。それと同じで「テストすること」も絶対いいことだと私は思っていますが、やるかどうかはチームの置かれている状況によって決まります。この記事は、その「テストを導入するかどうか」という意思決定の一助にでもなれればいいなと思います。</p>\n\n<h2>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n\n<p>こんにちは。ぼくです。</p>\n\n<p>今回はVue.jsでTODOアプリを作ってみようと思います。その時の条件は</p>\n\n<ul>\n<li>TDDで開発して、</li>\n<li>ブラウザは最後まで見ない</li>\n</ul>\n\n<p>です。普通にチュートリアルな感じなので、ざっくりコード眺めていけるかと思いますし、スクショ多めでいくので、自分でやらなくてもなんとなく追体験ができるようにしています。よかったら自分でもやってみてください。</p>\n\n<p>またテストが分かるかたは、このTodoアプリを参考に、ハンズオンとか開いてくれたりするとうれしかったりします。Vue-meetupでもテストを書いている割合が圧倒的に少なかったので、テストユーザー増やしていきましょう〜〜</p>\n\n<h2>\n<span id=\"コンポーネント作成\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>コンポーネント作成</h2>\n\n<h3>\n<span id=\"目標物の確認\" class=\"fragment\"></span><a href=\"#%E7%9B%AE%E6%A8%99%E7%89%A9%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>目標物の確認</h3>\n\n<p>今回作成するものは<a href=\"https://jp.vuejs.org/v2/examples/todomvc.html\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>の TODOアプリ です。</p>\n\n<p>いろんなフレームワークでTODOアプリのサンプルは<a href=\"http://todomvc.com/\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>をみるとたくさん載っていて、</p>\n\n<ul>\n<li>Backbone.js</li>\n<li>AngularJS</li>\n<li>Ember.js</li>\n<li>KnockoutJS</li>\n<li>( etc )</li>\n</ul>\n\n<p>などたくさんサンプルがあるので、フレームワーク選定の時にお使いください。</p>\n\n<h3>\n<span id=\"目標物の設計を分解して考える\" class=\"fragment\"></span><a href=\"#%E7%9B%AE%E6%A8%99%E7%89%A9%E3%81%AE%E8%A8%AD%E8%A8%88%E3%82%92%E5%88%86%E8%A7%A3%E3%81%97%E3%81%A6%E8%80%83%E3%81%88%E3%82%8B\"><i class=\"fa fa-link\"></i></a>目標物の設計を分解して考える</h3>\n\n<p>責務の分解をします。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/85bff57e445fdd85820e41f62824b2d8e9d635d2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f35653663666432662d633939642d333561612d623634302d3934336661386462323062342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"643\" alt=\"スクリーンショット 2018-06-24 0.21.35のコピー.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F5e6cfd2f-c99d-35aa-b640-943fa8db20b4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fb618036a0a93311d8198fded5d469d1\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/5e6cfd2f-c99d-35aa-b640-943fa8db20b4.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F5e6cfd2f-c99d-35aa-b640-943fa8db20b4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6bf0647e09ae0b7d4556edb007a722b2 1x\" loading=\"lazy\"></a></p>\n\n<p>今回は、コンポーネント構成を以下のようにする。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>- TodoContainer.vue\n    - NewTodo.vue\n    - TodoItem.vue\n</code></pre></div></div>\n\n<ul>\n<li>TodoContainer.vue\n\n<ul>\n<li>todoのリストを管理するコンポーネント</li>\n</ul>\n</li>\n<li>NewTodo.vue\n\n<ul>\n<li>新しいTodoリストのテキストを親のコンポーネントにemitする</li>\n</ul>\n</li>\n<li>TodoItem.vue\n\n<ul>\n<li>親のコンポーネントからtodoリストのpropsをもらってレンダリングする</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"環境構築\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89\"><i class=\"fa fa-link\"></i></a>環境構築</h3>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>vue <span class=\"nt\">-v</span>\n<span class=\"go\">3\n</span><span class=\"gp\">$</span><span class=\"w\"> </span>vue create vue-todo\n<span class=\"go\">1. manually select features\n2. ---\n◉ Babel\n◉ Unit Testing\n3. Jest\n4. In package.json(どっちでもいい)\n5. N\n6. yarn\n</span></code></pre></div></div>\n\n<p>もしくは</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>git clone git@github.com:ykhirao/vue-todos.git\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd </span>vue-todos\n<span class=\"gp\">$</span><span class=\"w\"> </span>git checkout 9b2b09d5081 <span class=\"nt\">-b</span> practice\n</code></pre></div></div>\n\n<p>ではじめのコミットを<code>checkout</code>してやってください。</p>\n\n<h3>\n<span id=\"入力から作ってみる-newtodovue\" class=\"fragment\"></span><a href=\"#%E5%85%A5%E5%8A%9B%E3%81%8B%E3%82%89%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B-newtodovue\"><i class=\"fa fa-link\"></i></a>入力から作ってみる NewTodo.vue</h3>\n\n<p>ここのインプットフォームから作っていきたいと思いますが、このコンポーネントは</p>\n\n<ul>\n<li>v-modelでinputのデータを管理する</li>\n<li>エンターが押されると親コンポーネントにそのテキストをemitする</li>\n</ul>\n\n<p>という責務にしましょう。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/29c1a81a0690034c921d005ac7ac6cc1c0bec449/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f65633835316439362d633164622d303333622d653839632d3563363135373732623531352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"648\" alt=\"スクリーンショット 2018-06-24 0.51.29.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fec851d96-c1db-033b-e89c-5c615772b515.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=402460f2eacac3bf22b9137c2942bcaa\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/ec851d96-c1db-033b-e89c-5c615772b515.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fec851d96-c1db-033b-e89c-5c615772b515.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a19c90c9d91541191b25d355c0147b7f 1x\" loading=\"lazy\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">touch </span>src/components/NewTodo.vue\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">touch </span>tests/unit/NewTodo.spec.js\n</code></pre></div></div>\n\n<ol>\n<li>期待する結果をexpectで書く\n\n<ul>\n<li>今回はインプットタグがレンダーされているかだけを検証する</li>\n<li>基本的にコンポーネントは <code>wrapper</code> という変数にshallowMountでラップする </li>\n<li>イコール文: expect(1).toBe(1)</li>\n<li>これが基本の形なので覚えてください。</li>\n</ul>\n</li>\n</ol>\n\n<p>shallowMount のAPIは<a href=\"https://vue-test-utils.vuejs.org/ja/api/shallowMount.html\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a></p>\n\n<p>他にも <code>mount</code> というものでラップできるけど、弊社だと基本的には早いから <code>shallowMount</code> を使います。 またstubを作りまくれば<code>shallowMount</code>だけでもかけますが、 <code>mount</code>を使ったほうが楽になるパターンもあったり結構深いテーマなので、両者の使い分けは後日Qiitaに書きます！！！</p>\n\n<h4>\n<span id=\"テスト1-単純なレンダリングテストを書いて適切なhtml構造を作る\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%881-%E5%8D%98%E7%B4%94%E3%81%AA%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E6%9B%B8%E3%81%84%E3%81%A6%E9%81%A9%E5%88%87%E3%81%AAhtml%E6%A7%8B%E9%80%A0%E3%82%92%E4%BD%9C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>テスト1 単純なレンダリングテストを書いて、適切なhtml構造を作る</h4>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">NewTodo.spec.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">shallowMount</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@vue/test-utils</span><span class=\"dl\">'</span>\n<span class=\"k\">import</span> <span class=\"nx\">NewTodo</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@/components/NewTodo.vue</span><span class=\"dl\">\"</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">NewTodo.vue</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">インプットタグをレンダリングする</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">shallowMount</span><span class=\"p\">(</span><span class=\"nx\">NewTodo</span><span class=\"p\">)</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">input.new</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">exists</span><span class=\"p\">()).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n</div>\n\n<p>テストコードを簡単に説明すると <code>newってclassがついたinputタグが存在する？</code> ってテストです。</p>\n\n<ul>\n<li>\n<code>find = document.querySelector</code> みたいなものです。 <a href=\"https://vue-test-utils.vuejs.org/ja/api/#%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF\" rel=\"nofollow noopener\" target=\"_blank\">find api</a>\n</li>\n<li>\n<a href=\"https://vue-test-utils.vuejs.org/ja/api/wrapper/exists.html\" rel=\"nofollow noopener\" target=\"_blank\">exists api</a> 存在するか</li>\n<li>toBe(true) 判定式</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/eeb27250e6d25ee2ada2a4d7123e0379459719bf/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f63623735653133662d336530382d336330622d323134662d3931663033653966323162642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"1677\" alt=\"スクリーンショット 2018-06-24 1.13.32.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fcb75e13f-3e08-3c0b-214f-91f03e9f21bd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6d321320c97667c548c6104d6ce3613f\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/cb75e13f-3e08-3c0b-214f-91f03e9f21bd.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fcb75e13f-3e08-3c0b-214f-91f03e9f21bd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ce876aeb6bef236f782bc1190cfb46da 1x\" loading=\"lazy\"></a></p>\n\n<p>エラー文はこちら。</p>\n\n<blockquote>\n<p>[Vue warn]: Failed to mount component: template or render function not defined.</p>\n</blockquote>\n\n<p>そもそもテンプレートがないみたいなので作りにいきましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">src/components/NewTodo.vue</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>test<span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n</code></pre></div>\n</div>\n\n<p>次はマウントコンポーネントのエラーが無くなり単純な失敗みたいです。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/18f131b9a3d4a079d07db6500a32fda26fcbbd7f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f34636161336234352d303633312d396430342d396631332d6561376665633439623661652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"513\" alt=\"スクリーンショット 2018-06-24 1.16.55.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F4caa3b45-0631-9d04-9f13-ea7fec49b6ae.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5edea5c8c724f888f23c4a1d6c1f763e\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/4caa3b45-0631-9d04-9f13-ea7fec49b6ae.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F4caa3b45-0631-9d04-9f13-ea7fec49b6ae.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7fa8d34e0e55502dcbf4de341be7051d 1x\" loading=\"lazy\"></a></p>\n\n<p>次は <code>&lt;input&gt;</code> を作ってみましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">src/components/NewTodo.vue</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">class=</span><span class=\"s\">\"new\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n</code></pre></div>\n</div>\n\n<p><a href=\"https://camo.qiitausercontent.com/76114c919c0a9576c1448ded8644244873a42bea/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f37393239656164372d393063662d333261662d323132612d3933643338323534626438632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"401\" alt=\"スクリーンショット 2018-06-24 1.18.03.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F7929ead7-90cf-32af-212a-93d38254bd8c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=170434e04b90135f3b7b6082a06359b5\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/7929ead7-90cf-32af-212a-93d38254bd8c.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F7929ead7-90cf-32af-212a-93d38254bd8c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=12e5db882c54b132af47453113bacaa8 1x\" loading=\"lazy\"></a></p>\n\n<p>パスしました！！！！</p>\n\n<h4>\n<span id=\"テスト2-clickイベントを拾い新しいタグをemitする\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%882-click%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%82%92%E6%8B%BE%E3%81%84%E6%96%B0%E3%81%97%E3%81%84%E3%82%BF%E3%82%B0%E3%82%92emit%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>テスト2 clickイベントを拾い、新しいタグをemitする</h4>\n\n<p>とりあえずクリックイベントを発火させて、emitも検知できればいいかなと思います。</p>\n\n<p>この段階で作り始めたときはしっかり設計できてなかった、以下のことを再定義します</p>\n\n<ul>\n<li>.vueファイルのdataに { text: \"text\" } というオブジェクトを持たせる</li>\n<li>それを <code>createTodo</code>という名前でemitします。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">NewTodo.spec.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">新しいタグをemitする</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">text</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">text</span><span class=\"dl\">\"</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">shallowMount</span><span class=\"p\">(</span><span class=\"nx\">NewTodo</span><span class=\"p\">)</span>\n\n  <span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">setData</span><span class=\"p\">({</span><span class=\"nx\">text</span><span class=\"p\">})</span>\n  <span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.new</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">keyup.enter</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n\n  <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">emitted</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">createTodo</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">text</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n</div>\n\n<p>今回は、 <code>shallowMount</code> でコンポーネントをラップして、 <code>find</code> でinputタグを見つけ出し、 <code>trigger</code> でイベントを発火させて、本当にemitするかどうかというテストになります。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>yarn <span class=\"nb\">test</span> <span class=\"nt\">--watch</span>\n</code></pre></div></div>\n\n<p>うーんテストが失敗しています。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/dee27d4bd446d7a3a1b8bc19d6f85332c0c28ace/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f61663137643166652d386361622d323339632d353135322d3664663631653839316466312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"654\" alt=\"スクリーンショット 2018-06-25 0.07.31.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Faf17d1fe-8cab-239c-5152-6df61e891df1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5d8f7854148fb8897b733a06678c71b9\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/af17d1fe-8cab-239c-5152-6df61e891df1.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Faf17d1fe-8cab-239c-5152-6df61e891df1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=95099f153fc6b757bad7cd0d0edb57bd 1x\" loading=\"lazy\"></a></p>\n\n<p>たぶん<code>createTodo</code>がemitされていませんね！作りにいきましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">src/components/NewTodo.vue</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;input</span>\n      <span class=\"na\">class=</span><span class=\"s\">\"new\"</span>\n      <span class=\"err\">@</span><span class=\"na\">keyup.enter=</span><span class=\"s\">\"submit\"</span>\n    <span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n\n<span class=\"nt\">&lt;</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n   <span class=\"na\">methods</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">submit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$emit</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">createTodo</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">ここにsubmitされるテキストが入るよ！</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span> \n<span class=\"p\">}</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n</code></pre></div>\n</div>\n\n<p>こんな感じで <code>input</code> に <code>keyup.enter</code> エンターイベントが発火したときに <code>submit</code> というメソッドが呼ばれるように修正しました。このときのテストを以下のように修正して <code>wrapper.emitted(\"createTodo\")</code> がどういう値になるか見てみましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">NewTodo.spec.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">新しいタグをemitする</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">text</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">text</span><span class=\"dl\">\"</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">shallowMount</span><span class=\"p\">(</span><span class=\"nx\">NewTodo</span><span class=\"p\">)</span>\n\n  <span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">setData</span><span class=\"p\">({</span><span class=\"nx\">text</span><span class=\"p\">})</span>\n  <span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.new</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">keyup.enter</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">emitted</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">createTodo</span><span class=\"dl\">\"</span><span class=\"p\">))</span>\n  <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">emitted</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">createTodo</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">text</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">console.log tests/unit/NewTodo.spec.js:18\n  [ [ 'ここにsubmitれるテキストが入るよ！' ] ]\n</span></code></pre></div></div>\n\n<p>これで <code>wrapper.emitted(\"createTodo\")[0][0]</code> に emitされるテキストが入ることがわかりました。のでテストを修正します。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">NewTodo.spec.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">新しいタグをemitする</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">text</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">text</span><span class=\"dl\">\"</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">shallowMount</span><span class=\"p\">(</span><span class=\"nx\">NewTodo</span><span class=\"p\">)</span>\n\n  <span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">setData</span><span class=\"p\">({</span><span class=\"nx\">text</span><span class=\"p\">})</span>\n  <span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.new</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">keyup.enter</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n\n  <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">emitted</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">createTodo</span><span class=\"dl\">\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">text</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n</div>\n\n<p>また２つのエラーがでてきました。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/037b92d50bbad198889e4d873a6cd1edb0ee0458/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f32613830376634642d636330332d373931322d336234392d3666346661376362326335632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"991\" alt=\"スクリーンショット 2018-06-25 0.17.58.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F2a807f4d-cc03-7912-3b49-6f4fa7cb2c5c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7cbe05cc844d7f1928dea80890610f6b\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/2a807f4d-cc03-7912-3b49-6f4fa7cb2c5c.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F2a807f4d-cc03-7912-3b49-6f4fa7cb2c5c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=be65c595b295a8d292fef866fc6e953e 1x\" loading=\"lazy\"></a></p>\n\n<p>2つのエラーは</p>\n\n<ul>\n<li>単純にexpect().toBe() が失敗していますが、これは後に解決させます。</li>\n<li>もう一つは <code>wrapper.setData({text})</code> というところでコンポーネントにdataを定義していないので怒られていると思われます。作りにいきましょう。 <a href=\"https://vue-test-utils.vuejs.org/ja/api/wrapper-array/#setdata-data\" rel=\"nofollow noopener\" target=\"_blank\">setData api</a>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">src/components/NewTodo.vue</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;input</span>\n      <span class=\"na\">class=</span><span class=\"s\">\"new\"</span>\n      <span class=\"na\">v-model=</span><span class=\"s\">\"text\"</span> <span class=\"err\">//</span> <span class=\"err\">1.</span> <span class=\"na\">ここ追加</span><span class=\"err\">！！</span>\n      <span class=\"err\">@</span><span class=\"na\">keyup.enter=</span><span class=\"s\">\"submit\"</span>\n    <span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n\n<span class=\"nt\">&lt;</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"nx\">data</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"c1\">// 2. ここ追加！！</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"dl\">\"\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n   <span class=\"na\">methods</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">submit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$emit</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">createTodo</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">)</span> <span class=\"c1\">// 3. ここ追加！！</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span> \n<span class=\"p\">}</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n</code></pre></div>\n</div>\n\n<p>修正箇所は3箇所です。</p>\n\n<ol>\n<li>v-modelに dataのtextをいれた</li>\n<li>.vueファイルにdata関数をもたせた</li>\n<li>emitの第二引数に textのデータをもたせた。</li>\n</ol>\n\n<p>以上！！</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/b24e00e655e08edb774c71fc2a4ddfb68bf9a722/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f38353734656464322d386361382d303537312d613035642d6435393732373839383963622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"379\" alt=\"スクリーンショット 2018-06-25 0.24.15.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F8574edd2-8ca8-0571-a05d-d597278989cb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=950a7e96ce91d728a709e8c302ebd972\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/8574edd2-8ca8-0571-a05d-d597278989cb.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F8574edd2-8ca8-0571-a05d-d597278989cb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=39599e99fc0bb6455566b28d42e1a40d 1x\" loading=\"lazy\"></a></p>\n\n<p>テストがパスしました〜！！！！！</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>yarn <span class=\"nb\">test</span> <span class=\"nt\">--watch</span>\n</code></pre></div></div>\n\n<p>こちらはgitで差分があるファイルだけホッとリロードでテストしてくれるので、完成したこのコンポーネントはもうコミットしておきます。</p>\n\n<h3>\n<span id=\"コンテイナーを作る\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%B3%E3%83%86%E3%82%A4%E3%83%8A%E3%83%BC%E3%82%92%E4%BD%9C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>コンテイナーを作る</h3>\n\n<p>再度こちらの図になります。今回は <code>TodoContainer.vue</code> を作っていきます。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/85bff57e445fdd85820e41f62824b2d8e9d635d2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f35653663666432662d633939642d333561612d623634302d3934336661386462323062342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"643\" alt=\"スクリーンショット 2018-06-24 0.21.35のコピー.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F5e6cfd2f-c99d-35aa-b640-943fa8db20b4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fb618036a0a93311d8198fded5d469d1\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/5e6cfd2f-c99d-35aa-b640-943fa8db20b4.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F5e6cfd2f-c99d-35aa-b640-943fa8db20b4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6bf0647e09ae0b7d4556edb007a722b2 1x\" loading=\"lazy\"></a></p>\n\n<p>まずはテストから。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">touch </span>tests/unit/TodoContainer.spec.js\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">touch </span>src/components/TodoContainer.vue\n</code></pre></div></div>\n\n<p>よし！！次のテストは <code>TodoContainer.vue</code> をレンダーしたら <code>NewTodo.vue</code> もレンダーされるかチェックしようではないか。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">tests/unit/TodoContainer.spec.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">shallowMount</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@vue/test-utils</span><span class=\"dl\">'</span>\n<span class=\"k\">import</span> <span class=\"nx\">TodoContainer</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@/components/TodoContainer.vue</span><span class=\"dl\">\"</span>\n<span class=\"k\">import</span> <span class=\"nx\">NewTodo</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@/components/NewTodo.vue</span><span class=\"dl\">\"</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">TodoContainer.vue</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">formをレンダー</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">shallowMount</span><span class=\"p\">(</span><span class=\"nx\">TodoContainer</span><span class=\"p\">)</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"nx\">NewTodo</span><span class=\"p\">).</span><span class=\"nx\">exists</span><span class=\"p\">()).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n</div>\n\n<p>ポイントは <code>find(NewTodo)</code> でVueコンポーネントを簡単に探せるところです。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/c9f59128f7adf55ffcb8ba03bc7c1a4e502bb7a3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f36636633303932322d656366342d373337352d643338332d3236383766663239353030632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"616\" alt=\"スクリーンショット 2018-06-25 0.40.06.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F6cf30922-ecf4-7375-d383-2687ff29500c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a0a36d30763956267afa57f1083199a3\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/6cf30922-ecf4-7375-d383-2687ff29500c.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F6cf30922-ecf4-7375-d383-2687ff29500c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ad495cc68eac452813c586aa85d9f2c1 1x\" loading=\"lazy\"></a></p>\n\n<p>もちろん失敗します〜〜のでエラーを見て直して行きましょう。先程みたやつですね！！テンプレートないよってやつです。</p>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">src/components/TodoContainer.vue</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n</code></pre></div>\n</div>\n\n<p>ん？なんかこれだけでもテストがパスしちゃいました。。。とりあえず進めると</p>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">src/components/TodoContainer.vue</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;NewTodo&gt;&lt;/NewTodo&gt;</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n</code></pre></div>\n</div>\n\n<p><code>コンポーネント登録しろよ〜〜</code> って感じで怒られました。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/2d0170d88922d5f43e17c15de2139c89eb9381e4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f64333732303637322d363430332d386138622d633663632d6432636430353032326239352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"662\" alt=\"スクリーンショット 2018-06-25 0.47.53.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fd3720672-6403-8a8b-c6cc-d2cd05022b95.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0fd575f009476558bf47cb1e08b685aa\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/d3720672-6403-8a8b-c6cc-d2cd05022b95.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fd3720672-6403-8a8b-c6cc-d2cd05022b95.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f4aa6d9322ee0480a9f31b7812eda492 1x\" loading=\"lazy\"></a></p>\n\n<p>コンポーネントをインポートして登録します。</p>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">src/components/TodoContainer.vue</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;NewTodo&gt;&lt;/NewTodo&gt;</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n<span class=\"k\">import</span> <span class=\"nx\">NewTodo</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@/components/NewTodo.vue</span><span class=\"dl\">\"</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"na\">components</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">NewTodo</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n\n</code></pre></div>\n</div>\n\n<p>はい完了。</p>\n\n<p><code>For recursive components, make sure to provide the \"name\" option.</code>が気になったので、ちょっと <code>NewTodo.vue</code>に戻って</p>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">NewTodo.vue</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">new-todo</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"c1\">// こちら追加</span>\n  <span class=\"nx\">data</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"dl\">\"\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n</code></pre></div>\n</div>\n\n<p>に戻って<code>nameオプションつけろ</code> って感じで怒られましたところを追加しました。</p>\n\n<p>そうすると</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">tests/unit/TodoContainer.spec.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"nx\">NewTodo</span><span class=\"p\">).</span><span class=\"nx\">exists</span><span class=\"p\">()).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n</code></pre></div>\n</div>\n\n<p>がきちんと働くようになってコンポーネントを見つけ出してくれるみたいです。 nameオプションは必ずつけましょう。またnameオプションは <code>ケバブ-ケース</code> にすることとVueがいい感じに解釈してくれます。 html5では要素の大文字と小文字区別しないから <code>&lt;NewTodo&gt;</code> と  とかが同じと解釈されるので、そのあたりのことを丸めるための処理。（かな）</p>\n\n<p>次は子コンポーネントからemitされた値を [ todos ]というデータに追加するところを作ろうかと思います。テストでまた新しい概念が追加されるので頑張って覚えてください。むしろ覚えようとせずに「ふ〜〜んそんなものあるんだ〜〜」くらいがいいかもです。</p>\n\n<p>今回やること</p>\n\n<ul>\n<li>\n<code>createTodo</code> としてemitされた<code>text</code> を<code>addTodo</code> というメソッドで追加する</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">tests/unit/TodoContainer.spec.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"nx\">TodoContainer</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@/components/TodoContainer.vue</span><span class=\"dl\">\"</span>\n\n<span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">todoを追加する</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">localThis</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">todos</span><span class=\"p\">:</span> <span class=\"p\">[]</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">TodoContainer</span><span class=\"p\">.</span><span class=\"nx\">methods</span><span class=\"p\">.</span><span class=\"nx\">addTodo</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">localThis</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">text</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n\n  <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">localThis</span><span class=\"p\">.</span><span class=\"nx\">todos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]).</span><span class=\"nx\">toEqual</span><span class=\"p\">({</span>\n    <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">text</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">checked</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n</div>\n\n<p>今回は <code>localThis</code> という概念がでてきます。後 <code>call</code> めっちゃ重要な概念だから <del>調べて</del> 簡単に書きます。</p>\n\n<p><code>import TodoContainer</code> インポートしたコンポーネントは <code>TodoContainer.methods.addTodo</code> という形でコンポーネントメソッドを使うことができます。</p>\n\n<p>ただこのときコンポーネントメソッドの <code>this.todos</code> が呼び出す文脈によって変わります。これを解消するのが <code>call</code> です。それでは見ていきましょう。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/e831d085624c5a5da854e69f00c6c1fd4ea46fd2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f37373230383237622d316538662d393431342d303234302d3334646661666639356365392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"500\" alt=\"スクリーンショット 2018-06-25 1.13.55.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F7720827b-1e8f-9414-0240-34dfaff95ce9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3e0df3f0b59332c0bce6386a5edc9b07\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/7720827b-1e8f-9414-0240-34dfaff95ce9.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F7720827b-1e8f-9414-0240-34dfaff95ce9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1d811e0c966431da05f774be6a41c1e7 1x\" loading=\"lazy\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">chrome's.console.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kd\">function</span> <span class=\"nx\">getText</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">const</span> <span class=\"nx\">localThis</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">localThisのテスト</span><span class=\"dl\">\"</span><span class=\"p\">}</span>\n\n<span class=\"nx\">getText</span><span class=\"p\">()</span>\n\n<span class=\"nx\">getText</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">localThis</span><span class=\"p\">)</span>\n</code></pre></div>\n</div>\n\n<p><code>call</code> に引数を渡すことで擬似的に <code>this</code> を書き換えことができます。</p>\n\n<p>ちなみに</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">chrome's.console.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kd\">function</span> <span class=\"nx\">getText</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">const</span> <span class=\"nx\">localThis</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">localThisのテスト</span><span class=\"dl\">\"</span><span class=\"p\">}</span>\n\n<span class=\"nx\">getText</span><span class=\"p\">()</span>\n\n<span class=\"nx\">getText</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">localThis</span><span class=\"p\">)</span>\n</code></pre></div>\n</div>\n\n<p>chromeの開発者ツールでの <code>this</code> は <code>window</code> になります。今回は <code>spec.js</code> ではchromeは使わないのでまた別の <code>this</code> になることでしょう。node?</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/d3b691b180a305aae50e42b33c238d175aae4542/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f39616330356666332d383138342d616366642d326231372d3537623333353733366231622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"525\" alt=\"スクリーンショット 2018-06-25 1.16.42.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F9ac05ff3-8184-acfd-2b17-57b335736b1b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=005348616319850a194d5c78e878a837\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/9ac05ff3-8184-acfd-2b17-57b335736b1b.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F9ac05ff3-8184-acfd-2b17-57b335736b1b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=581656d7acae56d3c9a30b61b719ff1d 1x\" loading=\"lazy\"></a></p>\n\n<p>テストに戻ります</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>expect(localThis.todos[0]).toEqual({})\n</code></pre></div></div>\n\n<p>オブジェクトの検証は<code>toEqual</code>を使います。</p>\n\n<ul>\n<li><code>toBe ===</code></li>\n<li>\n<code>toEqual ==</code> </li>\n</ul>\n\n<p>みたいな感じです。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/f2ba72d0beafe7bc19d3425dafbd75fb40a755b8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f65306364386166362d383765322d303363612d393639622d3430656634336230313534322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"553\" alt=\"スクリーンショット 2018-06-25 1.23.04.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fe0cd8af6-87e2-03ca-969b-40ef43b01542.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bdb352f714a30e15a99f61f1cd8d52e9\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/e0cd8af6-87e2-03ca-969b-40ef43b01542.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Fe0cd8af6-87e2-03ca-969b-40ef43b01542.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9690fc460b0f48ece6f7671a8023c8ac 1x\" loading=\"lazy\"></a></p>\n\n<p>とりあえずなんかエラーでているので</p>\n\n<ul>\n<li>dataに todosを作る</li>\n<li>methodsにaddTodoを作る</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">src/components/TodoContainer.vue</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;NewTodo</span>\n    <span class=\"err\">@</span><span class=\"na\">createTodo=</span><span class=\"s\">\"addTodo\"</span> <span class=\"err\">//</span> <span class=\"na\">追加</span>\n  <span class=\"nt\">&gt;&lt;/NewTodo&gt;</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n<span class=\"k\">import</span> <span class=\"nx\">NewTodo</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@/components/NewTodo.vue</span><span class=\"dl\">\"</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">todo-container</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">components</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">NewTodo</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">data</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"na\">todos</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"c1\">// 追加</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">methods</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">addTodo</span><span class=\"p\">(</span><span class=\"nx\">text</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 追加</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">todos</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">({</span><span class=\"nx\">text</span><span class=\"p\">,</span> <span class=\"na\">checked</span><span class=\"p\">:</span><span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">todos</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n\n</code></pre></div>\n</div>\n\n<p>addTodoについて</p>\n\n<ul>\n<li>Vueのオブサーバー壊さないために<code>push</code> で追加しています。</li>\n<li>暫定的に<code>id</code> は配列の数で適当にやってます。</li>\n<li>またcheckedは最初はtodoは完了していないはずなので <code>false</code> からスタートさせています</li>\n</ul>\n\n<p>とりあえずコンテナーは一旦作れたので次は子コンポーネントに移ります。</p>\n\n<h3>\n<span id=\"todolistを作る\" class=\"fragment\"></span><a href=\"#todolist%E3%82%92%E4%BD%9C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>todolistを作る</h3>\n\n<p>ここを作ります〜〜</p>\n\n<p><code>todos</code> から一つだけ <code>todo</code> をもらって</p>\n\n<ul>\n<li>テキストをレンダーする</li>\n<li>チェックボックスレンダーする</li>\n<li>チェックボックスにクリックイベント持たせて、親コンポーネントのメソッドをemitして、<code>Todo</code>から完了と非完了を入れ替える</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/730bfdb84bdf3787f48df7f6365b8dec19bf24f8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f66633230393861632d303038332d326130632d616266392d3135663434626538373531332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"648\" alt=\"スクリーンショット 2018-06-24 0.51.29のコピー2.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Ffc2098ac-0083-2a0c-abf9-15f44be87513.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5f43c1daecfc046d8add594c7b464ece\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/fc2098ac-0083-2a0c-abf9-15f44be87513.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2Ffc2098ac-0083-2a0c-abf9-15f44be87513.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f4ca4a5e3490dc7a2757a9d1f148b515 1x\" loading=\"lazy\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">\n</span><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">touch </span>src/components/TodoItem.vue\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">touch </span>tests/unit/TodoItem.spec.js\n</code></pre></div></div>\n\n<p>テスト書きましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">tests/unit/TodoItem.spec.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">shallowMount</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@vue/test-utils</span><span class=\"dl\">'</span>\n<span class=\"k\">import</span> <span class=\"nx\">TodoItem</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@/components/TodoItem.vue</span><span class=\"dl\">\"</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">todo-item.vue</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">renders text</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">text</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">最初の文字</span><span class=\"dl\">\"</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">shallowMount</span><span class=\"p\">(</span><span class=\"nx\">TodoItem</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">propsData</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">id</span><span class=\"p\">,</span>\n        <span class=\"nx\">text</span><span class=\"p\">,</span>\n        <span class=\"na\">checked</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">span</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">()).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">text</span><span class=\"p\">)</span>\n\n    <span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">setProps</span><span class=\"p\">({</span> <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">二番目の文字</span><span class=\"dl\">\"</span> <span class=\"p\">})</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">span</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">()).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">二番目の文字</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n</div>\n\n<p>ここで出てくる新しい概念は <code>shallowMount</code> の第二引数です。 <code>propsData</code> という場所に <code>todo</code>一つだけわたします。こうすることで todoitemに <code>todo</code> の中身が渡っていきます。<code>テンプレートがないよ</code> ってエラーが出てきたので作ります。</p>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">src/components/TodoItem.vue</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;span&gt;</span><span class=\"si\">{{</span><span class=\"nx\">text</span><span class=\"si\">}}</span><span class=\"nt\">&lt;/span&gt;</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n\n<span class=\"nt\">&lt;</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">todo-item</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">props</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">,</span>\n      <span class=\"na\">required</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n\n</code></pre></div>\n</div>\n\n<p>いい感じ。テストパスしました。テスト追加する〜</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">tests/unit/TodoItem.spec.js</span></div>\n<div class=\"highlight\"><pre><code>  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">renders radio</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">text</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">text1</span><span class=\"dl\">\"</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">shallowMount</span><span class=\"p\">(</span><span class=\"nx\">TodoItem</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">propsData</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">id</span><span class=\"p\">,</span>\n        <span class=\"nx\">text</span><span class=\"p\">,</span>\n        <span class=\"na\">checked</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.radio:checked</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">exists</span><span class=\"p\">()).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n</code></pre></div>\n</div>\n\n<p>propsとして <code>checked</code> が渡ってきたらラジオボタンがちゃんとレンダリングされて、しかもcheckedがつくかチェックします。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/0a1b2d4f10271e73a90a7f9d62362c6022a21232/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f38346163336634392d353137322d356630642d303332322d3666386137343039306631392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"579\" alt=\"スクリーンショット 2018-06-25 1.54.34.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F84ac3f49-5172-5f0d-0322-6f8a74090f19.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ca0e8a160a27dc691d945a435101a03b\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/84ac3f49-5172-5f0d-0322-6f8a74090f19.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F84ac3f49-5172-5f0d-0322-6f8a74090f19.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=36ddd752dae966dae0c72f0a39dfcdbc 1x\" loading=\"lazy\"></a></p>\n\n<p>まあ存在しないって怒られました。</p>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">src/components/TodoItem.vue</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;input</span>\n    <span class=\"na\">type=</span><span class=\"s\">\"radio\"</span>\n    <span class=\"na\">class=</span><span class=\"s\">\"radio\"</span>\n  <span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;span&gt;</span><span class=\"si\">{{</span><span class=\"nx\">text</span><span class=\"si\">}}</span><span class=\"nt\">&lt;/span&gt;</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n</code></pre></div>\n</div>\n\n<blockquote>\n<p>Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.</p>\n</blockquote>\n\n<p><a href=\"https://camo.qiitausercontent.com/3f572501f2df6796b9f070b2970457ef3df6045b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f38343365323063632d643062652d626437372d333263352d3437316336346639393466652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"655\" alt=\"スクリーンショット 2018-06-25 1.55.54.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F843e20cc-d0be-bd77-32c5-471c64f994fe.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e5a9184d34802349da38119b794ff40d\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/843e20cc-d0be-bd77-32c5-471c64f994fe.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F843e20cc-d0be-bd77-32c5-471c64f994fe.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b99ddbceaeb8281c41a6e00578f2fe22 1x\" loading=\"lazy\"></a></p>\n\n<p>コンポーネントは 要素、つまり<code>&lt;div&gt;</code> で囲ってあげればよさそうね！</p>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">src/components/TodoItem.vue</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;input</span>\n    <span class=\"na\">type=</span><span class=\"s\">\"radio\"</span>\n    <span class=\"na\">class=</span><span class=\"s\">\"radio\"</span>\n    <span class=\"na\">:checked=</span><span class=\"s\">\"checked\"</span> <span class=\"err\">//</span><span class=\"na\">追加</span>\n  <span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;span&gt;</span><span class=\"si\">{{</span><span class=\"nx\">text</span><span class=\"si\">}}</span><span class=\"nt\">&lt;/span&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n\n<span class=\"nt\">&lt;</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">todo-item</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">props</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">,</span>\n      <span class=\"na\">required</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">},</span>\n    <span class=\"na\">checked</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\">//追加</span>\n      <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">Boolean</span><span class=\"p\">,</span>\n      <span class=\"na\">required</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n\n</code></pre></div>\n</div>\n\n<p>これでテストがパスするはずです。</p>\n\n<p>ポイントは</p>\n\n<ul>\n<li>propsとして <code>checked</code> を受け取るところ</li>\n<li>\n<code>:checked=\"checked\"</code> でcheckedの値をhtmlにバインドしてあげるところ</li>\n</ul>\n\n<p>です。！</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">tests/unit/TodoItem.spec.js</span></div>\n<div class=\"highlight\"><pre><code>    <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">shallowMount</span><span class=\"p\">(</span><span class=\"nx\">TodoItem</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">propsData</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">id</span><span class=\"p\">,</span>\n        <span class=\"nx\">text</span><span class=\"p\">,</span>\n        <span class=\"na\">checked</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"c1\">// 追加</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n</code></pre></div>\n</div>\n\n<p>自分はcheckedがfalseのときも一応チェックしていましたがそれはお好みにまかせます。</p>\n\n<p>次は</p>\n\n<ul>\n<li>ラジオボタンをクリックしたら親コンポーネントにemitする</li>\n<li>親コンポーネントのtodosが書き換わったらpropsとして渡されて自動にチェックボックスのチェックも書き換わる</li>\n</ul>\n\n<p>ということで親コンポーネントにemitするところまで書きましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">tests/unit/TodoItem.spec.js</span></div>\n<div class=\"highlight\"><pre><code>  <span class=\"kd\">const</span> <span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">emit event when I click radio</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">text</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">text1</span><span class=\"dl\">\"</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">shallowMount</span><span class=\"p\">(</span><span class=\"nx\">TodoItem</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">propsData</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">id</span><span class=\"p\">,</span>\n        <span class=\"nx\">text</span><span class=\"p\">,</span>\n        <span class=\"na\">checked</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.radio</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">click</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">emitted</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">toggleChecked</span><span class=\"dl\">\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n</code></pre></div>\n</div>\n\n<p>既存の知識だけでもうこのテストは理解できると思います。ラジオボタンのクリックイベントでテキストをemitするメソッドを発火させます。渡すのは<code>todo</code>の<code>id</code>にしましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">src/components/TodoItem.vue</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;input</span>\n    <span class=\"na\">type=</span><span class=\"s\">\"radio\"</span>\n    <span class=\"na\">class=</span><span class=\"s\">\"radio\"</span>\n    <span class=\"na\">:checked=</span><span class=\"s\">\"checked\"</span>\n    <span class=\"err\">@</span><span class=\"na\">click=</span><span class=\"s\">\"toggleChecked\"</span>\n  <span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;span&gt;</span><span class=\"si\">{{</span><span class=\"nx\">text</span><span class=\"si\">}}</span><span class=\"nt\">&lt;/span&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n\n<span class=\"nt\">&lt;</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">todo-item</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">props</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">,</span>\n      <span class=\"na\">required</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">},</span>\n    <span class=\"na\">checked</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">Boolean</span><span class=\"p\">,</span>\n      <span class=\"na\">required</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">},</span>\n    <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">Number</span><span class=\"p\">,</span>\n      <span class=\"na\">required</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">methods</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">toggleChecked</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$emit</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">toggleChecked</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">script</span><span class=\"nt\">&gt;</span>\n\n</code></pre></div>\n</div>\n\n<p>完成形。</p>\n\n<h3>\n<span id=\"親コンテナーに戻る\" class=\"fragment\"></span><a href=\"#%E8%A6%AA%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%83%BC%E3%81%AB%E6%88%BB%E3%82%8B\"><i class=\"fa fa-link\"></i></a>親コンテナーに戻る</h3>\n\n<p>最初の図間違っていたので修正しました。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/25562220238455cfea56aaa9606801bd8ae49057/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f38653062643234322d666133332d306231392d366333652d6132666465313466393964342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"643\" alt=\"スクリーンショット 2018-06-24 0.21.35のコピー3.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F8e0bd242-fa33-0b19-6c3e-a2fde14f99d4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f06402c46e127bc756a03c9a0c3a03f4\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/8e0bd242-fa33-0b19-6c3e-a2fde14f99d4.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F8e0bd242-fa33-0b19-6c3e-a2fde14f99d4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b760a1f810ab87fc83f495040bf40565 1x\" loading=\"lazy\"></a></p>\n\n<p>こんな感じでいきましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">tests/unit/TodoContainer.spec.js</span></div>\n<div class=\"highlight\"><pre><code>  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">toggleChecked</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">localThis</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"na\">todos</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n          <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n          <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">text</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n          <span class=\"na\">checked</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">TodoContainer</span><span class=\"p\">.</span><span class=\"nx\">methods</span><span class=\"p\">.</span><span class=\"nx\">toggleChecked</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">localThis</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">localThis</span><span class=\"p\">.</span><span class=\"nx\">todos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">checked</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n</code></pre></div>\n</div>\n\n<p><code>todos</code>からidでfindして、チェックをいれたり外したりする関数を作ります。</p>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">src/components/TodoContainer.vue</span></div>\n<div class=\"highlight\"><pre><code>    toggleChecked(id) {\n      const todo = this.todos.find(x =&gt; x.id === id)\n      todo.checked = !todo.checked\n    }\n</code></pre></div>\n</div>\n\n<p>メソッドに追加したらpassしました。</p>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">src/components/TodoContainer.vue</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;NewTodo</span>\n    <span class=\"err\">@</span><span class=\"na\">createTodo=</span><span class=\"s\">\"addTodo\"</span>\n  <span class=\"nt\">&gt;&lt;/NewTodo&gt;</span>\n  <span class=\"nt\">&lt;TodoItem</span>\n    <span class=\"na\">v-for=</span><span class=\"s\">\"todo in todos\"</span>\n    <span class=\"na\">:id=</span><span class=\"s\">\"todo.id\"</span>\n    <span class=\"na\">:key=</span><span class=\"s\">\"todo.id\"</span>\n    <span class=\"na\">:text=</span><span class=\"s\">\"todo.text\"</span>\n    <span class=\"na\">:checked=</span><span class=\"s\">\"todo.checked\"</span>\n    <span class=\"err\">@</span><span class=\"na\">toggleChecked=</span><span class=\"s\">\"toggleChecked\"</span>\n  <span class=\"nt\">&gt;&lt;/TodoItem&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">template</span><span class=\"nt\">&gt;</span>\n\n</code></pre></div>\n</div>\n\n<h3>\n<span id=\"結合するブラウザテスト\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E5%90%88%E3%81%99%E3%82%8B%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%83%86%E3%82%B9%E3%83%88\"><i class=\"fa fa-link\"></i></a>結合する、ブラウザテスト</h3>\n\n<p>最終的に少し修正しました。コンポーネントに登録してなくてエラーでたのが2箇所。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/ef1722b775c601f04aaeb49c4859286622e1b3a3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f36623334383630372d656461332d343266392d653333312d3161353062303464363136362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"917\" alt=\"スクリーンショット 2018-06-25 3.33.01.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F6b348607-eda3-42f9-e331-1a50b04d6166.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6ed017c29ede7bf77b043d235a77bff3\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/6b348607-eda3-42f9-e331-1a50b04d6166.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F6b348607-eda3-42f9-e331-1a50b04d6166.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d8ae8d5b7f79d2c9d1743d85f413cf9d 1x\" loading=\"lazy\"></a></p>\n\n<p>これで最終的にブラウザは1度しか見ずに簡単なTODOアプリが作れました！</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/f455642c587fdddc94038e01d4fe09d15b1324a5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131323932392f37393535623336322d303732642d653966392d353261642d3330373564613631653463362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"647\" alt=\"スクリーンショット 2018-06-25 3.31.29.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F7955b362-072d-e9f9-52ad-3075da61e4c6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=00a21827e4f712b5020ec0e97a143c95\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/7955b362-072d-e9f9-52ad-3075da61e4c6.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F112929%2F7955b362-072d-e9f9-52ad-3075da61e4c6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=77850732e78f2c4c1061fd106578552c 1x\" loading=\"lazy\"></a></p>\n\n<h3>\n<span id=\"作ってみた結論\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E7%B5%90%E8%AB%96\"><i class=\"fa fa-link\"></i></a>作ってみた結論</h3>\n\n<p>結論として言いたいのは</p>\n\n<ul>\n<li>簡単な内部ロジックで構成されているコンポーネント開発だと簡単にTDDできるよ</li>\n<li>私の経験だと3ヶ月くらいずっとテスト書き続けていたら、TDDできるようになると思う</li>\n<li>StorybookでHot-reloadで開発してもいいと思うけどな！</li>\n<li>これは得意な人がつきっきりで、チュートリアルな形ならやれるものであって、決してVue-test-utils初心者の方ができるものではない気がしてきました。。。</li>\n</ul>\n\n<p>です。</p>\n\n<h2>\n<span id=\"参考資料\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E8%B3%87%E6%96%99\"><i class=\"fa fa-link\"></i></a>参考資料</h2>\n\n<ul>\n<li><a href=\"https://qiita.com/k-okina/items/06366888409e73dfe70f\" id=\"reference-665742965523c498a2bb\">2018年Vue.jsとVuexを使ってる人に提案するコンポーネントの分類と設計パターン</a></li>\n<li><a href=\"https://qiita.com/k-okina/items/42ab777f8c53726def17\" id=\"reference-8ef2336099197ba9e89b\">2018年今更主張する、フロントエンドでなぜテストをするのか</a></li>\n</ul>\n\n<h2>\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h2>\n\n<p>いかがでしたか？開発終了まで一度もブラウザを見ずに開発できました。黒い画面(vim)好きなかたはぜひ。<br>\n<code>TDDやれ</code>って言いたいわけじゃないですが、ロジック層だとTDDやってもいいと思うけど、それよりもまずは簡単なところからでもいいからテストを書いていって、Vue-test-utilsのAPI覚えて、テストに慣れていってください。チームがテストに関して成熟してきたかなと思ったらTDDやってもいいかもしれませんが、はじめにも言いましたが <code>自分のチーム</code> で決めたらいいと思います。</p>\n\n<p>少しでもテスト書く人が増えますように！！！！！！！</p>\n\n<h2>\n<span id=\"thx\" class=\"fragment\"></span><a href=\"#thx\"><i class=\"fa fa-link\"></i></a>Thx</h2>\n\n<p>編集リクエストありがとうございます！！</p>\n\n<ul>\n<li><a href=\"/yamap_55\" class=\"user-mention js-hovercard\" title=\"yamap_55\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"yamap_55\">@yamap_55</a></li>\n<li><a href=\"/khsk\" class=\"user-mention js-hovercard\" title=\"khsk\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"khsk\">@khsk</a></li>\n</ul>\n","body":"# Vue.jsのコンポーネント開発をTDDでやってみる\n\n※ TDD (test-driven development): テスト駆動開発\n※ テスト駆動開発は文化です。チームの「状況」「納期」「スキルレベル」、その他いろんな要因が絡んできた結果、そのチームが導入するかどうか決めたらいいと思います。\n※ 例えがいいかはわかりませんが、私は「早起き」と「テスト」は同じようなものだと思っています。「早起き」は健康にいいよねって誰でも言うと思うけど、実際に万人がやっているかどうかは別じゃないですか。それと同じで「テストすること」も絶対いいことだと私は思っていますが、やるかどうかはチームの置かれている状況によって決まります。この記事は、その「テストを導入するかどうか」という意思決定の一助にでもなれればいいなと思います。\n\n## はじめに\n\nこんにちは。ぼくです。\n\n今回はVue.jsでTODOアプリを作ってみようと思います。その時の条件は\n\n- TDDで開発して、\n- ブラウザは最後まで見ない\n\nです。普通にチュートリアルな感じなので、ざっくりコード眺めていけるかと思いますし、スクショ多めでいくので、自分でやらなくてもなんとなく追体験ができるようにしています。よかったら自分でもやってみてください。\n\nまたテストが分かるかたは、このTodoアプリを参考に、ハンズオンとか開いてくれたりするとうれしかったりします。Vue-meetupでもテストを書いている割合が圧倒的に少なかったので、テストユーザー増やしていきましょう〜〜\n\n## コンポーネント作成\n\n### 目標物の確認\n\n今回作成するものは[こちら](https://jp.vuejs.org/v2/examples/todomvc.html)の TODOアプリ です。\n\nいろんなフレームワークでTODOアプリのサンプルは[こちら](http://todomvc.com/)をみるとたくさん載っていて、\n\n- Backbone.js\n- AngularJS\n- Ember.js\n- KnockoutJS\n- ( etc )\n\nなどたくさんサンプルがあるので、フレームワーク選定の時にお使いください。\n\n### 目標物の設計を分解して考える\n\n責務の分解をします。\n\n<img width=\"643\" alt=\"スクリーンショット 2018-06-24 0.21.35のコピー.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/5e6cfd2f-c99d-35aa-b640-943fa8db20b4.png\">\n\n今回は、コンポーネント構成を以下のようにする。\n\n```\n- TodoContainer.vue\n    - NewTodo.vue\n    - TodoItem.vue\n```\n\n- TodoContainer.vue\n    - todoのリストを管理するコンポーネント\n- NewTodo.vue\n    - 新しいTodoリストのテキストを親のコンポーネントにemitする\n- TodoItem.vue\n    - 親のコンポーネントからtodoリストのpropsをもらってレンダリングする\n\n### 環境構築\n\n```shell-session\n$ vue -v\n3\n$ vue create vue-todo\n1. manually select features\n2. ---\n◉ Babel\n◉ Unit Testing\n3. Jest\n4. In package.json(どっちでもいい)\n5. N\n6. yarn\n```\n\nもしくは\n\n```shell-session\n$ git clone git@github.com:ykhirao/vue-todos.git\n$ cd vue-todos\n$ git checkout 9b2b09d5081 -b practice\n```\n\nではじめのコミットを`checkout`してやってください。\n\n### 入力から作ってみる NewTodo.vue\n\nここのインプットフォームから作っていきたいと思いますが、このコンポーネントは\n\n- v-modelでinputのデータを管理する\n- エンターが押されると親コンポーネントにそのテキストをemitする\n\nという責務にしましょう。\n\n<img width=\"648\" alt=\"スクリーンショット 2018-06-24 0.51.29.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/ec851d96-c1db-033b-e89c-5c615772b515.png\">\n\n```shell-session\n$ touch src/components/NewTodo.vue\n$ touch tests/unit/NewTodo.spec.js\n```\n\n1. 期待する結果をexpectで書く\n  - 今回はインプットタグがレンダーされているかだけを検証する\n  - 基本的にコンポーネントは `wrapper` という変数にshallowMountでラップする \n  - イコール文: expect(1).toBe(1)\n  - これが基本の形なので覚えてください。\n\nshallowMount のAPIは[こちら](https://vue-test-utils.vuejs.org/ja/api/shallowMount.html)\n\n他にも `mount` というものでラップできるけど、弊社だと基本的には早いから `shallowMount` を使います。 またstubを作りまくれば`shallowMount`だけでもかけますが、 `mount`を使ったほうが楽になるパターンもあったり結構深いテーマなので、両者の使い分けは後日Qiitaに書きます！！！\n\n#### テスト1 単純なレンダリングテストを書いて、適切なhtml構造を作る\n\n```NewTodo.spec.js\nimport { shallowMount } from '@vue/test-utils'\nimport NewTodo from \"@/components/NewTodo.vue\"\n\ndescribe(\"NewTodo.vue\", () => {\n  it(\"インプットタグをレンダリングする\", () => {\n    const wrapper = shallowMount(NewTodo)\n\n    expect(wrapper.find(\"input.new\").exists()).toBe(true)\n  })\n})\n```\n\nテストコードを簡単に説明すると `newってclassがついたinputタグが存在する？` ってテストです。\n\n- `find = document.querySelector` みたいなものです。 [find api](https://vue-test-utils.vuejs.org/ja/api/#%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF)\n- [exists api](https://vue-test-utils.vuejs.org/ja/api/wrapper/exists.html) 存在するか\n- toBe(true) 判定式\n\n\n<img width=\"1677\" alt=\"スクリーンショット 2018-06-24 1.13.32.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/cb75e13f-3e08-3c0b-214f-91f03e9f21bd.png\">\n\nエラー文はこちら。\n\n> [Vue warn]: Failed to mount component: template or render function not defined.\n\nそもそもテンプレートがないみたいなので作りにいきましょう。\n\n```src/components/NewTodo.vue\n<template>\n  <div>test</div>\n</template>\n```\n\n次はマウントコンポーネントのエラーが無くなり単純な失敗みたいです。\n\n<img width=\"513\" alt=\"スクリーンショット 2018-06-24 1.16.55.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/4caa3b45-0631-9d04-9f13-ea7fec49b6ae.png\">\n\n次は `<input>` を作ってみましょう。\n\n```src/components/NewTodo.vue\n<template>\n  <div>\n    <input class=\"new\">\n  </div>\n</template>\n```\n\n<img width=\"401\" alt=\"スクリーンショット 2018-06-24 1.18.03.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/7929ead7-90cf-32af-212a-93d38254bd8c.png\">\n\nパスしました！！！！\n\n#### テスト2 clickイベントを拾い、新しいタグをemitする\n\nとりあえずクリックイベントを発火させて、emitも検知できればいいかなと思います。\n\nこの段階で作り始めたときはしっかり設計できてなかった、以下のことを再定義します\n\n- .vueファイルのdataに { text: \"text\" } というオブジェクトを持たせる\n- それを `createTodo`という名前でemitします。\n\n```NewTodo.spec.js\nit(\"新しいタグをemitする\", () => {\n  const text = \"text\"\n  const wrapper = shallowMount(NewTodo)\n\n  wrapper.setData({text})\n  wrapper.find(\".new\").trigger(\"keyup.enter\")\n\n  expect(wrapper.emitted(\"createTodo\")).toBe(text)\n})\n```\n\n今回は、 `shallowMount` でコンポーネントをラップして、 `find` でinputタグを見つけ出し、 `trigger` でイベントを発火させて、本当にemitするかどうかというテストになります。\n\n```shell-session\n$ yarn test --watch\n```\n\nうーんテストが失敗しています。\n\n<img width=\"654\" alt=\"スクリーンショット 2018-06-25 0.07.31.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/af17d1fe-8cab-239c-5152-6df61e891df1.png\">\n\nたぶん`createTodo`がemitされていませんね！作りにいきましょう。\n\n```src/components/NewTodo.vue\n<template>\n  <div>\n    <input\n      class=\"new\"\n      @keyup.enter=\"submit\"\n    >\n  </div>\n</template>\n\n<script>\nexport default {\n   methods: {\n    submit() {\n      this.$emit(\"createTodo\", \"ここにsubmitされるテキストが入るよ！\")\n    }\n  } \n}\n</script>\n```\n\n\nこんな感じで `input` に `keyup.enter` エンターイベントが発火したときに `submit` というメソッドが呼ばれるように修正しました。このときのテストを以下のように修正して `wrapper.emitted(\"createTodo\")` がどういう値になるか見てみましょう。\n\n```NewTodo.spec.js\nit(\"新しいタグをemitする\", () => {\n  const text = \"text\"\n  const wrapper = shallowMount(NewTodo)\n\n  wrapper.setData({text})\n  wrapper.find(\".new\").trigger(\"keyup.enter\")\n\n  console.log(wrapper.emitted(\"createTodo\"))\n  expect(wrapper.emitted(\"createTodo\")).toBe(text)\n})\n```\n\n```shell-session\nconsole.log tests/unit/NewTodo.spec.js:18\n  [ [ 'ここにsubmitれるテキストが入るよ！' ] ]\n```\n\nこれで `wrapper.emitted(\"createTodo\")[0][0]` に emitされるテキストが入ることがわかりました。のでテストを修正します。\n\n```NewTodo.spec.js\nit(\"新しいタグをemitする\", () => {\n  const text = \"text\"\n  const wrapper = shallowMount(NewTodo)\n\n  wrapper.setData({text})\n  wrapper.find(\".new\").trigger(\"keyup.enter\")\n\n  expect(wrapper.emitted(\"createTodo\")[0][0]).toBe(text)\n})\n```\n\nまた２つのエラーがでてきました。\n\n<img width=\"991\" alt=\"スクリーンショット 2018-06-25 0.17.58.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/2a807f4d-cc03-7912-3b49-6f4fa7cb2c5c.png\">\n\n2つのエラーは\n\n- 単純にexpect().toBe() が失敗していますが、これは後に解決させます。\n- もう一つは `wrapper.setData({text})` というところでコンポーネントにdataを定義していないので怒られていると思われます。作りにいきましょう。 [setData api](https://vue-test-utils.vuejs.org/ja/api/wrapper-array/#setdata-data)\n\n```src/components/NewTodo.vue\n<template>\n  <div>\n    <input\n      class=\"new\"\n      v-model=\"text\" // 1. ここ追加！！\n      @keyup.enter=\"submit\"\n    >\n  </div>\n</template>\n\n<script>\nexport default {\n  data() { // 2. ここ追加！！\n    return {\n      text: \"\"\n    }\n  },\n   methods: {\n    submit() {\n      this.$emit(\"createTodo\", this.text) // 3. ここ追加！！\n    }\n  } \n}\n</script>\n```\n\n修正箇所は3箇所です。\n\n1. v-modelに dataのtextをいれた\n2. .vueファイルにdata関数をもたせた\n3. emitの第二引数に textのデータをもたせた。\n\n以上！！\n\n<img width=\"379\" alt=\"スクリーンショット 2018-06-25 0.24.15.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/8574edd2-8ca8-0571-a05d-d597278989cb.png\">\n\nテストがパスしました〜！！！！！\n\n```shell-session\n$ yarn test --watch\n```\n\nこちらはgitで差分があるファイルだけホッとリロードでテストしてくれるので、完成したこのコンポーネントはもうコミットしておきます。\n\n\n### コンテイナーを作る\n\n再度こちらの図になります。今回は `TodoContainer.vue` を作っていきます。\n\n<img width=\"643\" alt=\"スクリーンショット 2018-06-24 0.21.35のコピー.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/5e6cfd2f-c99d-35aa-b640-943fa8db20b4.png\">\n\nまずはテストから。\n\n```shell-session\n$ touch tests/unit/TodoContainer.spec.js\n$ touch src/components/TodoContainer.vue\n```\n\nよし！！次のテストは `TodoContainer.vue` をレンダーしたら `NewTodo.vue` もレンダーされるかチェックしようではないか。\n\n```tests/unit/TodoContainer.spec.js\nimport { shallowMount } from '@vue/test-utils'\nimport TodoContainer from \"@/components/TodoContainer.vue\"\nimport NewTodo from \"@/components/NewTodo.vue\"\n\ndescribe(\"TodoContainer.vue\", () => {\n  it(\"formをレンダー\", () => {\n    const wrapper = shallowMount(TodoContainer)\n\n    expect(wrapper.find(NewTodo).exists()).toBe(true)\n  })\n})\n```\n\nポイントは `find(NewTodo)` でVueコンポーネントを簡単に探せるところです。\n\n<img width=\"616\" alt=\"スクリーンショット 2018-06-25 0.40.06.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/6cf30922-ecf4-7375-d383-2687ff29500c.png\">\n\nもちろん失敗します〜〜のでエラーを見て直して行きましょう。先程みたやつですね！！テンプレートないよってやつです。\n\n```src/components/TodoContainer.vue\n<template>\n</template>\n```\n\nん？なんかこれだけでもテストがパスしちゃいました。。。とりあえず進めると\n\n```src/components/TodoContainer.vue\n<template>\n  <NewTodo></NewTodo>\n</template>\n```\n\n`コンポーネント登録しろよ〜〜` って感じで怒られました。\n\n<img width=\"662\" alt=\"スクリーンショット 2018-06-25 0.47.53.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/d3720672-6403-8a8b-c6cc-d2cd05022b95.png\">\n\nコンポーネントをインポートして登録します。\n\n```src/components/TodoContainer.vue\n<template>\n  <NewTodo></NewTodo>\n</template>\n<script>\nimport NewTodo from \"@/components/NewTodo.vue\"\nexport default {\n  components: {\n    NewTodo\n  },\n}\n</script>\n\n```\n\nはい完了。\n\n`For recursive components, make sure to provide the \"name\" option.`が気になったので、ちょっと `NewTodo.vue`に戻って\n\n```NewTodo.vue\n<script>\nexport default {\n  name: \"new-todo\", // こちら追加\n  data() {\n    return {\n      text: \"\"\n    }\n  },\n```\n\nに戻って`nameオプションつけろ` って感じで怒られましたところを追加しました。\n\nそうすると\n\n```tests/unit/TodoContainer.spec.js\nexpect(wrapper.find(NewTodo).exists()).toBe(true)\n```\n\nがきちんと働くようになってコンポーネントを見つけ出してくれるみたいです。 nameオプションは必ずつけましょう。またnameオプションは `ケバブ-ケース` にすることとVueがいい感じに解釈してくれます。 html5では要素の大文字と小文字区別しないから `<NewTodo>` と <newtodo> とかが同じと解釈されるので、そのあたりのことを丸めるための処理。（かな）\n\n次は子コンポーネントからemitされた値を [ todos ]というデータに追加するところを作ろうかと思います。テストでまた新しい概念が追加されるので頑張って覚えてください。むしろ覚えようとせずに「ふ〜〜んそんなものあるんだ〜〜」くらいがいいかもです。\n\n今回やること\n\n- `createTodo` としてemitされた`text` を`addTodo` というメソッドで追加する\n\n```tests/unit/TodoContainer.spec.js\nimport TodoContainer from \"@/components/TodoContainer.vue\"\n\nit(\"todoを追加する\", () => {\n  const localThis = {\n    todos: []\n  }\n\n  TodoContainer.methods.addTodo.call(localThis, \"text\")\n\n  expect(localThis.todos[0]).toEqual({\n    id: 1,\n    text: \"text\",\n    checked: false\n  })\n})\n```\n\n今回は `localThis` という概念がでてきます。後 `call` めっちゃ重要な概念だから ~~調べて~~ 簡単に書きます。\n\n`import TodoContainer` インポートしたコンポーネントは `TodoContainer.methods.addTodo` という形でコンポーネントメソッドを使うことができます。\n\nただこのときコンポーネントメソッドの `this.todos` が呼び出す文脈によって変わります。これを解消するのが `call` です。それでは見ていきましょう。\n\n\n<img width=\"500\" alt=\"スクリーンショット 2018-06-25 1.13.55.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/7720827b-1e8f-9414-0240-34dfaff95ce9.png\">\n\n```chrome's.console.js\nfunction getText () {\n  return(this.text)\n}\nconst localThis = { text: \"localThisのテスト\"}\n\ngetText()\n\ngetText.call(localThis)\n```\n\n`call` に引数を渡すことで擬似的に `this` を書き換えことができます。\n\nちなみに\n\n```chrome's.console.js\nfunction getText () {\n  console.log(this)\n}\nconst localThis = { text: \"localThisのテスト\"}\n\ngetText()\n\ngetText.call(localThis)\n```\n\nchromeの開発者ツールでの `this` は `window` になります。今回は `spec.js` ではchromeは使わないのでまた別の `this` になることでしょう。node?\n\n<img width=\"525\" alt=\"スクリーンショット 2018-06-25 1.16.42.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/9ac05ff3-8184-acfd-2b17-57b335736b1b.png\">\n\nテストに戻ります\n\n```\nexpect(localThis.todos[0]).toEqual({})\n```\n\nオブジェクトの検証は`toEqual`を使います。\n\n- `toBe ===`\n- `toEqual ==` \n\nみたいな感じです。\n\n<img width=\"553\" alt=\"スクリーンショット 2018-06-25 1.23.04.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/e0cd8af6-87e2-03ca-969b-40ef43b01542.png\">\n\nとりあえずなんかエラーでているので\n\n- dataに todosを作る\n- methodsにaddTodoを作る\n\n```src/components/TodoContainer.vue\n<template>\n  <NewTodo\n    @createTodo=\"addTodo\" // 追加\n  ></NewTodo>\n</template>\n<script>\nimport NewTodo from \"@/components/NewTodo.vue\"\n\nexport default {\n  name: \"todo-container\",\n  components: {\n    NewTodo\n  },\n  data() {\n    return {\n      todos: [] // 追加\n    }\n  },\n  methods: {\n    addTodo(text) { // 追加\n      this.todos.push({text, checked:false, id: this.todos.length + 1 })\n    },\n  }\n}\n</script>\n\n```\n\naddTodoについて\n\n- Vueのオブサーバー壊さないために`push` で追加しています。\n- 暫定的に`id` は配列の数で適当にやってます。\n- またcheckedは最初はtodoは完了していないはずなので `false` からスタートさせています\n\nとりあえずコンテナーは一旦作れたので次は子コンポーネントに移ります。\n\n### todolistを作る\n\nここを作ります〜〜\n\n`todos` から一つだけ `todo` をもらって\n\n- テキストをレンダーする\n- チェックボックスレンダーする\n- チェックボックスにクリックイベント持たせて、親コンポーネントのメソッドをemitして、`Todo`から完了と非完了を入れ替える\n\n<img width=\"648\" alt=\"スクリーンショット 2018-06-24 0.51.29のコピー2.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/fc2098ac-0083-2a0c-abf9-15f44be87513.png\">\n\n\n```shell-session\n\n$ touch src/components/TodoItem.vue\n$ touch tests/unit/TodoItem.spec.js\n```\n\nテスト書きましょう。\n\n```tests/unit/TodoItem.spec.js\nimport { shallowMount } from '@vue/test-utils'\nimport TodoItem from \"@/components/TodoItem.vue\"\n\ndescribe(\"todo-item.vue\", () => {\n  const id = 1\n  it(\"renders text\", () => {\n    const text = \"最初の文字\"\n    const wrapper = shallowMount(TodoItem, {\n      propsData: {\n        id,\n        text,\n        checked: true\n      }\n    })\n\n    expect(wrapper.find(\"span\").text()).toBe(text)\n\n    wrapper.setProps({ text: \"二番目の文字\" })\n    expect(wrapper.find(\"span\").text()).toBe(\"二番目の文字\")\n  })\n})\n```\n\nここで出てくる新しい概念は `shallowMount` の第二引数です。 `propsData` という場所に `todo`一つだけわたします。こうすることで todoitemに `todo` の中身が渡っていきます。`テンプレートがないよ` ってエラーが出てきたので作ります。\n\n\n```src/components/TodoItem.vue\n<template>\n  <span>{{text}}</span>\n</template>\n\n<script>\nexport default {\n  name: \"todo-item\",\n  props: {\n    text: {\n      type: String,\n      required: true\n    }\n  }\n}\n</script>\n\n```\n\nいい感じ。テストパスしました。テスト追加する〜\n\n```tests/unit/TodoItem.spec.js\n  it(\"renders radio\", () => {\n    const text = \"text1\"\n    const wrapper = shallowMount(TodoItem, {\n      propsData: {\n        id,\n        text,\n        checked: true\n      }\n    })\n\n    expect(wrapper.find(\".radio:checked\").exists()).toBe(true)\n  })\n```\n\npropsとして `checked` が渡ってきたらラジオボタンがちゃんとレンダリングされて、しかもcheckedがつくかチェックします。\n\n<img width=\"579\" alt=\"スクリーンショット 2018-06-25 1.54.34.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/84ac3f49-5172-5f0d-0322-6f8a74090f19.png\">\n\nまあ存在しないって怒られました。\n\n```src/components/TodoItem.vue\n<template>\n  <input\n    type=\"radio\"\n    class=\"radio\"\n  >\n  <span>{{text}}</span>\n</template>\n```\n\n> Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.\n\n<img width=\"655\" alt=\"スクリーンショット 2018-06-25 1.55.54.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/843e20cc-d0be-bd77-32c5-471c64f994fe.png\">\n\nコンポーネントは<root> 要素、つまり`<div>` で囲ってあげればよさそうね！\n\n```src/components/TodoItem.vue\n<template>\n<div>\n  <input\n    type=\"radio\"\n    class=\"radio\"\n    :checked=\"checked\" //追加\n  >\n  <span>{{text}}</span>\n</div>\n</template>\n\n<script>\nexport default {\n  name: \"todo-item\",\n  props: {\n    text: {\n      type: String,\n      required: true\n    },\n    checked: { //追加\n      type: Boolean,\n      required: true\n    }\n  }\n}\n</script>\n\n```\n\nこれでテストがパスするはずです。\n\nポイントは\n\n- propsとして `checked` を受け取るところ\n- `:checked=\"checked\"` でcheckedの値をhtmlにバインドしてあげるところ\n\nです。！\n\n```tests/unit/TodoItem.spec.js\n    const wrapper = shallowMount(TodoItem, {\n      propsData: {\n        id,\n        text,\n        checked: false // 追加\n      }\n    })\n```\n\n自分はcheckedがfalseのときも一応チェックしていましたがそれはお好みにまかせます。\n\n\n次は\n\n- ラジオボタンをクリックしたら親コンポーネントにemitする\n- 親コンポーネントのtodosが書き換わったらpropsとして渡されて自動にチェックボックスのチェックも書き換わる\n\nということで親コンポーネントにemitするところまで書きましょう。\n\n```tests/unit/TodoItem.spec.js\n  const id = 1\n\n  it(\"emit event when I click radio\", () => {\n    const text = \"text1\"\n    const wrapper = shallowMount(TodoItem, {\n      propsData: {\n        id,\n        text,\n        checked: false\n      }\n    })\n\n    wrapper.find(\".radio\").trigger(\"click\")\n\n    expect(wrapper.emitted(\"toggleChecked\")[0][0]).toBe(id)\n  })\n```\n\n既存の知識だけでもうこのテストは理解できると思います。ラジオボタンのクリックイベントでテキストをemitするメソッドを発火させます。渡すのは`todo`の`id`にしましょう。\n\n```src/components/TodoItem.vue\n<template>\n<div>\n  <input\n    type=\"radio\"\n    class=\"radio\"\n    :checked=\"checked\"\n    @click=\"toggleChecked\"\n  >\n  <span>{{text}}</span>\n</div>\n</template>\n\n<script>\nexport default {\n  name: \"todo-item\",\n  props: {\n    text: {\n      type: String,\n      required: true\n    },\n    checked: {\n      type: Boolean,\n      required: true\n    },\n    id: {\n      type: Number,\n      required: true\n    }\n  },\n  methods: {\n    toggleChecked() {\n      this.$emit(\"toggleChecked\", this.id)\n    }\n  }\n}\n</script>\n\n```\n\n完成形。\n\n### 親コンテナーに戻る\n\n最初の図間違っていたので修正しました。\n\n<img width=\"643\" alt=\"スクリーンショット 2018-06-24 0.21.35のコピー3.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/8e0bd242-fa33-0b19-6c3e-a2fde14f99d4.png\">\n\nこんな感じでいきましょう。\n\n```tests/unit/TodoContainer.spec.js\n  it(\"toggleChecked\", () => {\n    const localThis = {\n      todos: [\n        {\n          id: 1,\n          text: \"text\",\n          checked: true\n        }\n      ]\n    }\n\n    TodoContainer.methods.toggleChecked.call(localThis, 1)\n\n    expect(localThis.todos[0].checked).toBe(false)\n  })\n```\n\n`todos`からidでfindして、チェックをいれたり外したりする関数を作ります。\n\n```src/components/TodoContainer.vue\n    toggleChecked(id) {\n      const todo = this.todos.find(x => x.id === id)\n      todo.checked = !todo.checked\n    }\n```\n\nメソッドに追加したらpassしました。\n\n```src/components/TodoContainer.vue\n<template>\n<div>\n  <NewTodo\n    @createTodo=\"addTodo\"\n  ></NewTodo>\n  <TodoItem\n    v-for=\"todo in todos\"\n    :id=\"todo.id\"\n    :key=\"todo.id\"\n    :text=\"todo.text\"\n    :checked=\"todo.checked\"\n    @toggleChecked=\"toggleChecked\"\n  ></TodoItem>\n</div>\n</template>\n\n```\n\n### 結合する、ブラウザテスト\n\n最終的に少し修正しました。コンポーネントに登録してなくてエラーでたのが2箇所。\n\n<img width=\"917\" alt=\"スクリーンショット 2018-06-25 3.33.01.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/6b348607-eda3-42f9-e331-1a50b04d6166.png\">\n\nこれで最終的にブラウザは1度しか見ずに簡単なTODOアプリが作れました！\n\n<img width=\"647\" alt=\"スクリーンショット 2018-06-25 3.31.29.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/112929/7955b362-072d-e9f9-52ad-3075da61e4c6.png\">\n\n\n### 作ってみた結論\n\n結論として言いたいのは\n\n- 簡単な内部ロジックで構成されているコンポーネント開発だと簡単にTDDできるよ\n- 私の経験だと3ヶ月くらいずっとテスト書き続けていたら、TDDできるようになると思う\n- StorybookでHot-reloadで開発してもいいと思うけどな！\n- これは得意な人がつきっきりで、チュートリアルな形ならやれるものであって、決してVue-test-utils初心者の方ができるものではない気がしてきました。。。\n\nです。\n\n## 参考資料\n\n- [2018年Vue.jsとVuexを使ってる人に提案するコンポーネントの分類と設計パターン](https://qiita.com/k-okina/items/06366888409e73dfe70f)\n- [2018年今更主張する、フロントエンドでなぜテストをするのか](https://qiita.com/k-okina/items/42ab777f8c53726def17)\n\n## おわりに\n\nいかがでしたか？開発終了まで一度もブラウザを見ずに開発できました。黒い画面(vim)好きなかたはぜひ。\n`TDDやれ`って言いたいわけじゃないですが、ロジック層だとTDDやってもいいと思うけど、それよりもまずは簡単なところからでもいいからテストを書いていって、Vue-test-utilsのAPI覚えて、テストに慣れていってください。チームがテストに関して成熟してきたかなと思ったらTDDやってもいいかもしれませんが、はじめにも言いましたが `自分のチーム` で決めたらいいと思います。\n\n少しでもテスト書く人が増えますように！！！！！！！\n\n## Thx\n\n編集リクエストありがとうございます！！\n\n- @yamap_55\n- @khsk\n","coediting":false,"comments_count":6,"created_at":"2018-06-25T08:56:37+09:00","group":null,"id":"becd9be857dbe6804314","likes_count":456,"private":false,"reactions_count":0,"stocks_count":450,"tags":[{"name":"JavaScript","versions":[]},{"name":"TDD","versions":[]},{"name":"Vue.js","versions":[]},{"name":"フロントエンド","versions":[]},{"name":"vue-test-utils","versions":[]}],"title":"【Vue.js】いつから「フロントエンド開発でTDDができない」と錯覚していた？","updated_at":"2018-06-27T23:47:26+09:00","url":"https://qiita.com/ykhirao/items/becd9be857dbe6804314","user":{"description":"Web Developer From 2016.\r\nPHP/Laravel && React/TypeScript/Node.js\r\n\r\n業務委託の依頼とかはWantedlyとかからでお願いします！","facebook_id":"","followees_count":39,"followers_count":100,"github_login_name":"ykhirao","id":"ykhirao","items_count":74,"linkedin_id":"","location":"Tokyo, Japan","name":"yk","organization":"","permanent_id":112929,"profile_image_url":"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/profile-images/1639030792","team_only":false,"twitter_screen_name":"ykhirao","website_url":"https://www.wantedly.com/id/ykhirao"},"page_views_count":null,"team_membership":null,"organization_url_name":null,"slide":false}},"path":"posts/becd9be857dbe6804314"}
