{"template":"__react_static_root__/src/components/QiitaPost","sharedHashesByProp":{},"data":{"post":{"rendered_body":"<h1>\n<span id=\"gitって難しいよね\" class=\"fragment\"></span><a href=\"#git%E3%81%A3%E3%81%A6%E9%9B%A3%E3%81%97%E3%81%84%E3%82%88%E3%81%AD\"><i class=\"fa fa-link\"></i></a>Gitって難しいよね</h1>\n<p>こんにちは <a href=\"/ykhirao\" class=\"user-mention js-hovercard\" title=\"ykhirao\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"ykhirao\">@ykhirao</a> です！！フリーランスエンジニア初めて2週間立ちましたが、案件に入って初めてやったことは開発ではなくGit/GitHubを導入でした。いまWinSCP/TeraTermからGitベースのデプロイ環境を構築しようと思って、改めてGitに関して調べ直していました。</p>\n<p>その知見を書いていく。</p>\n<p>基本的にはここ <a href=\"https://git-scm.com/book/ja/v2/Git%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC-%E3%83%97%E3%83%AD%E3%83%88%E3%82%B3%E3%83%AB\" rel=\"nofollow noopener\" target=\"_blank\">https://git-scm.com/book/ja/v2/Gitサーバー-プロトコル</a> の4章の内容を中心に書いていこうかと思います。</p>\n<blockquote>\n<p>Git標準でついているGitWebを立ち上げてみたり</p>\n</blockquote>\n<a href=\"https://camo.qiitausercontent.com/a9f9221265455cf2e0885ac516233aa350ba8556/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f32633337633562622d323364662d343833632d323262642d3536323934653438653165372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"1680\" alt=\"スクリーンショット 2020-07-10 23.46.16.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F2c37c5bb-23df-483c-22bd-56294e48e1e7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=292dca34caa3d4e0d9fa850ff0f35dc8\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/2c37c5bb-23df-483c-22bd-56294e48e1e7.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F2c37c5bb-23df-483c-22bd-56294e48e1e7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3a5136c10d5ab931f40eda9219e52da1 1x\" loading=\"lazy\"></a>\n<blockquote>\n<p>GitHubとか使うんではなくてbareレポジトリというものをGCPのVPSに置いてみたり</p>\n</blockquote>\n<p>そんな感じのQiitaです。暇があったらGitサーバーってなんじゃらほいって自分でも調べてみてください。私にはよくわからなかったです。たぶんGitのbareレポジトリ(つまり.git/ディレクトリ)をホストしているだけのサーバーのこと…</p>\n<h2>\n<span id=\"最初gitサーバーって何言ってるのかと思った\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%88%9Dgit%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%A3%E3%81%A6%E4%BD%95%E8%A8%80%E3%81%A3%E3%81%A6%E3%82%8B%E3%81%AE%E3%81%8B%E3%81%A8%E6%80%9D%E3%81%A3%E3%81%9F\"><i class=\"fa fa-link\"></i></a>最初Gitサーバーって何言ってるのかと思った</h2>\n<p>Gitサーバーって何？パルプンテ状態でした。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>Git on the Server\n</code></pre></div></div>\n<p>って書かれているので、サーバーにGit入れる話で、誤訳なのかなって思ったけど</p>\n<p><qiita-embed-ogp src=\"https://git-scm.com/book/en/v2/Git-on-the-Server-Generating-Your-SSH-Public-Key\"></qiita-embed-ogp></p>\n<p>で</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>Many Git servers ... \n</code></pre></div></div>\n<p>って書かれているので、誤訳じゃなくて普通に使われている言葉っぽいなあと思い、一旦言葉じりについては納得した。</p>\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code>yk@yk ~ % git <span class=\"nt\">--version</span>\ngit version 2.25.0\n</code></pre></div></div>\n<h2>\n<span id=\"gitって川の流れに例えるとわかりやすいよね異論は受け付ける\" class=\"fragment\"></span><a href=\"#git%E3%81%A3%E3%81%A6%E5%B7%9D%E3%81%AE%E6%B5%81%E3%82%8C%E3%81%AB%E4%BE%8B%E3%81%88%E3%82%8B%E3%81%A8%E3%82%8F%E3%81%8B%E3%82%8A%E3%82%84%E3%81%99%E3%81%84%E3%82%88%E3%81%AD%E7%95%B0%E8%AB%96%E3%81%AF%E5%8F%97%E3%81%91%E4%BB%98%E3%81%91%E3%82%8B\"><i class=\"fa fa-link\"></i></a>Gitって川の流れに例えるとわかりやすいよね（異論は受け付ける）</h2>\n<p>Gitのプロトコルには主に</p>\n<ol>\n<li>Local プロトコル</li>\n<li>HTTP/S プロトコル</li>\n<li>SSH プロトコル</li>\n</ol>\n<p>があるみたい。この中のLocalプロトコルは使ったことなかったのでとても新鮮味を感じた。</p>\n<blockquote>\n<p>適当なレポジトリをダウンロードしてくる</p>\n</blockquote>\n<p>とりあえず <a href=\"https://github.com/explore\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/explore</a> から自分にあったいい感じの軽そうなレポジトリを取ってくる。</p>\n<p><a href=\"https://github.com/denoland\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/denoland</a> が 出てきたので一番コミット数少なそうな <a href=\"https://github.com/denoland/ninja_gn_binaries\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/denoland/ninja_gn_binaries</a> を選んで見る。</p>\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code><span class=\"c\"># GitHubから適当なレポジトリをクローンしてくる</span>\n<span class=\"nv\">$ </span>git clone https://github.com/denoland/ninja_gn_binaries\n\nCloning into <span class=\"s1\">'ninja_gn_binaries'</span>...\n<span class=\"o\">(</span>ry<span class=\"o\">)</span>\n\n\n<span class=\"c\"># プロジェクト名.git というフォルダ名をつけて bareレポジトリというのを作成する</span>\n<span class=\"nv\">$ </span>git clone <span class=\"nt\">--bare</span> ninja_gn_binaries ninja_gn_binaries.git\n\n<span class=\"c\"># bareレポジトリに移動</span>\n<span class=\"nv\">$ </span><span class=\"nb\">cd </span>ninja_gn_binaries.git\n\n<span class=\"c\"># git操作に反応するhooksをサンプルを使用できる形に</span>\n<span class=\"nv\">$ </span><span class=\"nb\">mv </span>hooks/post-update.sample hooks/post-update\n\n<span class=\"c\"># 全ユーザーに実行権限付与</span>\n<span class=\"nv\">$ </span><span class=\"nb\">chmod </span>a+x hooks/post-update\n</code></pre></div></div>\n<p>いい感じにローカルプロトコルの準備ができました。<br>\n今回は普通の場所 <code>/Users/yk/workspace/ninja_gn_binaries.git</code> に作りましたが、同じネットワーク内の共有ファイルシステム内においたりすると、ネットワーク内からpull/pushなどのアクセスができるっぽいです。</p>\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span><span class=\"nb\">pwd</span>\n/Users/yk/workspace/ninja_gn_binaries\n\n<span class=\"c\"># remoteの設定をしよう</span>\n<span class=\"nv\">$ </span>git remote add <span class=\"nb\">local</span> /Users/yk/workspace/ninja_gn_binaries.git\n\n<span class=\"c\"># この場合</span>\n<span class=\"c\"># git push local master</span>\n<span class=\"c\"># みたいにアクセスできるようになる</span>\n</code></pre></div></div>\n<p><code>vim .git/config</code></p>\n<div class=\"code-frame\" data-lang=\"config\"><div class=\"highlight\"><pre><code>[<span class=\"n\">core</span>]\n        <span class=\"n\">repositoryformatversion</span> = <span class=\"m\">0</span>\n        <span class=\"n\">filemode</span> = <span class=\"n\">true</span>\n        <span class=\"n\">bare</span> = <span class=\"n\">false</span>\n        <span class=\"n\">logallrefupdates</span> = <span class=\"n\">true</span>\n        <span class=\"n\">ignorecase</span> = <span class=\"n\">true</span>\n        <span class=\"n\">precomposeunicode</span> = <span class=\"n\">true</span>\n[<span class=\"n\">remote</span> <span class=\"s2\">\"origin\"</span>]\n        <span class=\"n\">url</span> = <span class=\"n\">https</span>://<span class=\"n\">github</span>.<span class=\"n\">com</span>/<span class=\"n\">denoland</span>/<span class=\"n\">ninja_gn_binaries</span>\n        <span class=\"n\">fetch</span> = +<span class=\"n\">refs</span>/<span class=\"n\">heads</span>/*:<span class=\"n\">refs</span>/<span class=\"n\">remotes</span>/<span class=\"n\">origin</span>/*\n[<span class=\"n\">branch</span> <span class=\"s2\">\"master\"</span>]\n        <span class=\"n\">remote</span> = <span class=\"n\">origin</span>\n        <span class=\"n\">merge</span> = <span class=\"n\">refs</span>/<span class=\"n\">heads</span>/<span class=\"n\">master</span>\n[<span class=\"n\">remote</span> <span class=\"s2\">\"local\"</span>]\n        <span class=\"n\">url</span> = /<span class=\"n\">Users</span>/<span class=\"n\">yk</span>/<span class=\"n\">workspace</span>/<span class=\"n\">ninja_gn_binaries</span>.<span class=\"n\">git</span>\n        <span class=\"n\">fetch</span> = +<span class=\"n\">refs</span>/<span class=\"n\">heads</span>/*:<span class=\"n\">refs</span>/<span class=\"n\">remotes</span>/<span class=\"n\">local</span>/*\n</code></pre></div></div>\n<p>いい感じに設定できてますね。 <code>origin</code> は <code>https://github.com/denoland/ninja_gn_binaries</code> に設定されているので <code>git push origin master</code> は他人のレポジトリなので権限的にエラーがでると思います。 <code>git push local master</code> なら自分のPC内なのでいい感じにpushできるはず。</p>\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span><span class=\"nb\">pwd</span>\n/Users/yk/workspace/ninja_gn_binaries\n\n<span class=\"nv\">$ </span><span class=\"nb\">touch </span>README.md\n<span class=\"nv\">$ </span>git add <span class=\"nb\">.</span>\n<span class=\"nv\">$ </span>git commit <span class=\"nt\">-m</span> <span class=\"s2\">\"Create readme\"</span>\n<span class=\"o\">[</span>master db503c6] Create readme\n 1 file changed, 0 insertions<span class=\"o\">(</span>+<span class=\"o\">)</span>, 0 deletions<span class=\"o\">(</span>-<span class=\"o\">)</span>\n create mode 100644 README.md\n\n<span class=\"nv\">$ </span>git log\ncommit db503c617db3b9f8ce88c8c1f6afc9a71d4675f8 <span class=\"o\">(</span>HEAD -&gt; master, <span class=\"nb\">local</span>/master<span class=\"o\">)</span>\nAuthor: Yuki &lt;yuki@example.com&gt;\nDate:   Thu Jul 9 00:31:45 2020 +0900\n\n    Create readme\n\ncommit 50abf78bdabe66518865e3b9fdfaaade87bcfded <span class=\"o\">(</span>tag: 20200506, origin/master, origin/HEAD<span class=\"o\">)</span>\nAuthor: Bert Belder &lt;bertbelder@gmail.com&gt;\nDate:   Wed May 6 01:41:43 2020 +0200\n\n    Update gn to git revision 5ed3c9cc\n</code></pre></div></div>\n<p>いい感じに <code>local/master</code> にpushできました！<br>\nこのremoteのブランチを別のファイルにcloneしてきましょう！</p>\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span><span class=\"nb\">pwd</span>\n/Users/yk/workspace\n\n<span class=\"nv\">$ </span>git clone /Users/yk/workspace/ninja_gn_binaries.git second-clone-sample\nCloning into <span class=\"s1\">'second-clone-sample'</span>...\n<span class=\"k\">done</span><span class=\"nb\">.</span>\n\n<span class=\"nv\">$ </span>ll | <span class=\"nb\">grep </span>second-clone-sample\ndrwxr-xr-x   7 yk  staff   224  7  9 00:37 second-clone-sample\n\n<span class=\"nv\">$ </span><span class=\"nb\">cd </span>second-clone-sample\n\n<span class=\"nv\">$ </span>git log\ncommit db503c617db3b9f8ce88c8c1f6afc9a71d4675f8 <span class=\"o\">(</span>HEAD -&gt; master, origin/master, origin/HEAD<span class=\"o\">)</span>\nAuthor: Yuki &lt;yuki@example.com&gt;\nDate:   Thu Jul 9 00:31:45 2020 +0900\n\n    Create readme\n\ncommit 50abf78bdabe66518865e3b9fdfaaade87bcfded <span class=\"o\">(</span>tag: 20200506<span class=\"o\">)</span>\nAuthor: Bert Belder &lt;bertbelder@gmail.com&gt;\nDate:   Wed May 6 01:41:43 2020 +0200\n\n    Update gn to git revision 5ed3c9cc\n\n</code></pre></div></div>\n<p>別のフォルダにcloneしてくることができました。 <img alt=\":clap:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f44f.png\" title=\":clap:\" width=\"20\" loading=\"lazy\"></p>\n<ol>\n<li>Local プロトコル</li>\n</ol>\n<p>の話が終わったのですが、</p>\n<ol>\n<li>HTTP/S プロトコル</li>\n<li>SSH プロトコル</li>\n</ol>\n<p>は簡単で</p>\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code><span class=\"c\"># HTTP/S プロトコル</span>\ngit clone https://github.com/denoland/ninja_gn_binaries.git\n<span class=\"c\"># 仮にプライベートレポジトリの場合、この段階でID/Passwordが聞かれる</span>\n\n\n<span class=\"c\"># SSH プロトコル</span>\ngit@github.com:denoland/ninja_gn_binaries.git\n<span class=\"c\"># 公開鍵を登録していると使えて</span>\n<span class=\"c\"># プライベートレポジトリでもID/Passの入力なしで使える</span>\n</code></pre></div></div>\n<p>いつも見ているあれです！GitHubのここ</p>\n<a href=\"https://camo.qiitausercontent.com/2b8e4e537729dbc4548c7b7ae1c13c753faeb0b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f64666338376462362d383264362d333662352d363231322d3031663439376133353163322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"1352\" alt=\"スクリーンショット 2020-07-09 0.40.17.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fdfc87db6-82d6-36b5-6212-01f497a351c2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=41c40991f83b7ff8efe2f440a29c5f62\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/dfc87db6-82d6-36b5-6212-01f497a351c2.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fdfc87db6-82d6-36b5-6212-01f497a351c2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a2d24210f19ef7a2da28a260717b9570 1x\" loading=\"lazy\"></a>\n<p>bareレポジトリの本質的なものは、 <code>git init</code> したときに作られる <code>.git</code> フォルダだけを管理しているレポジトリみたいです。[https://git-scm.com/book/ja/v2/Gitサーバー-サーバー用の-Git-の取得]</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ mkdir sample\n\n$ cd sample\n\n$ ls\n\n$ ll\ntotal 0\ndrwxr-xr-x   2 yk  staff   64  7  9 00:49 .\ndrwxr-xr-x  10 yk  staff  320  7  9 00:49 ..\n\n$ git init\nInitialized empty Git repository in /Users/yk/workspace/sample/.git/\n\n$ ll\ntotal 0\ndrwxr-xr-x   3 yk  staff   96  7  9 00:49 .\ndrwxr-xr-x  10 yk  staff  320  7  9 00:49 ..\ndrwxr-xr-x   9 yk  staff  288  7  9 00:49 .git\n</code></pre></div></div>\n<p>このlocalプロトコルを作成したときの bare というファイルの実態を持たないものがいわゆる世間で言われる <code>Gitサーバー</code> で、世の中にGitサーバーを構築してGit管理したいって思っている人たちの選択肢は次の3つくらいだと思っている。</p>\n<ol>\n<li>GitHub/GitLab/その他ホスティングサービスを使う</li>\n<li>同じサーバー上の別の階層にbareレポジトリを置く</li>\n<li>別のサーバー上にbareレポジトリを置く</li>\n</ol>\n<p>特に「社内でセキュリティが…」って理由がない限りは「マイクロソフトが買収した設計図サイトです！」と上司を説得してGitHubをbareレポジトリの代わりにする方向が一番きれいかなと思いました。イシュートラッカーとかカンバンとかプルリクエストとか使えるし、便利かなと</p>\n<h2>\n<span id=\"ついに始まるサーバにgit入れてみるサーバー構築編\" class=\"fragment\"></span><a href=\"#%E3%81%A4%E3%81%84%E3%81%AB%E5%A7%8B%E3%81%BE%E3%82%8B%E3%82%B5%E3%83%BC%E3%83%90%E3%81%ABgit%E5%85%A5%E3%82%8C%E3%81%A6%E3%81%BF%E3%82%8B%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E6%A7%8B%E7%AF%89%E7%B7%A8\"><i class=\"fa fa-link\"></i></a>ついに始まるサーバにGit入れてみるサーバー構築編</h2>\n<p>ここみてGCPの無料VPSをたちあげた<br>\n<a href=\"https://22musyoku.tokyo/gce-always-free/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://22musyoku.tokyo/gce-always-free/</a></p>\n<p>公開鍵を登録したら、こんな感じでSSHできる。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>yk@yk sample % ssh 3X.1XX.XX.45\n\n(yes)\n\nWelcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-1019-gcp x86_64)\n\n(ryaku)\n\nyk@lwaysfree-micro:~$\n</code></pre></div></div>\n<p>GCP-Ubuntu20.04だとgitが入ってなかったので適当にいれる。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ git\n-bash: git: command not found\n$ sudo apt update\n$ sudo apt upgrade\n$ git --version\ngit version 2.25.1\n</code></pre></div></div>\n<p>projectのbareレポを作る</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ sudo mkdir /opt/git\n$ sudo mkdir /opt/git/project.git\n$ cd /opt/git/project.git\n$ sudo git init --bare\nInitialized empty Git repository in /opt/git/project.git/\n</code></pre></div></div>\n<p>ローカルPCでいろいろごりごり</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ git status\nOn branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)\n$ touch README.md\n$ git add .\n$ git commit -m \"INIT\"\n[master (root-commit) 909289c] INIT\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 README.md\n$\n\n# リモートの設定する\n# ykとIPアドレスの部分は適宜変えて\n$ git remote add origin yk@34.105.XX.XX:/opt/git/project.git\n$ git push origin master\n</code></pre></div></div>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>% git push origin master\n\nEnumerating objects: 3, done.\nCounting objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 213 bytes | 213.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nerror: remote unpack failed: unable to create temporary object directory\nTo 34.105.93.45:/opt/git/project.git\n ! [remote rejected] master -&gt; master (unpacker error)\nerror: failed to push some refs to 'yk@34.105.93.45:/opt/git/project.git'\n</code></pre></div></div>\n<p>書き込みのエラーが出たので一旦ユーザー所有者にする</p>\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code>yk@lwaysfree-micro:/opt/git<span class=\"nv\">$ </span><span class=\"nb\">sudo chown </span>yk project.git/ <span class=\"nt\">-R</span>\nyk@lwaysfree-micro:/opt/git<span class=\"nv\">$ </span>ll\ntotal 12\ndrwxr-xr-x 3 root root 4096 Jul  8 16:11 ./\ndrwxr-xr-x 3 root root 4096 Jul  8 16:10 ../\ndrwxr-xr-x 7 yk   root 4096 Jul  8 16:34 project.git/\n</code></pre></div></div>\n<p>OKそう。push成功！</p>\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code>% git push origin master\n\nEnumerating objects: 3, <span class=\"k\">done</span><span class=\"nb\">.</span>\nCounting objects: 100% <span class=\"o\">(</span>3/3<span class=\"o\">)</span>, <span class=\"k\">done</span><span class=\"nb\">.</span>\nWriting objects: 100% <span class=\"o\">(</span>3/3<span class=\"o\">)</span>, 213 bytes | 213.00 KiB/s, <span class=\"k\">done</span><span class=\"nb\">.</span>\nTotal 3 <span class=\"o\">(</span>delta 0<span class=\"o\">)</span>, reused 0 <span class=\"o\">(</span>delta 0<span class=\"o\">)</span>\nTo 34.105.93.45:/opt/git/project.git\n <span class=\"k\">*</span> <span class=\"o\">[</span>new branch]      master -&gt; master\n</code></pre></div></div>\n<p>localにクローンしてくることもできます！いい感じですね。<br>\nこれが噂のGit用だけのGitサーバーか…</p>\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>git clone yk@34.105.XX.XX:/opt/git/project.git sample-clone\nCloning into <span class=\"s1\">'sample-clone'</span>...\nremote: Enumerating objects: 3, <span class=\"k\">done</span><span class=\"nb\">.</span>\nremote: Counting objects: 100% <span class=\"o\">(</span>3/3<span class=\"o\">)</span>, <span class=\"k\">done</span><span class=\"nb\">.</span>\nremote: Total 3 <span class=\"o\">(</span>delta 0<span class=\"o\">)</span>, reused 0 <span class=\"o\">(</span>delta 0<span class=\"o\">)</span>\nReceiving objects: 100% <span class=\"o\">(</span>3/3<span class=\"o\">)</span>, <span class=\"k\">done</span><span class=\"nb\">.</span>\n\n<span class=\"nv\">$ </span><span class=\"nb\">cd </span>sample-clone\n\ny<span class=\"nv\">$ </span>git log\ncommit 909289c7a8057ec6fcb207da70684e9daa81e39e <span class=\"o\">(</span>HEAD -&gt; master, origin/master, origin/HEAD<span class=\"o\">)</span>\nAuthor: Yuki &lt;yuki@example.com&gt;\nDate:   Thu Jul 9 01:22:46 2020 +0900\n</code></pre></div></div>\n<p><code>4.10 Gitサーバー - まとめ</code> に書かれていますが</p>\n<blockquote>\n<p>自前でサーバーを構築すれば、多くのことを制御できるようになり、ファイアウォールの内側でもサーバーを実行することができます。 しかし、サーバーを構築して運用するにはそれなりの手間がかかります。ホスティングサービスを使えば、サーバーの準備や保守は簡単になります。 しかし、他人のサーバー上に自分のコードを置き続けなければなりません。組織によってはそんなことを許可していないかもしれません。</p>\n</blockquote>\n<p>可能ならGitHubとか使いましょう〜</p>\n<h2>\n<span id=\"gitweb立ち上げてみる\" class=\"fragment\"></span><a href=\"#gitweb%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%92%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>GitWeb立ち上げてみる</h2>\n<p><code>4.7 Gitサーバー - GitWeb</code></p>\n<p>簡単にGitのなにそれをWebで見えるいい感じのサーバーが立ち上げられます。(macだとrubyが入っているので)</p>\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code>yk@yk workspace % <span class=\"nb\">mkdir </span>sample\nyk@yk workspace % <span class=\"nb\">cd </span>sample \nyk@yk sample % git init \nInitialized empty Git repository <span class=\"k\">in</span> /Users/yk/workspace/sample/.git/\nyk@yk sample % <span class=\"nb\">touch </span>README.md\nyk@yk sample % git add README.md \nyk@yk sample % git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  <span class=\"o\">(</span>use <span class=\"s2\">\"git rm --cached &lt;file&gt;...\"</span> to unstage<span class=\"o\">)</span>\n\tnew file:   README.md\n\nyk@yk sample % git commit <span class=\"nt\">-m</span> <span class=\"s2\">\"INIT\"</span>\n<span class=\"o\">[</span>master <span class=\"o\">(</span>root-commit<span class=\"o\">)</span> 290565d] INIT\n 1 file changed, 0 insertions<span class=\"o\">(</span>+<span class=\"o\">)</span>, 0 deletions<span class=\"o\">(</span>-<span class=\"o\">)</span>\n create mode 100644 README.md\nyk@yk sample % git instaweb <span class=\"nt\">--httpd</span><span class=\"o\">=</span>webrick <span class=\"nt\">--stop</span>\nyk@yk sample % git instaweb <span class=\"nt\">--httpd</span><span class=\"o\">=</span>webrick       \nyk@yk sample % \n\n<span class=\"c\"># http://127.0.0.1:1234/ が立ち上がります！！！！！</span>\n\n<span class=\"c\"># 必要なくなったら落とす</span>\nyk@yk sample % git instaweb <span class=\"nt\">--httpd</span><span class=\"o\">=</span>webrick <span class=\"nt\">--stop</span>\n</code></pre></div></div>\n<a href=\"https://camo.qiitausercontent.com/a9f9221265455cf2e0885ac516233aa350ba8556/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f32633337633562622d323364662d343833632d323262642d3536323934653438653165372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"1680\" alt=\"スクリーンショット 2020-07-10 23.46.16.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F2c37c5bb-23df-483c-22bd-56294e48e1e7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=292dca34caa3d4e0d9fa850ff0f35dc8\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/2c37c5bb-23df-483c-22bd-56294e48e1e7.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F2c37c5bb-23df-483c-22bd-56294e48e1e7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3a5136c10d5ab931f40eda9219e52da1 1x\" loading=\"lazy\"></a>\n<p>これでSource Treeとか必要ないですね！！！！！（極論）</p>\n<p>正直TIGとかのほうが好きだと思ってしまったのはここだけの話。</p>\n<p><code>4.8 Gitサーバー - GitLab</code> でGitWeb使うくらいならGitLab使おうぜ…OSSだし。みたいな雰囲気が醸し出されています。</p>\n<h2>\n<span id=\"結論gitサーバーって何\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E8%AB%96git%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%A3%E3%81%A6%E4%BD%95\"><i class=\"fa fa-link\"></i></a>結論Gitサーバーって何?</h2>\n<p>調べてもよくわからなかった。</p>\n<p>Gitだけのために用意している、踏み台サーバー的な存在のことを <code>Gitサーバー</code> って呼んでいるのかと思った。<br>\nbareレポジトリをホストするだけならわざわざサーバーを建てずに、プロジェクトと同じサーバーの別の階層におけばいいのでは、と思いました。（感想）</p>\n<p>.</p>\n","body":"# Gitって難しいよね\n\nこんにちは @ykhirao です！！フリーランスエンジニア初めて2週間立ちましたが、案件に入って初めてやったことは開発ではなくGit/GitHubを導入でした。いまWinSCP/TeraTermからGitベースのデプロイ環境を構築しようと思って、改めてGitに関して調べ直していました。\n\nその知見を書いていく。\n\n基本的にはここ [https://git-scm.com/book/ja/v2/Gitサーバー-プロトコル](https://git-scm.com/book/ja/v2/Git%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC-%E3%83%97%E3%83%AD%E3%83%88%E3%82%B3%E3%83%AB) の4章の内容を中心に書いていこうかと思います。\n\n> Git標準でついているGitWebを立ち上げてみたり\n\n<img width=\"1680\" alt=\"スクリーンショット 2020-07-10 23.46.16.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/2c37c5bb-23df-483c-22bd-56294e48e1e7.png\">\n\n> GitHubとか使うんではなくてbareレポジトリというものをGCPのVPSに置いてみたり\n\nそんな感じのQiitaです。暇があったらGitサーバーってなんじゃらほいって自分でも調べてみてください。私にはよくわからなかったです。たぶんGitのbareレポジトリ(つまり.git/ディレクトリ)をホストしているだけのサーバーのこと…\n\n\n## 最初Gitサーバーって何言ってるのかと思った\n\nGitサーバーって何？パルプンテ状態でした。\n\n\n```\nGit on the Server\n```\n\nって書かれているので、サーバーにGit入れる話で、誤訳なのかなって思ったけど\n\nhttps://git-scm.com/book/en/v2/Git-on-the-Server-Generating-Your-SSH-Public-Key\n\nで\n\n```\nMany Git servers ... \n```\n\nって書かれているので、誤訳じゃなくて普通に使われている言葉っぽいなあと思い、一旦言葉じりについては納得した。\n\n```bash\nyk@yk ~ % git --version\ngit version 2.25.0\n```\n\n## Gitって川の流れに例えるとわかりやすいよね（異論は受け付ける）\n\n\nGitのプロトコルには主に\n\n1. Local プロトコル\n2. HTTP/S プロトコル \n3. SSH プロトコル \n\nがあるみたい。この中のLocalプロトコルは使ったことなかったのでとても新鮮味を感じた。\n\n> 適当なレポジトリをダウンロードしてくる\n\nとりあえず https://github.com/explore から自分にあったいい感じの軽そうなレポジトリを取ってくる。\n\nhttps://github.com/denoland が 出てきたので一番コミット数少なそうな https://github.com/denoland/ninja_gn_binaries を選んで見る。\n\n```bash\n# GitHubから適当なレポジトリをクローンしてくる\n$ git clone https://github.com/denoland/ninja_gn_binaries\n\nCloning into 'ninja_gn_binaries'...\n(ry)\n\n\n# プロジェクト名.git というフォルダ名をつけて bareレポジトリというのを作成する\n$ git clone --bare ninja_gn_binaries ninja_gn_binaries.git\n\n# bareレポジトリに移動\n$ cd ninja_gn_binaries.git\n\n# git操作に反応するhooksをサンプルを使用できる形に\n$ mv hooks/post-update.sample hooks/post-update\n\n# 全ユーザーに実行権限付与\n$ chmod a+x hooks/post-update\n```\n\nいい感じにローカルプロトコルの準備ができました。\n今回は普通の場所 `/Users/yk/workspace/ninja_gn_binaries.git` に作りましたが、同じネットワーク内の共有ファイルシステム内においたりすると、ネットワーク内からpull/pushなどのアクセスができるっぽいです。\n\n```bash\n$ pwd\n/Users/yk/workspace/ninja_gn_binaries\n\n# remoteの設定をしよう\n$ git remote add local /Users/yk/workspace/ninja_gn_binaries.git\n\n# この場合\n# git push local master\n# みたいにアクセスできるようになる\n```\n\n\n`vim .git/config`\n\n```config\n[core]\n        repositoryformatversion = 0\n        filemode = true\n        bare = false\n        logallrefupdates = true\n        ignorecase = true\n        precomposeunicode = true\n[remote \"origin\"]\n        url = https://github.com/denoland/ninja_gn_binaries\n        fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n        remote = origin\n        merge = refs/heads/master\n[remote \"local\"]\n        url = /Users/yk/workspace/ninja_gn_binaries.git\n        fetch = +refs/heads/*:refs/remotes/local/*\n```\n\nいい感じに設定できてますね。 `origin` は `https://github.com/denoland/ninja_gn_binaries` に設定されているので `git push origin master` は他人のレポジトリなので権限的にエラーがでると思います。 `git push local master` なら自分のPC内なのでいい感じにpushできるはず。\n\n\n```bash\n$ pwd\n/Users/yk/workspace/ninja_gn_binaries\n\n$ touch README.md\n$ git add .\n$ git commit -m \"Create readme\"\n[master db503c6] Create readme\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 README.md\n\n$ git log\ncommit db503c617db3b9f8ce88c8c1f6afc9a71d4675f8 (HEAD -> master, local/master)\nAuthor: Yuki <yuki@example.com>\nDate:   Thu Jul 9 00:31:45 2020 +0900\n\n    Create readme\n\ncommit 50abf78bdabe66518865e3b9fdfaaade87bcfded (tag: 20200506, origin/master, origin/HEAD)\nAuthor: Bert Belder <bertbelder@gmail.com>\nDate:   Wed May 6 01:41:43 2020 +0200\n\n    Update gn to git revision 5ed3c9cc\n```\n\nいい感じに `local/master` にpushできました！\nこのremoteのブランチを別のファイルにcloneしてきましょう！\n\n```bash\n$ pwd\n/Users/yk/workspace\n\n$ git clone /Users/yk/workspace/ninja_gn_binaries.git second-clone-sample\nCloning into 'second-clone-sample'...\ndone.\n\n$ ll | grep second-clone-sample\ndrwxr-xr-x   7 yk  staff   224  7  9 00:37 second-clone-sample\n\n$ cd second-clone-sample\n\n$ git log\ncommit db503c617db3b9f8ce88c8c1f6afc9a71d4675f8 (HEAD -> master, origin/master, origin/HEAD)\nAuthor: Yuki <yuki@example.com>\nDate:   Thu Jul 9 00:31:45 2020 +0900\n\n    Create readme\n\ncommit 50abf78bdabe66518865e3b9fdfaaade87bcfded (tag: 20200506)\nAuthor: Bert Belder <bertbelder@gmail.com>\nDate:   Wed May 6 01:41:43 2020 +0200\n\n    Update gn to git revision 5ed3c9cc\n\n```\n\n別のフォルダにcloneしてくることができました。 :clap: \n\n\n1. Local プロトコル\n\nの話が終わったのですが、\n\n2. HTTP/S プロトコル\n3. SSH プロトコル\n\nは簡単で\n\n```bash\n# HTTP/S プロトコル\ngit clone https://github.com/denoland/ninja_gn_binaries.git\n# 仮にプライベートレポジトリの場合、この段階でID/Passwordが聞かれる\n\n\n# SSH プロトコル\ngit@github.com:denoland/ninja_gn_binaries.git\n# 公開鍵を登録していると使えて\n# プライベートレポジトリでもID/Passの入力なしで使える\n```\n\nいつも見ているあれです！GitHubのここ\n\n<img width=\"1352\" alt=\"スクリーンショット 2020-07-09 0.40.17.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/dfc87db6-82d6-36b5-6212-01f497a351c2.png\">\n\nbareレポジトリの本質的なものは、 `git init` したときに作られる `.git` フォルダだけを管理しているレポジトリみたいです。[https://git-scm.com/book/ja/v2/Gitサーバー-サーバー用の-Git-の取得]\n\n```\n$ mkdir sample\n\n$ cd sample\n\n$ ls\n\n$ ll\ntotal 0\ndrwxr-xr-x   2 yk  staff   64  7  9 00:49 .\ndrwxr-xr-x  10 yk  staff  320  7  9 00:49 ..\n\n$ git init\nInitialized empty Git repository in /Users/yk/workspace/sample/.git/\n\n$ ll\ntotal 0\ndrwxr-xr-x   3 yk  staff   96  7  9 00:49 .\ndrwxr-xr-x  10 yk  staff  320  7  9 00:49 ..\ndrwxr-xr-x   9 yk  staff  288  7  9 00:49 .git\n```\n\nこのlocalプロトコルを作成したときの bare というファイルの実態を持たないものがいわゆる世間で言われる `Gitサーバー` で、世の中にGitサーバーを構築してGit管理したいって思っている人たちの選択肢は次の3つくらいだと思っている。\n\n1. GitHub/GitLab/その他ホスティングサービスを使う\n1. 同じサーバー上の別の階層にbareレポジトリを置く\n1. 別のサーバー上にbareレポジトリを置く\n\n\n特に「社内でセキュリティが…」って理由がない限りは「マイクロソフトが買収した設計図サイトです！」と上司を説得してGitHubをbareレポジトリの代わりにする方向が一番きれいかなと思いました。イシュートラッカーとかカンバンとかプルリクエストとか使えるし、便利かなと\n\n\n## ついに始まるサーバにGit入れてみるサーバー構築編\n\nここみてGCPの無料VPSをたちあげた\nhttps://22musyoku.tokyo/gce-always-free/\n\n公開鍵を登録したら、こんな感じでSSHできる。\n\n```\nyk@yk sample % ssh 3X.1XX.XX.45\n\n(yes)\n\nWelcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-1019-gcp x86_64)\n\n(ryaku)\n\nyk@lwaysfree-micro:~$\n```\n\nGCP-Ubuntu20.04だとgitが入ってなかったので適当にいれる。\n\n```\n$ git\n-bash: git: command not found\n$ sudo apt update\n$ sudo apt upgrade\n$ git --version\ngit version 2.25.1\n```\n\nprojectのbareレポを作る\n\n```\n$ sudo mkdir /opt/git\n$ sudo mkdir /opt/git/project.git\n$ cd /opt/git/project.git\n$ sudo git init --bare\nInitialized empty Git repository in /opt/git/project.git/\n```\n\nローカルPCでいろいろごりごり\n\n```\n$ git status\nOn branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)\n$ touch README.md\n$ git add .\n$ git commit -m \"INIT\"\n[master (root-commit) 909289c] INIT\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 README.md\n$\n\n# リモートの設定する\n# ykとIPアドレスの部分は適宜変えて\n$ git remote add origin yk@34.105.XX.XX:/opt/git/project.git\n$ git push origin master\n```\n\n\n\n```\n% git push origin master\n\nEnumerating objects: 3, done.\nCounting objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 213 bytes | 213.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nerror: remote unpack failed: unable to create temporary object directory\nTo 34.105.93.45:/opt/git/project.git\n ! [remote rejected] master -> master (unpacker error)\nerror: failed to push some refs to 'yk@34.105.93.45:/opt/git/project.git'\n```\n\n書き込みのエラーが出たので一旦ユーザー所有者にする\n\n```bash\nyk@lwaysfree-micro:/opt/git$ sudo chown yk project.git/ -R\nyk@lwaysfree-micro:/opt/git$ ll\ntotal 12\ndrwxr-xr-x 3 root root 4096 Jul  8 16:11 ./\ndrwxr-xr-x 3 root root 4096 Jul  8 16:10 ../\ndrwxr-xr-x 7 yk   root 4096 Jul  8 16:34 project.git/\n```\n\nOKそう。push成功！\n\n```bash\n% git push origin master\n\nEnumerating objects: 3, done.\nCounting objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 213 bytes | 213.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo 34.105.93.45:/opt/git/project.git\n * [new branch]      master -> master\n```\n\nlocalにクローンしてくることもできます！いい感じですね。\nこれが噂のGit用だけのGitサーバーか…\n\n```bash\n$ git clone yk@34.105.XX.XX:/opt/git/project.git sample-clone\nCloning into 'sample-clone'...\nremote: Enumerating objects: 3, done.\nremote: Counting objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (3/3), done.\n\n$ cd sample-clone\n\ny$ git log\ncommit 909289c7a8057ec6fcb207da70684e9daa81e39e (HEAD -> master, origin/master, origin/HEAD)\nAuthor: Yuki <yuki@example.com>\nDate:   Thu Jul 9 01:22:46 2020 +0900\n```\n\n`4.10 Gitサーバー - まとめ` に書かれていますが\n\n\n> 自前でサーバーを構築すれば、多くのことを制御できるようになり、ファイアウォールの内側でもサーバーを実行することができます。 しかし、サーバーを構築して運用するにはそれなりの手間がかかります。ホスティングサービスを使えば、サーバーの準備や保守は簡単になります。 しかし、他人のサーバー上に自分のコードを置き続けなければなりません。組織によってはそんなことを許可していないかもしれません。\n\n\n可能ならGitHubとか使いましょう〜\n\n\n## GitWeb立ち上げてみる\n\n`4.7 Gitサーバー - GitWeb`\n\n簡単にGitのなにそれをWebで見えるいい感じのサーバーが立ち上げられます。(macだとrubyが入っているので)\n\n```bash\nyk@yk workspace % mkdir sample\nyk@yk workspace % cd sample \nyk@yk sample % git init \nInitialized empty Git repository in /Users/yk/workspace/sample/.git/\nyk@yk sample % touch README.md\nyk@yk sample % git add README.md \nyk@yk sample % git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n\tnew file:   README.md\n\nyk@yk sample % git commit -m \"INIT\"\n[master (root-commit) 290565d] INIT\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 README.md\nyk@yk sample % git instaweb --httpd=webrick --stop\nyk@yk sample % git instaweb --httpd=webrick       \nyk@yk sample % \n\n# http://127.0.0.1:1234/ が立ち上がります！！！！！\n\n# 必要なくなったら落とす\nyk@yk sample % git instaweb --httpd=webrick --stop\n```\n\n<img width=\"1680\" alt=\"スクリーンショット 2020-07-10 23.46.16.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/2c37c5bb-23df-483c-22bd-56294e48e1e7.png\">\n\nこれでSource Treeとか必要ないですね！！！！！（極論）\n\n正直TIGとかのほうが好きだと思ってしまったのはここだけの話。\n\n`4.8 Gitサーバー - GitLab` でGitWeb使うくらいならGitLab使おうぜ…OSSだし。みたいな雰囲気が醸し出されています。\n\n## 結論Gitサーバーって何?\n\n調べてもよくわからなかった。\n\nGitだけのために用意している、踏み台サーバー的な存在のことを `Gitサーバー` って呼んでいるのかと思った。\nbareレポジトリをホストするだけならわざわざサーバーを建てずに、プロジェクトと同じサーバーの別の階層におけばいいのでは、と思いました。（感想）\n\n\n.\n","coediting":false,"comments_count":0,"created_at":"2020-07-11T11:32:30+09:00","group":null,"id":"c172d09943e932899c9e","likes_count":16,"private":false,"reactions_count":0,"tags":[{"name":"Git","versions":[]},{"name":"GitHub","versions":[]},{"name":"GitLab","versions":[]}],"title":"【Gitサーバー】サーバーにGitを入れてGitサーバー構築してみた【GitWeb】","updated_at":"2022-06-09T02:15:03+09:00","url":"https://qiita.com/ykhirao/items/c172d09943e932899c9e","user":{"description":"Web Developer For 6 years.\r\nPHP/Laravel && (React OR Vue.js)\r\nTypeScript/node.js\r\n\r\n業務委託の依頼とかはWantedlyとかからでお願いします！","facebook_id":"","followees_count":38,"followers_count":95,"github_login_name":"ykhirao","id":"ykhirao","items_count":59,"linkedin_id":"","location":"Tokyo, Japan","name":"yk","organization":"","permanent_id":112929,"profile_image_url":"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/profile-images/1639030792","team_only":false,"twitter_screen_name":"yk_hirao","website_url":"https://www.wantedly.com/id/ykhirao"},"page_views_count":null,"team_membership":null}},"path":"posts/c172d09943e932899c9e"}
