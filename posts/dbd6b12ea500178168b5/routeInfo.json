{"template":"__react_static_root__/src/components/QiitaPost","sharedHashesByProp":{},"data":{"post":{"rendered_body":"\n<h1>\n<span id=\"lockファイルって邪魔だよねって思っている人いたら校舎裏来てください優しく解説します\" class=\"fragment\"></span><a href=\"#lock%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%A3%E3%81%A6%E9%82%AA%E9%AD%94%E3%81%A0%E3%82%88%E3%81%AD%E3%81%A3%E3%81%A6%E6%80%9D%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E4%BA%BA%E3%81%84%E3%81%9F%E3%82%89%E6%A0%A1%E8%88%8E%E8%A3%8F%E6%9D%A5%E3%81%A6%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84%E5%84%AA%E3%81%97%E3%81%8F%E8%A7%A3%E8%AA%AC%E3%81%97%E3%81%BE%E3%81%99\"><i class=\"fa fa-link\"></i></a>.lockファイルって邪魔だよね。って思っている人いたら校舎裏来てください。優しく解説します。</h1>\n\n<p>こんにちは！ <a href=\"/ykhirao\" class=\"user-mention js-hovercard\" title=\"ykhirao\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"ykhirao\">@ykhirao</a> です。最近ジョインさせていただいた案件で <code>composer.lock</code> のバージョンが本番が一番新しくて、ローカルが一番古い素敵な状況を発見しました <img alt=\":relaxed:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/263a-fe0f.png\" title=\":relaxed:\" width=\"20\" loading=\"lazy\"></p>\n\n<p>本番環境でSSHして <code>composer update</code> かけたんだなあーー。そっかーーー、バグ起きたらどないすんねん、。。。。。。</p>\n\n<p>というのが私の感想で、実際にnpmパッケージを使ってバグを再現しながら<br>\nゆっくり解説していこうと思います。どうぞ最後までよろしくお願いします。！！！</p>\n\n<blockquote>\n<p>このQiitaを呼んで得ること</p>\n</blockquote>\n\n<ul>\n<li>あーー、ほんとだ。バグが入る可能性があるんだ！</li>\n<li>lockファイルはちゃんとコミットするね！</li>\n</ul>\n\n<p>というお気持ちになれると思います。</p>\n\n<blockquote>\n<p>このQiitaで解説しないこと</p>\n</blockquote>\n\n<ul>\n<li>詳しい依存関係の解消法</li>\n<li>packageの公開の仕方</li>\n<li>むずかしいはなし</li>\n</ul>\n\n<p>です！</p>\n\n<h2>\n<span id=\"さて時系列を見てみよう\" class=\"fragment\"></span><a href=\"#%E3%81%95%E3%81%A6%E6%99%82%E7%B3%BB%E5%88%97%E3%82%92%E8%A6%8B%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86\"><i class=\"fa fa-link\"></i></a>さて時系列を見てみよう！</h2>\n\n<p>こんな事故が起こる可能性がありますよって話をします。</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center\">時系列</th>\n<th style=\"text-align: center\">OSSのmypackage.js</th>\n<th style=\"text-align: center\">ローカル</th>\n<th style=\"text-align: center\">本番サーバー</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center\">1日目</td>\n<td style=\"text-align: center\">v1.0.0公開</td>\n<td style=\"text-align: center\">動いている</td>\n<td style=\"text-align: center\">動いている</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">2日目</td>\n<td style=\"text-align: center\"></td>\n<td style=\"text-align: center\">ローカルでmypackage.jsをinstall<br>動作確認OK、明後日本番に適応させる</td>\n<td style=\"text-align: center\"></td>\n</tr>\n<tr>\n<td style=\"text-align: center\">3日目</td>\n<td style=\"text-align: center\">v1.0.1公開 バグあり</td>\n<td style=\"text-align: center\"></td>\n<td style=\"text-align: center\"></td>\n</tr>\n<tr>\n<td style=\"text-align: center\">4日目</td>\n<td style=\"text-align: center\"></td>\n<td style=\"text-align: center\"></td>\n<td style=\"text-align: center\">本番サーバーで新しいコードを反映、install。本番が動かなくなってしまった。ぴえん<br>もちろんソースコードはローカルと同じだし、ローカルで動いていたのになんで…？<img alt=\":flushed:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f633.png\" title=\":flushed:\" width=\"20\" loading=\"lazy\">\n</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">5日目</td>\n<td style=\"text-align: center\">v1.0.2公開 バグ修正された</td>\n<td style=\"text-align: center\"></td>\n<td style=\"text-align: center\"></td>\n</tr>\n<tr>\n<td style=\"text-align: center\">6日目</td>\n<td style=\"text-align: center\"></td>\n<td style=\"text-align: center\">v1.0.2を適応ローカル確認OK<br> 今度はlockファイルを本番にアップロードする予定！</td>\n<td style=\"text-align: center\"></td>\n</tr>\n<tr>\n<td style=\"text-align: center\">7日目</td>\n<td style=\"text-align: center\"></td>\n<td style=\"text-align: center\"></td>\n<td style=\"text-align: center\">package-lock.jsonを使ってinstallする！今度は動いた！</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id=\"npmでパッケージを作りながら説明する\" class=\"fragment\"></span><a href=\"#npm%E3%81%A7%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%92%E4%BD%9C%E3%82%8A%E3%81%AA%E3%81%8C%E3%82%89%E8%AA%AC%E6%98%8E%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>npmでパッケージを作りながら説明する</h2>\n\n<p>OSSっぽい動作をするpackageフォルダと、ローカル環境と本番環境っぽいフォルダを作る。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code>yk@yk ~ % <span class=\"nb\">cd </span>qiita \nyk@yk qiita % <span class=\"nb\">mkdir </span>package\nyk@yk qiita % <span class=\"nb\">mkdir local\n</span>yk@yk qiita % <span class=\"nb\">mkdir </span>production\nyk@yk qiita % ll\ntotal 0\ndrwxr-xr-x   5 yk  staff   160  7 11 00:34 <span class=\"nb\">.</span>\ndrwxr-xr-x+ 83 yk  staff  2656  7 11 00:33 ..\ndrwxr-xr-x   2 yk  staff    64  7 11 00:34 <span class=\"nb\">local\n</span>drwxr-xr-x   2 yk  staff    64  7 11 00:34 package\ndrwxr-xr-x   2 yk  staff    64  7 11 00:34 production\n</code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code>yk@yk qiita % <span class=\"nb\">cd </span>package \nyk@yk package % npm init <span class=\"nt\">-y</span>\nWrote to /Users/yk/qiita/package/package.json:\n\n<span class=\"o\">{</span>\n  <span class=\"s2\">\"name\"</span>: <span class=\"s2\">\"package\"</span>,\n  <span class=\"s2\">\"version\"</span>: <span class=\"s2\">\"1.0.0\"</span>,\n  <span class=\"s2\">\"description\"</span>: <span class=\"s2\">\"\"</span>,\n  <span class=\"s2\">\"main\"</span>: <span class=\"s2\">\"index.js\"</span>,\n  <span class=\"s2\">\"scripts\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"test\"</span>: <span class=\"s2\">\"echo </span><span class=\"se\">\\\"</span><span class=\"s2\">Error: no test specified</span><span class=\"se\">\\\"</span><span class=\"s2\"> &amp;&amp; exit 1\"</span>\n  <span class=\"o\">}</span>,\n  <span class=\"s2\">\"keywords\"</span>: <span class=\"o\">[]</span>,\n  <span class=\"s2\">\"author\"</span>: <span class=\"s2\">\"\"</span>,\n  <span class=\"s2\">\"license\"</span>: <span class=\"s2\">\"ISC\"</span>\n<span class=\"o\">}</span>\n\n\nyk@yk package % vim package.json\nyk@yk package % vim index.js\nyk@yk package % npm publish <span class=\"nt\">--access</span><span class=\"o\">=</span>public\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN package@1.0.0 No description\nnpm WARN package@1.0.0 No repository field.\n\nup to <span class=\"nb\">date </span><span class=\"k\">in </span>0.429s\nfound 0 vulnerabilities\n\n/Users/yk/.nodebrew/node/v13.8.0/lib/node_modules/package -&gt; /Users/yk/qiita/package\n\nyk@yk package % <span class=\"nb\">cat </span>index.js \nconst text <span class=\"o\">=</span> <span class=\"s2\">\"sample\"</span>\n\nmodule.exports <span class=\"o\">=</span> text<span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>index.jsにただただ \"sample\" という文字列を返す動作を記述して、パッケージとして認識させる。 <br>\n<code>@y_hirao/mypackage</code> というパッケージをnpmに公開した。</p>\n\n<p>localフォルダでいろいろゴリゴリしてみる。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code>yk@yk <span class=\"nb\">local</span> % npm init <span class=\"nt\">-y</span>\nWrote to /Users/yk/qiita/local/package.json:\n\n<span class=\"o\">{</span>\n  <span class=\"s2\">\"name\"</span>: <span class=\"s2\">\"local\"</span>,\n  <span class=\"s2\">\"version\"</span>: <span class=\"s2\">\"1.0.0\"</span>,\n  <span class=\"s2\">\"main\"</span>: <span class=\"s2\">\"index.js\"</span>,\n  <span class=\"s2\">\"scripts\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"test\"</span>: <span class=\"s2\">\"echo </span><span class=\"se\">\\\"</span><span class=\"s2\">Error: no test specified</span><span class=\"se\">\\\"</span><span class=\"s2\"> &amp;&amp; exit 1\"</span>\n  <span class=\"o\">}</span>,\n  <span class=\"s2\">\"keywords\"</span>: <span class=\"o\">[]</span>,\n  <span class=\"s2\">\"author\"</span>: <span class=\"s2\">\"\"</span>,\n  <span class=\"s2\">\"license\"</span>: <span class=\"s2\">\"ISC\"</span>,\n  <span class=\"s2\">\"dependencies\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"@y_hirao/mypackage\"</span>: <span class=\"s2\">\"^1.0.0\"</span>\n  <span class=\"o\">}</span>,\n  <span class=\"s2\">\"devDependencies\"</span>: <span class=\"o\">{}</span>,\n  <span class=\"s2\">\"description\"</span>: <span class=\"s2\">\"\"</span>\n<span class=\"o\">}</span>\n\n\nyk@yk <span class=\"nb\">local</span> % <span class=\"nb\">cat </span>index.js \nconst text <span class=\"o\">=</span> require<span class=\"o\">(</span><span class=\"s2\">\"@y_hirao/mypackage\"</span><span class=\"o\">)</span><span class=\"p\">;</span>\nconsole.log<span class=\"o\">(</span>text<span class=\"o\">)</span>\n\nyk@yk <span class=\"nb\">local</span> % node index.js \nsample\n</code></pre></div></div>\n\n<p>sampleという文字列が返却されました。！！！！！！！！！</p>\n\n<p>このときpackage.jsonを見ると <code>^</code> キャレット指定なのでバージョンアップは <code>1.系</code> は守られるけど残りはすべてアップデートされます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>  \"dependencies\": {\n    \"@y_hirao/mypackage\": \"^1.0.0\"\n  },\n</code></pre></div></div>\n\n<p>さてパッケージの方を更新します。 <code>v1.0.2</code> にしましょう！</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code>yk@yk package % <span class=\"nb\">cat </span>package.json \n<span class=\"o\">{</span>\n  <span class=\"s2\">\"name\"</span>: <span class=\"s2\">\"@y_hirao/mypackage\"</span>,\n  <span class=\"s2\">\"version\"</span>: <span class=\"s2\">\"1.0.2\"</span>,\n  <span class=\"s2\">\"description\"</span>: <span class=\"s2\">\"\"</span>,\n  <span class=\"s2\">\"main\"</span>: <span class=\"s2\">\"index.js\"</span>,\n  <span class=\"s2\">\"scripts\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"test\"</span>: <span class=\"s2\">\"echo </span><span class=\"se\">\\\"</span><span class=\"s2\">Error: no test specified</span><span class=\"se\">\\\"</span><span class=\"s2\"> &amp;&amp; exit 1\"</span>\n  <span class=\"o\">}</span>,\n  <span class=\"s2\">\"keywords\"</span>: <span class=\"o\">[]</span>,\n  <span class=\"s2\">\"author\"</span>: <span class=\"s2\">\"\"</span>,\n  <span class=\"s2\">\"license\"</span>: <span class=\"s2\">\"ISC\"</span>\n<span class=\"o\">}</span>\n\nyk@yk package % <span class=\"nb\">cat </span>index.js    \nconst text <span class=\"o\">=</span> <span class=\"s2\">\"sample2\"</span>\nthrow <span class=\"s1\">'エラーを出したい気分'</span><span class=\"p\">;</span>\n\nmodule.exports <span class=\"o\">=</span> text<span class=\"p\">;</span>\nyk@yk package % npm publish   \n</code></pre></div></div>\n\n<p>このパッケージをそのまま使うとthrowされます。</p>\n\n<p>さてローカルでinstallしてみましょう！</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>yk@yk local % npm install\nnpm WARN local@1.0.0 No description\nnpm WARN local@1.0.0 No repository field.\n\naudited 1 package in 0.411s\nfound 0 vulnerabilities\n\nyk@yk\n</code></pre></div></div>\n\n<p>あれ、エラーが起きませんね。<br>\nこれは 一度ダウンロードしたパッケージはlockファイルというものでバージョン指定されているので、新しく勝手にバージョンがあがったりしないのです。</p>\n\n<p>さてローカルから本番環境に package.json と index.js をコピーしてnpm installして動かしてみましょう！</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code>yk@yk production % <span class=\"nb\">cp</span> ../local/package.json package.json\nyk@yk production % <span class=\"nb\">cp</span> ../local/index.js index.js        \nyk@yk production % npm i\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN <span class=\"nb\">local</span>@1.0.0 No description\nnpm WARN <span class=\"nb\">local</span>@1.0.0 No repository field.\n\nadded 1 package and audited 1 package <span class=\"k\">in </span>2.811s\nfound 0 vulnerabilities\n\nyk@yk production % node index.js \n\n/Users/yk/qiita/production/node_modules/@y_hirao/mypackage/index.js:2\nthrow <span class=\"s1\">'エラーを出したい気分'</span><span class=\"p\">;</span>\n^\nエラーを出したい気分\n<span class=\"o\">(</span>Use <span class=\"sb\">`</span>node <span class=\"nt\">--trace-uncaught</span> ...<span class=\"sb\">`</span> to show where the exception was thrown<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>さて、、、本番環境でinstallを走らせるとエラーがおきました。。。。</p>\n\n<p><code>npm install</code> したときに <code>package-lock.json</code> がないと <code>package.json</code> を使って <code>^1.0.0</code> が指定されているので <code>1.系で一番新しいもの</code> つまり今回だとバグが混入している <code>v1.0.2</code> がインストールされたことになります。</p>\n\n<p>lockファイルを見てみましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code>yk@yk production % <span class=\"nb\">cat </span>package-lock.json \n<span class=\"o\">{</span>\n  <span class=\"s2\">\"name\"</span>: <span class=\"s2\">\"local\"</span>,\n  <span class=\"s2\">\"version\"</span>: <span class=\"s2\">\"1.0.0\"</span>,\n  <span class=\"s2\">\"lockfileVersion\"</span>: 1,\n  <span class=\"s2\">\"requires\"</span>: <span class=\"nb\">true</span>,\n  <span class=\"s2\">\"dependencies\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"@y_hirao/mypackage\"</span>: <span class=\"o\">{</span>\n      <span class=\"s2\">\"version\"</span>: <span class=\"s2\">\"1.0.2\"</span>,\n      <span class=\"s2\">\"resolved\"</span>: <span class=\"s2\">\"https://registry.npmjs.org/@y_hirao/mypackage/-/mypackage-1.0.2.tgz\"</span>,\n      <span class=\"s2\">\"integrity\"</span>: <span class=\"s2\">\"sha512-W2RoQsC1FVnHxximVJMovEvfl/3WNI95EjGxPbMlmyuDZ+0SImS76dOII/0AiP4cVVjXZUbFzaLs9h6l8TrrFQ==\"</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>まさしく <code>v1.0.2</code> が指定されていますね！localだともちろん最初に <code>npm install</code> したときに最新だった <code>@y_hirao/mypackage</code> の <code>v1.0.0</code> が使われています。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code>yk@yk <span class=\"nb\">local</span> % <span class=\"nb\">cat </span>package-lock.json \n<span class=\"o\">{</span>\n  <span class=\"s2\">\"name\"</span>: <span class=\"s2\">\"local\"</span>,\n  <span class=\"s2\">\"version\"</span>: <span class=\"s2\">\"1.0.0\"</span>,\n  <span class=\"s2\">\"lockfileVersion\"</span>: 1,\n  <span class=\"s2\">\"requires\"</span>: <span class=\"nb\">true</span>,\n  <span class=\"s2\">\"dependencies\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"@y_hirao/mypackage\"</span>: <span class=\"o\">{</span>\n      <span class=\"s2\">\"version\"</span>: <span class=\"s2\">\"1.0.0\"</span>,\n      <span class=\"s2\">\"resolved\"</span>: <span class=\"s2\">\"https://registry.npmjs.org/@y_hirao/mypackage/-/mypackage-1.0.0.tgz\"</span>,\n      <span class=\"s2\">\"integrity\"</span>: <span class=\"s2\">\"sha512-auQ5grIpWd0IRkMR3rn6xRjIhGZqBu/Q/g1lDkS5AWakAysrZ3iQAIRngbgBGBAFlPZxQ/LCVYdAW+3VLxeSEw==\"</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>更にインストールされているフォルダを確認しても</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code>yk@yk production % <span class=\"nb\">cat </span>node_modules/@y_hirao/mypackage/index.js\nconst text <span class=\"o\">=</span> <span class=\"s2\">\"sample2\"</span>\nthrow <span class=\"s1\">'エラーを出したい気分'</span><span class=\"p\">;</span>\n\nmodule.exports <span class=\"o\">=</span> text<span class=\"p\">;</span>\nyk@yk production % \n</code></pre></div></div>\n\n<p>どう見てもエラーが起きそうです。</p>\n\n<p>package-lock.jsonをlocalからコピーしてきましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code>yk@yk production % <span class=\"nb\">cp</span> ../local/package-lock.json package-lock.json\nyk@yk production % npm i\nnpm WARN <span class=\"nb\">local</span>@1.0.0 No description\nnpm WARN <span class=\"nb\">local</span>@1.0.0 No repository field.\n\nupdated 1 package and audited 1 package <span class=\"k\">in </span>0.45s\nfound 0 vulnerabilities\n\nyk@yk production % <span class=\"nb\">cat </span>node_modules/@y_hirao/mypackage/index.js\nconst text <span class=\"o\">=</span> <span class=\"s2\">\"sample\"</span>\n\nmodule.exports <span class=\"o\">=</span> text<span class=\"p\">;</span>\nyk@yk production % node index.js \nsample\nyk@yk production % \n</code></pre></div></div>\n\n<p>lockファイルを持ってきてインストールするだけで、エラーが起きなくなりました！ <img alt=\":clap:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f44f.png\" title=\":clap:\" width=\"20\" loading=\"lazy\"><img alt=\":clap:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f44f.png\" title=\":clap:\" width=\"20\" loading=\"lazy\"><img alt=\":clap:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f44f.png\" title=\":clap:\" width=\"20\" loading=\"lazy\"><img alt=\":clap:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f44f.png\" title=\":clap:\" width=\"20\" loading=\"lazy\"><img alt=\":clap:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f44f.png\" title=\":clap:\" width=\"20\" loading=\"lazy\"> </p>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>本番環境で lockファイルごと更新する <code>composer update</code> とかlockファイルの存在しない状態での <code>npm install</code> とか、そんなことはやめましょう。ってことを主張したいです！！！！！</p>\n\n<p>ローカルでしっかり確認してlockファイルを作り、それを本番にアップロードして、lockファイルの状態で依存パッケージをインストールしちゃってください。。 <img alt=\":pray:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f64f.png\" title=\":pray:\" width=\"20\" loading=\"lazy\"> </p>\n\n<p>インストールする時期によって最新のバージョンが使われるので、もしそのバージョンにバグがあるのなら本番死んじゃいますよ。。</p>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p>新しい会社に入って色々根本的に変えたいところがあるので、最近はdevopsの領域をごりごり触らせていただいてます。環境構築、開発フローの策定とかもろもろやらせてもらっているのでかなり楽しいです <img alt=\":muscle:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f4aa.png\" title=\":muscle:\" width=\"20\" loading=\"lazy\"> </p>\n\n<p>読んでいただきありがとうございました。lockファイル入門したい方、事故りそうな不安があるかたは同僚と一緒に「弊社のパッケージ依存関係の運用どうする…？」と一度話し合ってみてください。</p>\n\n<p>ありがとうございました。</p>\n\n<p>.</p>\n","body":"# .lockファイルって邪魔だよね。って思っている人いたら校舎裏来てください。優しく解説します。\n\nこんにちは！ @ykhirao です。最近ジョインさせていただいた案件で `composer.lock` のバージョンが本番が一番新しくて、ローカルが一番古い素敵な状況を発見しました :relaxed:\n\n本番環境でSSHして `composer update` かけたんだなあーー。そっかーーー、バグ起きたらどないすんねん、。。。。。。\n\nというのが私の感想で、実際にnpmパッケージを使ってバグを再現しながら\nゆっくり解説していこうと思います。どうぞ最後までよろしくお願いします。！！！\n\n> このQiitaを呼んで得ること\n\n- あーー、ほんとだ。バグが入る可能性があるんだ！\n- lockファイルはちゃんとコミットするね！\n\nというお気持ちになれると思います。\n\n> このQiitaで解説しないこと\n\n- 詳しい依存関係の解消法\n- packageの公開の仕方\n- むずかしいはなし\n\nです！\n\n## さて時系列を見てみよう！\n\nこんな事故が起こる可能性がありますよって話をします。\n\n時系列 | OSSのmypackage.js| ローカル | 本番サーバー\n:---:|:---:|:---:|:---:\n 1日目 | v1.0.0公開 | 動いている | 動いている\n 2日目 |  | ローカルでmypackage.jsをinstall<br>動作確認OK、明後日本番に適応させる | \n 3日目 | v1.0.1公開 バグあり |  | \n 4日目 |  |  | 本番サーバーで新しいコードを反映、install。本番が動かなくなってしまった。ぴえん<br>もちろんソースコードはローカルと同じだし、ローカルで動いていたのになんで…？:flushed:\n 5日目 | v1.0.2公開 バグ修正された |  | \n 6日目 | | v1.0.2を適応ローカル確認OK<br> 今度はlockファイルを本番にアップロードする予定！ | \n 7日目 | |  | package-lock.jsonを使ってinstallする！今度は動いた！\n\n## npmでパッケージを作りながら説明する\n\nOSSっぽい動作をするpackageフォルダと、ローカル環境と本番環境っぽいフォルダを作る。\n\n```bash\nyk@yk ~ % cd qiita \nyk@yk qiita % mkdir package\nyk@yk qiita % mkdir local\nyk@yk qiita % mkdir production\nyk@yk qiita % ll\ntotal 0\ndrwxr-xr-x   5 yk  staff   160  7 11 00:34 .\ndrwxr-xr-x+ 83 yk  staff  2656  7 11 00:33 ..\ndrwxr-xr-x   2 yk  staff    64  7 11 00:34 local\ndrwxr-xr-x   2 yk  staff    64  7 11 00:34 package\ndrwxr-xr-x   2 yk  staff    64  7 11 00:34 production\n```\n\n\n\n```bash\nyk@yk qiita % cd package \nyk@yk package % npm init -y\nWrote to /Users/yk/qiita/package/package.json:\n\n{\n  \"name\": \"package\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n\nyk@yk package % vim package.json\nyk@yk package % vim index.js\nyk@yk package % npm publish --access=public\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN package@1.0.0 No description\nnpm WARN package@1.0.0 No repository field.\n\nup to date in 0.429s\nfound 0 vulnerabilities\n\n/Users/yk/.nodebrew/node/v13.8.0/lib/node_modules/package -> /Users/yk/qiita/package\n\nyk@yk package % cat index.js \nconst text = \"sample\"\n\nmodule.exports = text;\n```\n\nindex.jsにただただ \"sample\" という文字列を返す動作を記述して、パッケージとして認識させる。 \n`@y_hirao/mypackage` というパッケージをnpmに公開した。\n\n\nlocalフォルダでいろいろゴリゴリしてみる。\n\n```bash\nyk@yk local % npm init -y\nWrote to /Users/yk/qiita/local/package.json:\n\n{\n  \"name\": \"local\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"@y_hirao/mypackage\": \"^1.0.0\"\n  },\n  \"devDependencies\": {},\n  \"description\": \"\"\n}\n\n\nyk@yk local % cat index.js \nconst text = require(\"@y_hirao/mypackage\");\nconsole.log(text)\n\nyk@yk local % node index.js \nsample\n```\n\nsampleという文字列が返却されました。！！！！！！！！！\n\nこのときpackage.jsonを見ると `^` キャレット指定なのでバージョンアップは `1.系` は守られるけど残りはすべてアップデートされます。\n\n```\n  \"dependencies\": {\n    \"@y_hirao/mypackage\": \"^1.0.0\"\n  },\n```\n\nさてパッケージの方を更新します。 `v1.0.2` にしましょう！\n\n```bash\nyk@yk package % cat package.json \n{\n  \"name\": \"@y_hirao/mypackage\",\n  \"version\": \"1.0.2\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\nyk@yk package % cat index.js    \nconst text = \"sample2\"\nthrow 'エラーを出したい気分';\n\nmodule.exports = text;\nyk@yk package % npm publish   \n```\n\nこのパッケージをそのまま使うとthrowされます。\n\nさてローカルでinstallしてみましょう！\n\n```\nyk@yk local % npm install\nnpm WARN local@1.0.0 No description\nnpm WARN local@1.0.0 No repository field.\n\naudited 1 package in 0.411s\nfound 0 vulnerabilities\n\nyk@yk\n```\n\nあれ、エラーが起きませんね。\nこれは 一度ダウンロードしたパッケージはlockファイルというものでバージョン指定されているので、新しく勝手にバージョンがあがったりしないのです。\n\nさてローカルから本番環境に package.json と index.js をコピーしてnpm installして動かしてみましょう！\n\n```bash\nyk@yk production % cp ../local/package.json package.json\nyk@yk production % cp ../local/index.js index.js        \nyk@yk production % npm i\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN local@1.0.0 No description\nnpm WARN local@1.0.0 No repository field.\n\nadded 1 package and audited 1 package in 2.811s\nfound 0 vulnerabilities\n\nyk@yk production % node index.js \n\n/Users/yk/qiita/production/node_modules/@y_hirao/mypackage/index.js:2\nthrow 'エラーを出したい気分';\n^\nエラーを出したい気分\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n```\n\nさて、、、本番環境でinstallを走らせるとエラーがおきました。。。。\n\n`npm install` したときに `package-lock.json` がないと `package.json` を使って `^1.0.0` が指定されているので `1.系で一番新しいもの` つまり今回だとバグが混入している `v1.0.2` がインストールされたことになります。\n\nlockファイルを見てみましょう。\n\n```bash\nyk@yk production % cat package-lock.json \n{\n  \"name\": \"local\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 1,\n  \"requires\": true,\n  \"dependencies\": {\n    \"@y_hirao/mypackage\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/@y_hirao/mypackage/-/mypackage-1.0.2.tgz\",\n      \"integrity\": \"sha512-W2RoQsC1FVnHxximVJMovEvfl/3WNI95EjGxPbMlmyuDZ+0SImS76dOII/0AiP4cVVjXZUbFzaLs9h6l8TrrFQ==\"\n    }\n  }\n}\n```\n\nまさしく `v1.0.2` が指定されていますね！localだともちろん最初に `npm install` したときに最新だった `@y_hirao/mypackage` の `v1.0.0` が使われています。\n\n```bash\nyk@yk local % cat package-lock.json \n{\n  \"name\": \"local\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 1,\n  \"requires\": true,\n  \"dependencies\": {\n    \"@y_hirao/mypackage\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/@y_hirao/mypackage/-/mypackage-1.0.0.tgz\",\n      \"integrity\": \"sha512-auQ5grIpWd0IRkMR3rn6xRjIhGZqBu/Q/g1lDkS5AWakAysrZ3iQAIRngbgBGBAFlPZxQ/LCVYdAW+3VLxeSEw==\"\n    }\n  }\n}\n```\n\n更にインストールされているフォルダを確認しても\n\n```bash\nyk@yk production % cat node_modules/@y_hirao/mypackage/index.js\nconst text = \"sample2\"\nthrow 'エラーを出したい気分';\n\nmodule.exports = text;\nyk@yk production % \n```\n\nどう見てもエラーが起きそうです。\n\npackage-lock.jsonをlocalからコピーしてきましょう。\n\n```bash\nyk@yk production % cp ../local/package-lock.json package-lock.json\nyk@yk production % npm i\nnpm WARN local@1.0.0 No description\nnpm WARN local@1.0.0 No repository field.\n\nupdated 1 package and audited 1 package in 0.45s\nfound 0 vulnerabilities\n\nyk@yk production % cat node_modules/@y_hirao/mypackage/index.js\nconst text = \"sample\"\n\nmodule.exports = text;\nyk@yk production % node index.js \nsample\nyk@yk production % \n```\n\nlockファイルを持ってきてインストールするだけで、エラーが起きなくなりました！ :clap::clap::clap::clap::clap: \n\n\n## まとめ\n\n本番環境で lockファイルごと更新する `composer update` とかlockファイルの存在しない状態での `npm install` とか、そんなことはやめましょう。ってことを主張したいです！！！！！\n\nローカルでしっかり確認してlockファイルを作り、それを本番にアップロードして、lockファイルの状態で依存パッケージをインストールしちゃってください。。 :pray: \n\nインストールする時期によって最新のバージョンが使われるので、もしそのバージョンにバグがあるのなら本番死んじゃいますよ。。\n\n\n## 終わりに\n\n\n新しい会社に入って色々根本的に変えたいところがあるので、最近はdevopsの領域をごりごり触らせていただいてます。環境構築、開発フローの策定とかもろもろやらせてもらっているのでかなり楽しいです :muscle: \n\n読んでいただきありがとうございました。lockファイル入門したい方、事故りそうな不安があるかたは同僚と一緒に「弊社のパッケージ依存関係の運用どうする…？」と一度話し合ってみてください。\n\nありがとうございました。\n\n\n.\n","coediting":false,"comments_count":0,"created_at":"2020-07-13T09:28:39+09:00","group":null,"id":"dbd6b12ea500178168b5","likes_count":7,"private":false,"reactions_count":0,"stocks_count":4,"tags":[{"name":"PHP","versions":[]},{"name":"JavaScript","versions":[]},{"name":"Node.js","versions":[]},{"name":"Composer","versions":[]},{"name":"npm","versions":[]}],"title":"そろそろlockファイルを理解するための最初のページ【composer.lock/package-lock.json】","updated_at":"2020-07-13T09:28:39+09:00","url":"https://qiita.com/ykhirao/items/dbd6b12ea500178168b5","user":{"description":"Web Developer From 2016.\r\nPHP/Laravel && React/TypeScript/Node.js\r\n\r\n業務委託の依頼とかはWantedlyとかからでお願いします！","facebook_id":"","followees_count":39,"followers_count":101,"github_login_name":"ykhirao","id":"ykhirao","items_count":83,"linkedin_id":"","location":"Tokyo, Japan","name":"yk","organization":"","permanent_id":112929,"profile_image_url":"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/profile-images/1639030792","team_only":false,"twitter_screen_name":"ykhirao","website_url":"https://www.wantedly.com/id/ykhirao"},"page_views_count":null,"team_membership":null,"organization_url_name":null,"slide":false}},"path":"posts/dbd6b12ea500178168b5"}
