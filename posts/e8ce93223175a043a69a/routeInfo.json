{"template":"__react_static_root__/src/components/QiitaPost","sharedHashesByProp":{},"data":{"post":{"rendered_body":"<p data-sourcepos=\"2:1-2:45\">以下のような構成を取ればいい。</p>\n<iframe id=\"qiita-embed-content__bdfc33a0b9010aa9f7d3972b6cc9dc83\" src=\"https://qiita.com/embed-contents/mermaid#qiita-embed-content__bdfc33a0b9010aa9f7d3972b6cc9dc83\" style=\"width:100%;\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" data-content='{\"data\":\"flowchart LR\\nA[Gmail] -- 取得 --&gt; B[Google Apps Script]\\nB -- API --&gt; C\",\"key\":\"ab82bed4f054297ba71e803fa9d9d937\"}'>\n</iframe>\n\n<h2 data-sourcepos=\"11:1-11:24\">\n<span id=\"gmail-apiの面倒さ\" class=\"fragment\"></span><a href=\"#gmail-api%E3%81%AE%E9%9D%A2%E5%80%92%E3%81%95\"><i class=\"fa fa-link\"></i></a>Gmail APIの面倒さ</h2>\n<p data-sourcepos=\"13:1-13:86\">Cloud Functionsを使ったとしても、Gmail内容はAPIとして取得できない</p>\n<p data-sourcepos=\"15:1-15:20\">CloudFunctionsから</p>\n<ul data-sourcepos=\"17:1-20:0\">\n<li data-sourcepos=\"17:1-17:46\">「API とサービス」 「認証情報」</li>\n<li data-sourcepos=\"18:1-18:71\">「認証情報を作成」「OAuth クライアント ID」の取得</li>\n<li data-sourcepos=\"19:1-20:0\">...ClientサイドでAuthのコード書き、トークンの取得してGmailのAPIを叩く</li>\n</ul>\n<p data-sourcepos=\"21:1-21:9\">面倒。</p>\n<h2 data-sourcepos=\"23:1-23:66\">\n<span id=\"gasをwebアプリケーションとして公開してapi公開\" class=\"fragment\"></span><a href=\"#gas%E3%82%92web%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%A8%E3%81%97%E3%81%A6%E5%85%AC%E9%96%8B%E3%81%97%E3%81%A6api%E5%85%AC%E9%96%8B\"><i class=\"fa fa-link\"></i></a>GasをWebアプリケーションとして公開してAPI公開</h2>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"26:1-87:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">FAIL</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">ok</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"na\">code</span><span class=\"p\">:</span> <span class=\"kc\">null</span> <span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">output</span> <span class=\"o\">=</span> <span class=\"nx\">ContentService</span><span class=\"p\">.</span><span class=\"nf\">createTextOutput</span><span class=\"p\">();</span>\n<span class=\"nx\">output</span><span class=\"p\">.</span><span class=\"nf\">setMimeType</span><span class=\"p\">(</span><span class=\"nx\">ContentService</span><span class=\"p\">.</span><span class=\"nx\">MimeType</span><span class=\"p\">.</span><span class=\"nx\">JSON</span><span class=\"p\">);</span>\n<span class=\"nx\">output</span><span class=\"p\">.</span><span class=\"nf\">setContent</span><span class=\"p\">(</span><span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nf\">stringify</span><span class=\"p\">(</span><span class=\"nx\">FAIL</span><span class=\"p\">));</span>\n\n<span class=\"cm\">/**\n * 認証ラベルがついたGmailを取得します\n * queryの例: https://blog.synnex.co.jp/google/gmail-gas/\n */</span>\n<span class=\"kd\">function</span> <span class=\"nf\">getGmail</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">date</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">2023-04-17T11:00:00.000Z</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 認証ラベルの付いた、アカウントIDが本文にはいっているメールを1件取得する</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">newestThread</span> <span class=\"o\">=</span> <span class=\"nx\">GmailApp</span><span class=\"p\">.</span><span class=\"nf\">search</span><span class=\"p\">(</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"s2\"> label:タイトルXXX`</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\n  <span class=\"c1\">// スレッドが存在しない</span>\n  <span class=\"nf\">if </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">newestThread</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Logger</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">スレッドが存在しません</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">output</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">let</span> <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"nx\">newestThread</span><span class=\"p\">.</span><span class=\"nf\">getMessages</span><span class=\"p\">();</span>\n  <span class=\"nx\">Logger</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"s2\">`messages length: </span><span class=\"p\">${</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n  <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nf\">filter</span><span class=\"p\">((</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nf\">getPlainBody</span><span class=\"p\">().</span><span class=\"nf\">includes</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">))</span>\n  <span class=\"c1\">// date(Instagramクリック日時)) &lt; メール（message）受信日時</span>\n  <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nf\">filter</span><span class=\"p\">((</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nc\">Date</span><span class=\"p\">(</span><span class=\"nx\">date</span><span class=\"p\">)).</span><span class=\"nf\">getTime</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nf\">getDate</span><span class=\"p\">().</span><span class=\"nf\">getTime</span><span class=\"p\">());</span>\n  <span class=\"nx\">Logger</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"s2\">`messages length: </span><span class=\"p\">${</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"nx\">messages</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\n  <span class=\"c1\">// 指定時間より前のメールは無視する</span>\n  <span class=\"nf\">if </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Logger</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">期間内のメールが存在しません</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">output</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">code</span> <span class=\"o\">=</span> <span class=\"nf\">getCode</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nf\">getPlainBody</span><span class=\"p\">());</span>\n  <span class=\"nx\">Logger</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">)</span>\n\n  <span class=\"nx\">output</span><span class=\"p\">.</span><span class=\"nf\">setContent</span><span class=\"p\">(</span><span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nf\">stringify</span><span class=\"p\">({</span> <span class=\"na\">ok</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">code</span> <span class=\"p\">}))</span>\n  <span class=\"k\">return</span> <span class=\"nx\">output</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/**\n * param:  {\n *   \"id\": \"\",\n *   \"data\": \"2023-04-17T16:18:00.173Z\",\n *   \"pass\": \"ベアラートークンみたいなの\"\n * }\n */</span>\n<span class=\"kd\">function</span> <span class=\"nf\">doGet</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">Logger</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">params</span> <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">parameter</span><span class=\"p\">;</span>\n  <span class=\"nf\">if </span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">?.</span><span class=\"nx\">pass</span> <span class=\"o\">!==</span> <span class=\"dl\">'</span><span class=\"s1\">ベアラートークンみたいなの</span><span class=\"dl\">'</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Logger</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">passが間違いです。</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"nx\">output</span><span class=\"p\">.</span><span class=\"nf\">setContent</span><span class=\"p\">(</span><span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nf\">stringify</span><span class=\"p\">(</span><span class=\"nx\">FAIL</span><span class=\"p\">));</span>\n    <span class=\"k\">return</span> <span class=\"nx\">output</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"nf\">getGmail</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">?.</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">params</span><span class=\"p\">?.</span><span class=\"nx\">date</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"89:1-89:15\">Clientサイド</p>\n<div class=\"code-frame\" data-lang=\"js\" data-sourcepos=\"91:1-103:3\"><div class=\"highlight\"><pre><code><span class=\"err\">　　</span><span class=\"kd\">const</span> <span class=\"nx\">deployId</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">GAS画面からデプロイしたときのID_デプロイするたびに変わる</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"o\">&lt;</span><span class=\"p\">{</span> <span class=\"na\">ok</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"na\">code</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n    <span class=\"s2\">`https://script.google.com/macros/s/</span><span class=\"p\">${</span><span class=\"nx\">deployId</span><span class=\"p\">}</span><span class=\"s2\">/exec`</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span>\n      <span class=\"na\">params</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">pass</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">ベアラートークンみたいなの</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n        <span class=\"nx\">date</span><span class=\"p\">,</span>\n        <span class=\"nx\">id</span><span class=\"p\">,</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">);</span>\n</code></pre></div></div>\n<p data-sourcepos=\"105:1-105:238\">ベアラートークンみたいなのは任意の文字列128文字とか適当にジェネレートしたものを使って、絶対に推測できないものにしてください。UUIDに合わせると英数字の３２桁です。</p>\n<p data-sourcepos=\"107:1-107:164\">UUIDが16進数で32桁ですが、特定させるにはどれくらいの時間がかかるかを示した計算を参考にするのがいいかと思います。</p>\n<p data-sourcepos=\"109:1-109:54\"><iframe id=\"qiita-embed-content__c93389a25d1f021fae5a1de310b3ff24\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__c93389a25d1f021fae5a1de310b3ff24\" data-content=\"https%3A%2F%2Fzenn.dev%2Fkiyocy24%2Farticles%2Fuuid-duplicate-time\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"111:1-111:36\">デプロイ方法はこんな感じ</p>\n<p data-sourcepos=\"113:1-113:69\">上部のデプロイボタンからウェブアプリとして公開</p>\n<p data-sourcepos=\"115:1-115:163\"><a href=\"https://camo.qiitausercontent.com/e84bf0cff05cb785a7e7ac24fbffd2709b37cfdc/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f37653834656137392d363632372d323064352d353431622d3566353439363834636463342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F7e84ea79-6627-20d5-541b-5f549684cdc4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=359f49a8e47382453802bf68aa0d96b7\" alt=\"スクリーンショット 2023-05-24 13.58.21.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/7e84ea79-6627-20d5-541b-5f549684cdc4.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F7e84ea79-6627-20d5-541b-5f549684cdc4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1396d90090e650a88db1100c8ccde5f8 1x\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"117:1-117:38\">もろもろ認証でOKを押したら</p>\n<p data-sourcepos=\"119:1-119:163\"><a href=\"https://camo.qiitausercontent.com/742d04934aeef44e5d120917e1560c0bc2073417/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f66366631303238352d643935392d383664662d393434622d3661343661663334663262632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Ff6f10285-d959-86df-944b-6a46af34f2bc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3a4abec707b662b549a03b3b063e482f\" alt=\"スクリーンショット 2023-05-24 13.58.52.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/f6f10285-d959-86df-944b-6a46af34f2bc.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Ff6f10285-d959-86df-944b-6a46af34f2bc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1c683859d5460f775bfcfae1fdff2d45 1x\" loading=\"lazy\"></a></p>\n<h2 data-sourcepos=\"124:1-124:9\">\n<span id=\"注意\" class=\"fragment\"></span><a href=\"#%E6%B3%A8%E6%84%8F\"><i class=\"fa fa-link\"></i></a>注意</h2>\n<p data-sourcepos=\"126:1-127:247\">APIとして公開すると、パスワードが漏れると、自分のGmailが全世界に公開される可能性があることを考慮のうえ使ってください。<br>\nその意味では、普通のGoogleのID/Passが漏れた場合と同じですが、その場合はGoogle側で不審なログインはブロックしてくれたりしますが、このAPIの場合は不審なログインは弾かれません。</p>\n<p data-sourcepos=\"129:1-129:212\">毎回変わるデプロイIDもかなりの桁数なので、基本的にこれだけでもかなり有効なURLを見つけるのは大変なはずですがちゃんと理解した上で使ってください。</p>\n<p data-sourcepos=\"131:1-131:146\">↓以下のdeployIdは32桁超えているので、UUIDよりも特定は難しいはず。 <code>https://script.google.com/macros/s/${deployId}/exec</code></p>\n","body":"\n以下のような構成を取ればいい。\n\n```mermaid\nflowchart LR\nA[Gmail] -- 取得 --> B[Google Apps Script]\nB -- API --> C\n```\n\n\n## Gmail APIの面倒さ\n\nCloud Functionsを使ったとしても、Gmail内容はAPIとして取得できない\n\nCloudFunctionsから\n\n* 「API とサービス」 「認証情報」\n* 「認証情報を作成」「OAuth クライアント ID」の取得\n* ...ClientサイドでAuthのコード書き、トークンの取得してGmailのAPIを叩く\n\n面倒。\n\n## GasをWebアプリケーションとして公開してAPI公開\n\n\n```javascript\nconst FAIL = { ok: false, code: null };\n\nconst output = ContentService.createTextOutput();\noutput.setMimeType(ContentService.MimeType.JSON);\noutput.setContent(JSON.stringify(FAIL));\n\n/**\n * 認証ラベルがついたGmailを取得します\n * queryの例: https://blog.synnex.co.jp/google/gmail-gas/\n */\nfunction getGmail(id, date = '2023-04-17T11:00:00.000Z') {\n  // 認証ラベルの付いた、アカウントIDが本文にはいっているメールを1件取得する\n  const newestThread = GmailApp.search(`${id} label:タイトルXXX`, 0, 1)[0];\n\n  // スレッドが存在しない\n  if (!newestThread) {\n    Logger.log(\"スレッドが存在しません\");\n    return output;\n  }\n\n  let messages = newestThread.getMessages();\n  Logger.log(`messages length: ${messages.length}`);\n  messages = messages.filter((message) => message.getPlainBody().includes(id))\n  // date(Instagramクリック日時)) < メール（message）受信日時\n  messages = messages.filter((message) => (new Date(date)).getTime() < message.getDate().getTime());\n  Logger.log(`messages length: ${messages.length}`);\n\n  const message = messages[0];\n\n  // 指定時間より前のメールは無視する\n  if (!message) {\n    Logger.log(\"期間内のメールが存在しません\");\n    return output;\n  }\n\n  const code = getCode(message.getPlainBody());\n  Logger.log(code)\n\n  output.setContent(JSON.stringify({ ok: true, code }))\n  return output;\n}\n\n/**\n * param:  {\n *   \"id\": \"\",\n *   \"data\": \"2023-04-17T16:18:00.173Z\",\n *   \"pass\": \"ベアラートークンみたいなの\"\n * }\n */\nfunction doGet(e) {\n  Logger.log(e);\n  const params = e.parameter;\n  if (params?.pass !== 'ベアラートークンみたいなの' ) {\n    Logger.log(\"passが間違いです。\");\n    output.setContent(JSON.stringify(FAIL));\n    return output;\n  }\n\n  return getGmail(params?.id, params?.date);\n}\n```\n\nClientサイド\n\n```js\n　　const deployId = 'GAS画面からデプロイしたときのID_デプロイするたびに変わる';\n  const res = await axios.get<{ ok: true, code: string }>(\n    `https://script.google.com/macros/s/${deployId}/exec`,\n    {\n      params: {\n        pass: 'ベアラートークンみたいなの',\n        date,\n        id,\n      },\n    }\n  );\n```\n\nベアラートークンみたいなのは任意の文字列128文字とか適当にジェネレートしたものを使って、絶対に推測できないものにしてください。UUIDに合わせると英数字の３２桁です。\n\nUUIDが16進数で32桁ですが、特定させるにはどれくらいの時間がかかるかを示した計算を参考にするのがいいかと思います。\n\nhttps://zenn.dev/kiyocy24/articles/uuid-duplicate-time\n\nデプロイ方法はこんな感じ\n\n上部のデプロイボタンからウェブアプリとして公開\n\n![スクリーンショット 2023-05-24 13.58.21.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/7e84ea79-6627-20d5-541b-5f549684cdc4.png)\n\nもろもろ認証でOKを押したら\n\n![スクリーンショット 2023-05-24 13.58.52.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/f6f10285-d959-86df-944b-6a46af34f2bc.png)\n\n\n\n\n## 注意\n\nAPIとして公開すると、パスワードが漏れると、自分のGmailが全世界に公開される可能性があることを考慮のうえ使ってください。\nその意味では、普通のGoogleのID/Passが漏れた場合と同じですが、その場合はGoogle側で不審なログインはブロックしてくれたりしますが、このAPIの場合は不審なログインは弾かれません。\n\n毎回変わるデプロイIDもかなりの桁数なので、基本的にこれだけでもかなり有効なURLを見つけるのは大変なはずですがちゃんと理解した上で使ってください。\n\n↓以下のdeployIdは32桁超えているので、UUIDよりも特定は難しいはず。 `https://script.google.com/macros/s/${deployId}/exec`\n\n\n\n\n\n\n","coediting":false,"comments_count":0,"created_at":"2023-05-24T14:03:41+09:00","group":null,"id":"e8ce93223175a043a69a","likes_count":0,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"JavaScript","versions":[]},{"name":"GoogleAppsScript","versions":[]},{"name":"GAS","versions":[]},{"name":"Gmail","versions":[]},{"name":"TypeScript","versions":[]}],"title":"【GAS】Gmail APIを使わずにGmailをAPI経由で取得する","updated_at":"2023-05-24T14:07:22+09:00","url":"https://qiita.com/ykhirao/items/e8ce93223175a043a69a","user":{"description":"Web Developer From 2016.\r\nPHP/Laravel && React/TypeScript/Node.js\r\n\r\n業務委託の依頼とかはWantedlyとかからでお願いします！","facebook_id":"","followees_count":38,"followers_count":98,"github_login_name":"ykhirao","id":"ykhirao","items_count":68,"linkedin_id":"","location":"Tokyo, Japan","name":"yk","organization":"","permanent_id":112929,"profile_image_url":"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/profile-images/1639030792","team_only":false,"twitter_screen_name":"ykhirao","website_url":"https://www.wantedly.com/id/ykhirao"},"page_views_count":null,"team_membership":null,"organization_url_name":null}},"path":"posts/e8ce93223175a043a69a"}
