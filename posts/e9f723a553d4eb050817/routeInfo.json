{"template":"__react_static_root__/src/components/QiitaPost","sharedHashesByProp":{},"data":{"post":{"rendered_body":"\n<h1>\n<span id=\"git-rebase--i-したときのコマンドをすべて試してみたp-r-es-f-x-d\" class=\"fragment\"></span><a href=\"#git-rebase--i-%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AE%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E3%81%99%E3%81%B9%E3%81%A6%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9Fp-r-es-f-x-d\"><i class=\"fa fa-link\"></i></a><code>git rebase -i</code> したときのコマンドをすべて試してみた(p, r, e,s ,f ,x ,d)</h1>\n\n<p>いわゆる <code>git rebase -i HEAD~~</code> とかしたときに出てくる下のほうに出てくるコメントアウトされているコマンドのことを今回まとめます。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code>pick 85b703f update 2\npick 4d9e3ec update 3\n\n<span class=\"c\"># Rebase 5d6b0f5..1fc7711 onto 5d6b0f5 (6 commands)</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># Commands:</span>\n<span class=\"c\"># p, pick = use commit</span>\n<span class=\"c\"># r, reword = use commit, but edit the commit message</span>\n<span class=\"c\"># e, edit = use commit, but stop for amending</span>\n<span class=\"c\"># s, squash = use commit, but meld into previous commit</span>\n<span class=\"c\"># f, fixup = like \"squash\", but discard this commit's log message</span>\n<span class=\"c\"># x, exec = run command (the rest of the line) using shell</span>\n<span class=\"c\"># d, drop = remove commit</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># These lines can be re-ordered; they are executed from top to bottom.</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># If you remove a line here THAT COMMIT WILL BE LOST.</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># However, if you remove everything, the rebase will be aborted.</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># Note that empty commits are commented out</span>\n</code></pre></div></div>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center\"></th>\n<th style=\"text-align: center\">英語</th>\n<th style=\"text-align: center\">なんとなく適当な日本語訳</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center\">p, pick</td>\n<td style=\"text-align: center\">use commit</td>\n<td style=\"text-align: center\">コミットを使う</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">r, reword</td>\n<td style=\"text-align: center\">use commit, but edit the commit message</td>\n<td style=\"text-align: center\">コミットを使うが、コミットメッセージを編集する</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">e, edit</td>\n<td style=\"text-align: center\">use commit, but stop for amending</td>\n<td style=\"text-align: center\">コミットを使うが、修正を止める</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">s, squash</td>\n<td style=\"text-align: center\">use commit, but meld into previous commit</td>\n<td style=\"text-align: center\">コミットを使うが、以前のコミットに混ぜる</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">f, fixup</td>\n<td style=\"text-align: center\">like \"squash\", but discard this commit's log message</td>\n<td style=\"text-align: center\">squashと似ているが、コミットメッセージは破棄する</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">x, exec</td>\n<td style=\"text-align: center\">run command (the rest of the line) using shell</td>\n<td style=\"text-align: center\">シェルを使用して、残りのコマンドを実行する</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">d, drop</td>\n<td style=\"text-align: center\">remove commit</td>\n<td style=\"text-align: center\">コミットを削除する</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n\n<p>これはgitの正確に記述しして、きちんと学んで形からはいる！！というタイプの記事ではないです。<br>\n実際に体験して、なんとなく理解してみようという記事です。</p>\n\n<p>きちんとした記事は以下のようなのを参考にしてください。</p>\n\n<ul>\n<li><a href=\"https://backlog.com/ja/git-tutorial/\" rel=\"nofollow noopener\" target=\"_blank\">サルでもわかるGit入門〜バージョン管理を使いこなそう〜【プロジェクト管理ツールBacklog】</a></li>\n</ul>\n\n<h2>\n<span id=\"実際に使ってみる\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E9%9A%9B%E3%81%AB%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>実際に使ってみる</h2>\n\n<p>ディレクトリの作成とgitをスタートさせる。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span><span class=\"nb\">mkdir </span>git-work\n<span class=\"nv\">$ </span><span class=\"nb\">cd </span>git-work\n<span class=\"nv\">$ </span>git init\nInitialized empty Git repository <span class=\"k\">in</span> /home/hirao/workspace/git-work/.git/\n</code></pre></div></div>\n\n<p>もし途中でgit操作を間違って最初に戻りたくなったら</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span><span class=\"nb\">rm</span> <span class=\"nt\">-fr</span> .git/\n<span class=\"nv\">$ </span>git init\n<span class=\"c\"># もうちょっといい方法ありますか…？</span>\n</code></pre></div></div>\n\n<p>でやり直してください。</p>\n\n<h3>\n<span id=\"ファイルの作成\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>ファイルの作成</h3>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nb\">echo</span> <span class=\"s1\">'First line'</span> <span class=\"o\">&gt;&gt;</span> text.md \ngit add <span class=\"nb\">.</span>\ngit commit <span class=\"nt\">-m</span> <span class=\"s1\">'init'</span>\n\n<span class=\"nb\">echo</span> <span class=\"s1\">'line2'</span> <span class=\"o\">&gt;&gt;</span> text.md <span class=\"o\">&amp;&amp;</span> git commit <span class=\"nt\">-am</span> <span class=\"s1\">'update 2'</span>\n<span class=\"nb\">echo</span> <span class=\"s1\">'line3'</span> <span class=\"o\">&gt;&gt;</span> text.md <span class=\"o\">&amp;&amp;</span> git commit <span class=\"nt\">-am</span> <span class=\"s1\">'update 3'</span>\n<span class=\"nb\">echo</span> <span class=\"s1\">'line4'</span> <span class=\"o\">&gt;&gt;</span> text.md <span class=\"o\">&amp;&amp;</span> git commit <span class=\"nt\">-am</span> <span class=\"s1\">'update 4'</span>\n<span class=\"nb\">echo</span> <span class=\"s1\">'line5'</span> <span class=\"o\">&gt;&gt;</span> text.md\n<span class=\"nb\">echo</span> <span class=\"s1\">'line6'</span> <span class=\"o\">&gt;&gt;</span> text.md <span class=\"o\">&amp;&amp;</span> git commit <span class=\"nt\">-am</span> <span class=\"s1\">'update 6'</span>\n<span class=\"nb\">echo</span> <span class=\"s1\">'line7'</span> <span class=\"o\">&gt;&gt;</span> text.md <span class=\"o\">&amp;&amp;</span> git commit <span class=\"nt\">-am</span> <span class=\"s1\">'update 7'</span>\n<span class=\"nb\">echo</span> <span class=\"s1\">'line8'</span> <span class=\"o\">&gt;&gt;</span> text.md <span class=\"o\">&amp;&amp;</span> git commit <span class=\"nt\">-am</span> <span class=\"s1\">'update 8'</span>\n</code></pre></div></div>\n\n<p>一気上をすべてターミナルに流し込む。</p>\n\n<p>ファイルの中身を確認してみましょう。！！</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code>yk:git-work yk<span class=\"nv\">$ </span><span class=\"nb\">cat </span>text.md \nFirst line\nline2\nline3\nline4\nline5\nline6\nline7\nline8\n</code></pre></div></div>\n\n<p>ちゃんとファイルの中身があることを確認します。</p>\n\n<p>そしてGITのコミットのハッシュを <code>git log</code> で確認しておきましょう</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>git log <span class=\"nt\">--oneline</span>\n\n6e4cd32 <span class=\"o\">(</span>HEAD -&gt; master<span class=\"o\">)</span> update 8\n607b771 update 7\nda03d43 update 6\nbf8452b update 4\n89b026f update 3\nda1c070 update 2\n581d53a init\n</code></pre></div></div>\n\n<h3>\n<span id=\"s-squash--use-commit-but-meld-into-previous-commit-を使ってみる\" class=\"fragment\"></span><a href=\"#s-squash--use-commit-but-meld-into-previous-commit-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a><code>s, squash = use commit, but meld into previous commit</code> を使ってみる</h3>\n\n<p>squashは <code>use commit, but meld into previous commit</code> というメッセージでしたね。私はコミットをまとめるときによく使ってます！。最初のコミットは <code>init</code> というコミットメッセージをつけたので、grepして見つけます。上のように <code>git log --oneline</code> で一番下のやつをコピペしても可能です。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>git log <span class=\"nt\">--oneline</span> | <span class=\"nb\">grep </span>init\n\n581d53a init\n</code></pre></div></div>\n\n<p>初回のコミットを取得する。次のコミット <code>update 2</code> から編集できる。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code>git rebase <span class=\"nt\">-i</span> 581d53a\n</code></pre></div></div>\n\n<p>以下のように編集して。 <code>update2~3</code> をまとめてみましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>git rebase <span class=\"nt\">-i</span> 581d53a\n\npick da1c070 update 2\ns 89b026f update 3\npick bf8452b update 4\npick da03d43 update 6\npick 607b771 update 7\npick 6e4cd32 update 8\n</code></pre></div></div>\n\n<p><code>update2~3</code> は <code>s</code> オプションでの編集なので、コミットメッセージの編集ができます。以下のような感じ。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>git rebase <span class=\"nt\">-i</span> 581d53a\n\nhint: Waiting <span class=\"k\">for </span>your editor to close the file... \n<span class=\"c\"># This is a combination of 2 commits.</span>\n<span class=\"c\"># This is the 1st commit message:</span>\n\nupdate 2\n\n<span class=\"c\"># This is the commit message #2:</span>\n\nupdate 3\n</code></pre></div></div>\n\n<p>これを</p>\n\n<div class=\"code-frame\" data-lang=\"vim\"><div class=\"highlight\"><pre><code>update2 <span class=\"nb\">and</span> update3\n</code></pre></div></div>\n\n<p>へ変更。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>git log <span class=\"nt\">--oneline</span>  \n\n0317cc1 <span class=\"o\">(</span>HEAD -&gt; master<span class=\"o\">)</span> update 8\na1526af update 7\n27bce0d update 6\n764c9ea update 4\n3e13197 update2 and update3\n581d53a init\n</code></pre></div></div>\n\n<p>となりました。</p>\n\n<h3>\n<span id=\"e-edit--use-commit-but-stop-for-amending-を使ってみる\" class=\"fragment\"></span><a href=\"#e-edit--use-commit-but-stop-for-amending-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a><code>e, edit = use commit, but stop for amending</code> を使ってみる</h3>\n\n<p>間違って <code>update 5</code> というコミットを作るつもりだったのに、 <code>update6</code> にまとまっています。編集しましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span> git log <span class=\"nt\">--oneline</span>\n\n0317cc1 <span class=\"o\">(</span>HEAD -&gt; master<span class=\"o\">)</span> update 8\na1526af update 7\n27bce0d update 6\n764c9ea update 4\n3e13197 update2 and update3\n581d53a init\n</code></pre></div></div>\n\n<p>また init コミットまでのrebaseをしましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code>git rebase <span class=\"nt\">-i</span> 581d53a\n</code></pre></div></div>\n\n<p>出てきた画面で以下のように <code>update 6</code> の <code>pick</code> を <code>e</code> に変更して、以下のようにする。</p>\n\n<div class=\"code-frame\" data-lang=\"vim\"><div class=\"highlight\"><pre><code>pick <span class=\"m\">3</span>e13197 update2 <span class=\"nb\">and</span> update3\npick <span class=\"m\">764</span>c9ea <span class=\"k\">update</span> <span class=\"m\">4</span>\n<span class=\"k\">e</span> <span class=\"m\">27</span>bce0d <span class=\"k\">update</span> <span class=\"m\">6</span>\npick a1526af <span class=\"k\">update</span> <span class=\"m\">7</span>\npick <span class=\"m\">0317</span>cc1 <span class=\"k\">update</span> <span class=\"m\">8</span>\n</code></pre></div></div>\n\n<p>以下のような感じになって、rebaseがストップします。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>git rebase <span class=\"nt\">-i</span> 581d53a\n\nStopped at 27bce0d...  update 6\nYou can amend the commit now, with\n\n  git commit <span class=\"nt\">--amend</span> \n\nOnce you are satisfied with your changes, run\n\n  git rebase <span class=\"nt\">--continue</span>\n</code></pre></div></div>\n\n<p>最後のコミットを確認します。これを編集してコミットするか、リセットしてやりなおすか…</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>g show \n\ncommit 27bce0d8e8e4c9ef38ae702d7259b72ee775e6a5 <span class=\"o\">(</span>HEAD<span class=\"o\">)</span>\nAuthor: Yuki &lt;yuki.dees39th@gmail.com&gt;\nDate:   Mon Sep 16 21:41:29 2019 +0900\n\n    update 6\n\ndiff <span class=\"nt\">--git</span> a/text.md b/text.md\nindex a5e67f7..d3a7cc2 100644\n<span class=\"nt\">---</span> a/text.md\n+++ b/text.md\n@@ <span class=\"nt\">-2</span>,3 +2,5 @@ First line\n line2\n line3\n line4\n+line5\n+line6\n</code></pre></div></div>\n\n<p>一個前のコミットを削除しましょう。！！ <code>line5</code> と <code>line6</code> という行を追加したコミットです。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>git reset <span class=\"nt\">--hard</span> HEAD~\nHEAD is now at 764c9ea update 4\n\n<span class=\"nv\">$ </span>git log <span class=\"nt\">--oneline</span>\n764c9ea <span class=\"o\">(</span>HEAD<span class=\"o\">)</span> update 4\n3e13197 update2 and update3\n581d53a init\n</code></pre></div></div>\n\n<p>この時、 <code>update 4</code> までしか表示してないのは、rebaseの途中で動作を止めるオプション <code>e/edit</code> を使ったからです。 <br>\nコミット削除したら、一行ずつ追加してコミットしていきます。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span><span class=\"nb\">echo</span> <span class=\"s1\">'line5'</span> <span class=\"o\">&gt;&gt;</span> text.md <span class=\"o\">&amp;&amp;</span> git commit <span class=\"nt\">-am</span> <span class=\"s1\">'update 5'</span>\n<span class=\"nv\">$ </span><span class=\"nb\">echo</span> <span class=\"s1\">'line6'</span> <span class=\"o\">&gt;&gt;</span> text.md <span class=\"o\">&amp;&amp;</span> git commit <span class=\"nt\">-am</span> <span class=\"s1\">'update 6'</span>\n</code></pre></div></div>\n\n<p>ちゃんとコミットされているか、確認します。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>git log <span class=\"nt\">--oneline</span>\nb9e284b <span class=\"o\">(</span>HEAD<span class=\"o\">)</span> update 6\nfd9fe8c update 5\n764c9ea update 4\n3e13197 update2 and update3\n581d53a init\n</code></pre></div></div>\n\n<p>大丈夫そうなら <code>git rebase --continue</code> して続けます。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>git log <span class=\"nt\">--oneline</span>\n\n818cfad <span class=\"o\">(</span>HEAD -&gt; master<span class=\"o\">)</span> update 8\nb9fffe7 update 7\nb9e284b update 6\nfd9fe8c update 5\n764c9ea update 4\n3e13197 update2 and update3\n581d53a init\n</code></pre></div></div>\n\n<p>これで5と6を分割できましたね。<br>\nただしeオプションは、下手にやると <code>update 7</code> 以降のコミットによってコンフリクトが発生するので、置きをつけてください。</p>\n\n<h3>\n<span id=\"f-fixup--like-squash-but-discard-this-commits-log-message-を使ってみる\" class=\"fragment\"></span><a href=\"#f-fixup--like-squash-but-discard-this-commits-log-message-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a><code>f, fixup = like \"squash\", but discard this commit's log message</code> を使ってみる</h3>\n\n<p>メッセージの編集なしの <code>s</code> オプションと同じです。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>git rebase <span class=\"nt\">-i</span> 581d53a\n\npick 3e13197 update2 and update3\nf 764c9ea update 4\nf fd9fe8c update 5\nf b9e284b update 6\nf b9fffe7 update 7\npick 818cfad update 8\n</code></pre></div></div>\n\n<p>と最後のコミット以外を<code>f</code> オプションをつけて <code>update2 and update3</code> にすべて統合してみましょう！！！<br>\nコミットメッセージが確認されずにコミットされましたね。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>git log <span class=\"nt\">--oneline</span>\n\n4b3bee7 <span class=\"o\">(</span>HEAD -&gt; master<span class=\"o\">)</span> update 8\n0cd592f update2 and update3\n581d53a init\n</code></pre></div></div>\n\n<p>コミット <code>update6~8</code> がまとまりましたが、コミットメッセージは何も聞かれませんでした。これは <code>f</code> コマンドはコミットメッセージはそのままコミットをまとめるものだからです。</p>\n\n<h3>\n<span id=\"r-reword--use-commit-but-edit-the-commit-message-を使ってみよう\" class=\"fragment\"></span><a href=\"#r-reword--use-commit-but-edit-the-commit-message-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86\"><i class=\"fa fa-link\"></i></a><code>r, reword = use commit, but edit the commit message</code> を使ってみよう</h3>\n\n<p><code>r</code> を使ってコミットのメッセージを変更しよう。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>git rebase <span class=\"nt\">-i</span> 581d53a\n\npick 0cd592f update2 and update3\nr 3c72cf0 update 8\n</code></pre></div></div>\n\n<p>するとvimが立ち上がるので</p>\n\n<div class=\"code-frame\" data-lang=\"vim\"><div class=\"highlight\"><pre><code><span class=\"k\">last</span> commit \n</code></pre></div></div>\n\n<p>と入力して閉じるとコミットメッセージが変更されています。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>git log <span class=\"nt\">--oneline</span>\n\n1826743 <span class=\"o\">(</span>HEAD -&gt; master<span class=\"o\">)</span> last commit\n0cd592f update2 and update3\n581d53a init\n</code></pre></div></div>\n\n<p>実は一番最後のコミットメッセージの変更でしたら</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code>git commit <span class=\"nt\">--amend</span>\n</code></pre></div></div>\n\n<p>で大丈夫です。</p>\n\n<div class=\"code-frame\" data-lang=\"vim\"><div class=\"highlight\"><pre><code><span class=\"k\">last</span> commit <span class=\"p\">(</span><span class=\"m\">2</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>に編集してみましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>git log <span class=\"nt\">--oneline</span>\n89a9f1c <span class=\"o\">(</span>HEAD -&gt; master<span class=\"o\">)</span> last commit <span class=\"o\">(</span>2<span class=\"o\">)</span>\n0cd592f update2 and update3\n581d53a init\n</code></pre></div></div>\n\n<h3>\n<span id=\"d-drop--remove-commit-を使ってみよう\" class=\"fragment\"></span><a href=\"#d-drop--remove-commit-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86\"><i class=\"fa fa-link\"></i></a><code>d, drop = remove commit</code> を使ってみよう</h3>\n\n<p>実は最後のコミットは使わないコミットでした。的な場合は <code>d</code> オプションで消しましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>git rebase <span class=\"nt\">-i</span> 581d53a\n\npick 0cd592f update2 and update3\nd 89a9f1c last commit <span class=\"o\">(</span>2<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>最後のコミットを消せたと思います。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>git log <span class=\"nt\">--oneline</span>\n0cd592f <span class=\"o\">(</span>HEAD -&gt; master<span class=\"o\">)</span> update2 and update3\n581d53a init\n\n<span class=\"nv\">$ </span><span class=\"nb\">cat </span>text.md\nFirst line\nline2\nline3\nline4\nline5\nline6\nline7\n</code></pre></div></div>\n\n<p>line8が消えました。</p>\n\n<h3>\n<span id=\"p-pick--use-commit-を使ってみる\" class=\"fragment\"></span><a href=\"#p-pick--use-commit-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a><code>p, pick = use commit</code> を使ってみる</h3>\n\n<p>今まで何回も使っていましたね。何もしないのが <code>pick</code> みたいです。</p>\n\n<h3>\n<span id=\"x-exec--run-command-the-rest-of-the-line-using-shell-を使ってみよう\" class=\"fragment\"></span><a href=\"#x-exec--run-command-the-rest-of-the-line-using-shell-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86\"><i class=\"fa fa-link\"></i></a><code>x, exec = run command (the rest of the line) using shell</code> を使ってみよう</h3>\n\n<p><code>x</code> コマンドはすごくいろんなことができるので調べてみると楽しいかもしれません。今回は先人たちの記事の紹介のみにとどめておきます。理由は、私がこれを使わなければいけないシチュエーションを思いつかなかったからです。</p>\n\n<p>以下の記事では <code>exec git stash pop; git commit -a --amend -C HEAD</code> や <code>exec ruby -e '$&lt;.read == \"Alfa\\nBravo\\n\" ? exit(0) : exit(1)' &lt; example.txt</code> などが紹介されており、gitの他のコマンドを実行したり、rubyを実行したり、さまざまな使用例がありそうでした。</p>\n\n<ul>\n<li><a href=\"https://yu8mada.com/2018/08/23/if-you-drastically-rewrite-git-s-commit-history-git-rebase-i-is-recommended/#content-1-8\" rel=\"nofollow noopener\" target=\"_blank\">Git のコミット履歴を大胆に書き換えるなら git rebase -i がオススメ - yu8mada</a></li>\n<li><a href=\"https://qiita.com/yuku_t/items/fed530acb97385ecbeee\" id=\"reference-67e7a0801daf78591a24\">git-rebaseのexecを使ってstashした内容を履歴に埋め込む\n</a></li>\n</ul>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p><code>git rebase -i</code> のときのオプションはいかがだったでしょうか！</p>\n\n<p>ドキュメントを読んで知っていたけど、実際に使ったのは初めて、というのもあるかもしれません。</p>\n\n<p>最後まで読んでいただきありがとうございました！</p>\n\n<p>.</p>\n","body":"# `git rebase -i` したときのコマンドをすべて試してみた(p, r, e,s ,f ,x ,d)\n\nいわゆる `git rebase -i HEAD~~` とかしたときに出てくる下のほうに出てくるコメントアウトされているコマンドのことを今回まとめます。\n\n```shell\npick 85b703f update 2\npick 4d9e3ec update 3\n\n# Rebase 5d6b0f5..1fc7711 onto 5d6b0f5 (6 commands)\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n```\n\n|  | 英語 | なんとなく適当な日本語訳 |\n| :-: | :-: | :-: |\n| p, pick | use commit | コミットを使う |\n| r, reword | use commit, but edit the commit message | コミットを使うが、コミットメッセージを編集する |\n| e, edit | use commit, but stop for amending | コミットを使うが、修正を止める |\n| s, squash | use commit, but meld into previous commit | コミットを使うが、以前のコミットに混ぜる |\n| f, fixup | like \"squash\", but discard this commit's log message | squashと似ているが、コミットメッセージは破棄する |\n| x, exec | run command (the rest of the line) using shell | シェルを使用して、残りのコマンドを実行する |\n| d, drop | remove commit | コミットを削除する |\n\n## はじめに\n\nこれはgitの正確に記述しして、きちんと学んで形からはいる！！というタイプの記事ではないです。\n実際に体験して、なんとなく理解してみようという記事です。\n\nきちんとした記事は以下のようなのを参考にしてください。\n\n- [サルでもわかるGit入門〜バージョン管理を使いこなそう〜【プロジェクト管理ツールBacklog】](https://backlog.com/ja/git-tutorial/)\n\n\n## 実際に使ってみる\n\nディレクトリの作成とgitをスタートさせる。\n\n```shell\n$ mkdir git-work\n$ cd git-work\n$ git init\nInitialized empty Git repository in /home/hirao/workspace/git-work/.git/\n```\n\nもし途中でgit操作を間違って最初に戻りたくなったら\n\n```shell\n$ rm -fr .git/\n$ git init\n# もうちょっといい方法ありますか…？\n```\n\nでやり直してください。\n\n### ファイルの作成\n\n\n```shell\necho 'First line' >> text.md \ngit add .\ngit commit -m 'init'\n\necho 'line2' >> text.md && git commit -am 'update 2'\necho 'line3' >> text.md && git commit -am 'update 3'\necho 'line4' >> text.md && git commit -am 'update 4'\necho 'line5' >> text.md\necho 'line6' >> text.md && git commit -am 'update 6'\necho 'line7' >> text.md && git commit -am 'update 7'\necho 'line8' >> text.md && git commit -am 'update 8'\n```\n\n一気上をすべてターミナルに流し込む。\n\nファイルの中身を確認してみましょう。！！\n\n```shell\nyk:git-work yk$ cat text.md \nFirst line\nline2\nline3\nline4\nline5\nline6\nline7\nline8\n```\n\nちゃんとファイルの中身があることを確認します。\n\nそしてGITのコミットのハッシュを `git log` で確認しておきましょう\n\n```shell\n$ git log --oneline\n\n6e4cd32 (HEAD -> master) update 8\n607b771 update 7\nda03d43 update 6\nbf8452b update 4\n89b026f update 3\nda1c070 update 2\n581d53a init\n```\n\n### `s, squash = use commit, but meld into previous commit` を使ってみる\n\nsquashは `use commit, but meld into previous commit` というメッセージでしたね。私はコミットをまとめるときによく使ってます！。最初のコミットは `init` というコミットメッセージをつけたので、grepして見つけます。上のように `git log --oneline` で一番下のやつをコピペしても可能です。\n\n```shell\n$ git log --oneline | grep init\n\n581d53a init\n```\n\n初回のコミットを取得する。次のコミット `update 2` から編集できる。\n\n```shell\ngit rebase -i 581d53a\n```\n\n以下のように編集して。 `update2~3` をまとめてみましょう。\n\n```shell\n$ git rebase -i 581d53a\n\npick da1c070 update 2\ns 89b026f update 3\npick bf8452b update 4\npick da03d43 update 6\npick 607b771 update 7\npick 6e4cd32 update 8\n```\n\n`update2~3` は `s` オプションでの編集なので、コミットメッセージの編集ができます。以下のような感じ。\n\n```shell\n$ git rebase -i 581d53a\n\nhint: Waiting for your editor to close the file... \n# This is a combination of 2 commits.\n# This is the 1st commit message:\n\nupdate 2\n\n# This is the commit message #2:\n\nupdate 3\n```\n\nこれを\n\n```vim\nupdate2 and update3\n```\n\nへ変更。\n\n```shell\n$ git log --oneline  \n\n0317cc1 (HEAD -> master) update 8\na1526af update 7\n27bce0d update 6\n764c9ea update 4\n3e13197 update2 and update3\n581d53a init\n```\n\n\nとなりました。\n\n### `e, edit = use commit, but stop for amending` を使ってみる\n\n間違って `update 5` というコミットを作るつもりだったのに、 `update6` にまとまっています。編集しましょう。\n\n```shell\n$  git log --oneline\n\n0317cc1 (HEAD -> master) update 8\na1526af update 7\n27bce0d update 6\n764c9ea update 4\n3e13197 update2 and update3\n581d53a init\n```\n\nまた init コミットまでのrebaseをしましょう。\n\n```shell\ngit rebase -i 581d53a\n```\n\n出てきた画面で以下のように `update 6` の `pick` を `e` に変更して、以下のようにする。\n\n```vim\npick 3e13197 update2 and update3\npick 764c9ea update 4\ne 27bce0d update 6\npick a1526af update 7\npick 0317cc1 update 8\n```\n\n以下のような感じになって、rebaseがストップします。\n\n```shell\n$ git rebase -i 581d53a\n\nStopped at 27bce0d...  update 6\nYou can amend the commit now, with\n\n  git commit --amend \n\nOnce you are satisfied with your changes, run\n\n  git rebase --continue\n```\n\n最後のコミットを確認します。これを編集してコミットするか、リセットしてやりなおすか…\n\n```shell\n$ g show \n\ncommit 27bce0d8e8e4c9ef38ae702d7259b72ee775e6a5 (HEAD)\nAuthor: Yuki <yuki.dees39th@gmail.com>\nDate:   Mon Sep 16 21:41:29 2019 +0900\n\n    update 6\n\ndiff --git a/text.md b/text.md\nindex a5e67f7..d3a7cc2 100644\n--- a/text.md\n+++ b/text.md\n@@ -2,3 +2,5 @@ First line\n line2\n line3\n line4\n+line5\n+line6\n```\n\n一個前のコミットを削除しましょう。！！ `line5` と `line6` という行を追加したコミットです。\n\n```shell\n$ git reset --hard HEAD~\nHEAD is now at 764c9ea update 4\n\n$ git log --oneline\n764c9ea (HEAD) update 4\n3e13197 update2 and update3\n581d53a init\n```\n\nこの時、 `update 4` までしか表示してないのは、rebaseの途中で動作を止めるオプション `e/edit` を使ったからです。 \nコミット削除したら、一行ずつ追加してコミットしていきます。\n\n```shell\n$ echo 'line5' >> text.md && git commit -am 'update 5'\n$ echo 'line6' >> text.md && git commit -am 'update 6'\n```\n\nちゃんとコミットされているか、確認します。\n\n```shell\n$ git log --oneline\nb9e284b (HEAD) update 6\nfd9fe8c update 5\n764c9ea update 4\n3e13197 update2 and update3\n581d53a init\n```\n\n大丈夫そうなら `git rebase --continue` して続けます。\n\n```shell\n$ git log --oneline\n\n818cfad (HEAD -> master) update 8\nb9fffe7 update 7\nb9e284b update 6\nfd9fe8c update 5\n764c9ea update 4\n3e13197 update2 and update3\n581d53a init\n```\n\nこれで5と6を分割できましたね。\nただしeオプションは、下手にやると `update 7` 以降のコミットによってコンフリクトが発生するので、置きをつけてください。\n\n### `f, fixup = like \"squash\", but discard this commit's log message` を使ってみる\n\nメッセージの編集なしの `s` オプションと同じです。\n\n```shell\n$ git rebase -i 581d53a\n\npick 3e13197 update2 and update3\nf 764c9ea update 4\nf fd9fe8c update 5\nf b9e284b update 6\nf b9fffe7 update 7\npick 818cfad update 8\n```\n\nと最後のコミット以外を`f` オプションをつけて `update2 and update3` にすべて統合してみましょう！！！\nコミットメッセージが確認されずにコミットされましたね。\n\n```shell\n$ git log --oneline\n\n4b3bee7 (HEAD -> master) update 8\n0cd592f update2 and update3\n581d53a init\n```\n\n\n\nコミット `update6~8` がまとまりましたが、コミットメッセージは何も聞かれませんでした。これは `f` コマンドはコミットメッセージはそのままコミットをまとめるものだからです。\n\n### `r, reword = use commit, but edit the commit message` を使ってみよう\n\n`r` を使ってコミットのメッセージを変更しよう。\n\n```shell\n$ git rebase -i 581d53a\n\npick 0cd592f update2 and update3\nr 3c72cf0 update 8\n```\n\nするとvimが立ち上がるので\n\n```vim\nlast commit \n```\n\nと入力して閉じるとコミットメッセージが変更されています。\n\n```shell\n$ git log --oneline\n\n1826743 (HEAD -> master) last commit\n0cd592f update2 and update3\n581d53a init\n```\n\n実は一番最後のコミットメッセージの変更でしたら\n\n```shell\ngit commit --amend\n```\n\nで大丈夫です。\n\n```vim\nlast commit (2)\n```\n\nに編集してみましょう。\n\n```shell\n$ git log --oneline\n89a9f1c (HEAD -> master) last commit (2)\n0cd592f update2 and update3\n581d53a init\n```\n\n### `d, drop = remove commit` を使ってみよう\n\n実は最後のコミットは使わないコミットでした。的な場合は `d` オプションで消しましょう。\n\n```shell\n$ git rebase -i 581d53a\n\npick 0cd592f update2 and update3\nd 89a9f1c last commit (2)\n```\n\n最後のコミットを消せたと思います。\n\n```shell\n$ git log --oneline\n0cd592f (HEAD -> master) update2 and update3\n581d53a init\n\n$ cat text.md\nFirst line\nline2\nline3\nline4\nline5\nline6\nline7\n```\n\nline8が消えました。\n\n### `p, pick = use commit` を使ってみる\n\n今まで何回も使っていましたね。何もしないのが `pick` みたいです。\n\n### `x, exec = run command (the rest of the line) using shell` を使ってみよう\n\n`x` コマンドはすごくいろんなことができるので調べてみると楽しいかもしれません。今回は先人たちの記事の紹介のみにとどめておきます。理由は、私がこれを使わなければいけないシチュエーションを思いつかなかったからです。\n\n以下の記事では `exec git stash pop; git commit -a --amend -C HEAD` や `exec ruby -e '$<.read == \"Alfa\\nBravo\\n\" ? exit(0) : exit(1)' < example.txt` などが紹介されており、gitの他のコマンドを実行したり、rubyを実行したり、さまざまな使用例がありそうでした。\n\n- [Git のコミット履歴を大胆に書き換えるなら git rebase -i がオススメ - yu8mada](https://yu8mada.com/2018/08/23/if-you-drastically-rewrite-git-s-commit-history-git-rebase-i-is-recommended/#content-1-8)\n- [git-rebaseのexecを使ってstashした内容を履歴に埋め込む\n](https://qiita.com/yuku_t/items/fed530acb97385ecbeee)\n\n## 終わりに\n\n`git rebase -i` のときのオプションはいかがだったでしょうか！\n\nドキュメントを読んで知っていたけど、実際に使ったのは初めて、というのもあるかもしれません。\n\n最後まで読んでいただきありがとうございました！\n\n\n\n\n.\n","coediting":false,"comments_count":0,"created_at":"2019-09-17T15:24:55+09:00","group":null,"id":"e9f723a553d4eb050817","likes_count":14,"private":false,"reactions_count":0,"stocks_count":9,"tags":[{"name":"Git","versions":[]},{"name":"rebase","versions":[]}],"title":"【git rebase -i】したときのコマンドをすべて試してみた(p, r, e,s ,f ,x ,d)","updated_at":"2019-09-17T15:24:55+09:00","url":"https://qiita.com/ykhirao/items/e9f723a553d4eb050817","user":{"description":"Web Developer For 6 years.\r\nPHP/Laravel && (React OR Vue.js)\r\nTypeScript/node.js\r\n\r\n業務委託の依頼とかはWantedlyとかからでお願いします！","facebook_id":"","followees_count":38,"followers_count":95,"github_login_name":"ykhirao","id":"ykhirao","items_count":61,"linkedin_id":"","location":"Tokyo, Japan","name":"yk","organization":"","permanent_id":112929,"profile_image_url":"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/profile-images/1639030792","team_only":false,"twitter_screen_name":"ykhirao","website_url":"https://www.wantedly.com/id/ykhirao"},"page_views_count":null,"team_membership":null}},"path":"posts/e9f723a553d4eb050817"}
