{"template":"__react_static_root__/src/components/QiitaPost","sharedHashesByProp":{},"data":{"post":{"rendered_body":"<h1 data-sourcepos=\"1:1-1:79\">\n<span id=\"gwなのでラズパイ買ってきてwebサーバーとして公開した件\" class=\"fragment\"></span><a href=\"#gw%E3%81%AA%E3%81%AE%E3%81%A7%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E8%B2%B7%E3%81%A3%E3%81%A6%E3%81%8D%E3%81%A6web%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%A8%E3%81%97%E3%81%A6%E5%85%AC%E9%96%8B%E3%81%97%E3%81%9F%E4%BB%B6\"><i class=\"fa fa-link\"></i></a>GWなのでラズパイ買ってきてWebサーバーとして公開した件</h1>\n<p data-sourcepos=\"3:1-5:81\">インストーラーのアップデートなどで過去の記事の内容が古くなっていたので一応最新っぽいものを乗せます。<br>\n全世界公開しているので自分でセキュリティの知識を得てから使ってください。責任は持てません。<br>\nやばそうなところあったら編集リクエストくださると・・・</p>\n<h2 data-sourcepos=\"7:1-7:27\">\n<span id=\"ラズパイ購入する\" class=\"fragment\"></span><a href=\"#%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E8%B3%BC%E5%85%A5%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>ラズパイ購入する</h2>\n<ul data-sourcepos=\"9:1-11:0\">\n<li data-sourcepos=\"9:1-9:35\">メルカリで購入しました</li>\n<li data-sourcepos=\"10:1-11:0\"><a href=\"https://jp.mercari.com/search?keyword=%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://jp.mercari.com/search?keyword=ラズパイ</a></li>\n</ul>\n<h2 data-sourcepos=\"12:1-12:42\">\n<span id=\"ラズパイをインストールする\" class=\"fragment\"></span><a href=\"#%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>ラズパイをインストールする</h2>\n<p data-sourcepos=\"14:1-14:107\">2023年にはRaspberry Pi Imagerというインストーラーを使うやり方が主流みたいです。</p>\n<ul data-sourcepos=\"16:1-18:0\">\n<li data-sourcepos=\"16:1-16:91\">\n<a href=\"https://www.raspberrypi.com/software/\" rel=\"nofollow noopener\" target=\"_blank\">公式</a>からダウンロードしましょう。</li>\n<li data-sourcepos=\"17:1-18:0\">ここが参考になりました <a href=\"https://nw-electric.way-nifty.com/blog/2022/05/post-2cdd01.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://nw-electric.way-nifty.com/blog/2022/05/post-2cdd01.html</a>\n</li>\n</ul>\n<p data-sourcepos=\"19:1-19:157\">初期ユーザー <code>user＝pi、password＝raspberry</code> は2022年からデフォルトで存在しないので、設定から作りましょう。以下参考</p>\n<details>\n<summary>ラズパイへのアクセスはSSH/CUIのみの方向け</summary>\n<p data-sourcepos=\"24:1-24:163\"><a href=\"https://camo.qiitausercontent.com/b804d5f0b1282445468a9a211930ad2e5ee04c92/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f32613562363864322d393562622d373330612d313130382d3333656464363164393939302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F2a5b68d2-95bb-730a-1108-33edd61d9990.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=028178245d8410debfecb34a301c8374\" alt=\"スクリーンショット 2023-05-07 23.14.09.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/2a5b68d2-95bb-730a-1108-33edd61d9990.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F2a5b68d2-95bb-730a-1108-33edd61d9990.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2aae32760878fc7e6dc23ef27be60e23 1x\" loading=\"lazy\"></a></p>\n<ul data-sourcepos=\"27:1-29:0\">\n<li data-sourcepos=\"27:1-27:54\">OSはPI OS Lite （ダウンロード早いです）</li>\n<li data-sourcepos=\"28:1-29:0\">画面右下の設定マークからSSH設定を作れます</li>\n</ul>\n<p data-sourcepos=\"30:1-30:103\">一応以下設定乗せます。mac側から <code>ssh pi</code> でログインできるようにしてます。</p>\n<div class=\"code-frame\" data-lang=\"terminal\" data-sourcepos=\"32:1-42:3\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>vim ~/.ssh/config\n<span class=\"go\">\nHost pi\n</span><span class=\"gp\">  HostName raspberrypi.local #</span><span class=\"w\"> </span>http://192.168.0.23/, <span class=\"sb\">`</span><span class=\"nv\">$ </span>ip addr<span class=\"sb\">`</span>\n<span class=\"go\">  User ykhirao\n  IdentityFile /Users/ykhirao/.ssh/id_rsa_pi\n\n</span><span class=\"gp\">$</span><span class=\"w\"> </span>ssh pi\n<span class=\"gp\">$</span><span class=\"w\"> </span>ykhirao@raspberrypi:~ <span class=\"err\">$</span>\n</code></pre></div></div>\n</details>\n<h2 data-sourcepos=\"47:1-47:30\">\n<span id=\"サーバーを用意する\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>サーバーを用意する</h2>\n<p data-sourcepos=\"49:1-50:126\">nginx でも Apacheでも適当なミドルウエアとphpでもnodejsでも何でもいいのでアプリケーションサーバー選ぶ。<br>\n何いっているのという方は<a href=\"https://www.rworks.jp/system/system-column/sys-entry/14865/\" rel=\"nofollow noopener\" target=\"_blank\">適当な記事</a>を読む。</p>\n<p data-sourcepos=\"52:1-52:286\">今回は <code>nginx x nodejs</code> にしますが、ApacheのC10K問題とかまでアクセスされる予定ないので（ラズパイのメモリ性能とかが先に限界迎えるはず・・・）自分の好きな環境とか身近な記事を参考にするとよいと思います。</p>\n<p data-sourcepos=\"55:1-55:105\">上記記事と同様に設定すると、以下のコマンドを入力してサーバーを立ち上げ</p>\n<div class=\"code-frame\" data-lang=\"terminal\" data-sourcepos=\"57:1-59:3\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>node index.js\n</code></pre></div></div>\n<p data-sourcepos=\"61:1-61:320\">同じネットワーク内から <code>http://raspberrypi.local/</code>　か <a href=\"http://192.168.0.23/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://192.168.0.23/</a> (人によってIP違う可能性あり) にアクセスしたとき <code>nginx</code> のミドルウエアが動き <code>nodejsサーバー</code> にアクセスします。うまく設定できてたら <code>Hello World</code> が表示させましょう。</p>\n<details>\n<summary>コマンドまとめと参考記事</summary>\n<div class=\"code-frame\" data-lang=\"terminal\" data-sourcepos=\"67:1-94:3\"><div class=\"highlight\"><pre><code><span class=\"gp\">#</span><span class=\"w\"> </span>パッケージを最新版へ\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>apt-get update\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>apt-get upgrade\n<span class=\"go\">\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>ミドルウエア\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>nginx <span class=\"nt\">-y</span>\n<span class=\"go\">\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>nodejsのインストール（nが使いたいのでもろもろやってます）\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>nodejs npm\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>npm <span class=\"nb\">install </span>n <span class=\"nt\">-g</span>\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>n lts\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>apt purge nodejs npm\n<span class=\"go\">\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>アプリケーションサーバーの作成\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo mkdir</span> <span class=\"nt\">-p</span> ~/workspace/piapp\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>vi ~/workspace/piapp/index.js\n<span class=\"gp\">#</span><span class=\"w\"> </span>下記ファイルを参考に修正する\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>vi /etc/nginx/sites-enabled\n<span class=\"gp\">#</span><span class=\"w\"> </span>下記ファイルを参考に修正する\n<span class=\"go\">\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>アプリケーションサーバーの立ち上げ\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>npm <span class=\"nb\">install </span>nodemon <span class=\"nt\">-g</span>\n<span class=\"gp\">$</span><span class=\"w\"> </span>nodemon ~/workspace/piapp/index.js\n<span class=\"go\">\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>nodejsプロセスが死んでも自動で再起動させるため nodemon を利用してます。\n<span class=\"gp\">#</span><span class=\"w\"> </span>必要なければ node ~/workspace/piapp/index.js でよいです。\n</code></pre></div></div>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"96:1-104:3\">\n<div class=\"code-lang\"><span class=\"bold\">~/workspace/piapp/index.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nf\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">http</span><span class=\"dl\">\"</span><span class=\"p\">);</span> \n<span class=\"kd\">const</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nf\">createServer</span><span class=\"p\">(</span><span class=\"nf\">function </span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">;</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">setHeader</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Content-Type</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">text/plain</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">end</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello World</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nf\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">);</span>\n</code></pre></div>\n</div>\n<div class=\"code-frame\" data-lang=\"/etc/nginx/sites-enabled\" data-sourcepos=\"106:1-111:3\"><div class=\"highlight\"><pre><code>\tlocation / {\n\t\ttry_files $uri $uri/ =404;\n\t\tproxy_pass http://localhost:3000;\n\t}\n</code></pre></div></div>\n<p data-sourcepos=\"114:1-114:12\">参考記事</p>\n<ul data-sourcepos=\"116:1-118:0\">\n<li data-sourcepos=\"116:1-116:153\">\n<a href=\"https://hondakenya.work/ubuntu-nginx-node-js/\" rel=\"nofollow noopener\" target=\"_blank\">UbuntuサーバーにnginxとNode.jsを入れてWebサーバーを建てる</a>を参考にしました。</li>\n<li data-sourcepos=\"117:1-118:0\"><a href=\"https://qiita.com/cointoss1973/items/c000c4f84ae4b0c166b5\" id=\"reference-5740ff1358697fac06b5\">Ubuntu で Node の最新版/推奨版を使う (n コマンド編)</a></li>\n</ul>\n</details>\n<h2 data-sourcepos=\"121:1-121:78\">\n<span id=\"自宅のルーターにポート転送設定して全世界公開します\" class=\"fragment\"></span><a href=\"#%E8%87%AA%E5%AE%85%E3%81%AE%E3%83%AB%E3%83%BC%E3%82%BF%E3%83%BC%E3%81%AB%E3%83%9D%E3%83%BC%E3%83%88%E8%BB%A2%E9%80%81%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%A6%E5%85%A8%E4%B8%96%E7%95%8C%E5%85%AC%E9%96%8B%E3%81%97%E3%81%BE%E3%81%99\"><i class=\"fa fa-link\"></i></a>自宅のルーターにポート転送設定して全世界公開します</h2>\n<p data-sourcepos=\"123:1-123:296\"><a href=\"http://raspberrypi.local/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://raspberrypi.local/</a> は同じネットワーク内のPC・スマホ等からしかアクセスできませんが、noipで作った <a href=\"http://example.hopto.org/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://example.hopto.org/</a> みたいなアドレスにアクセスすると <code>Hello World</code> と表示できたらOKです。 全世界に公開できました。</p>\n<p data-sourcepos=\"125:1-125:21\">参考にした記事</p>\n<ul data-sourcepos=\"126:1-127:0\">\n<li data-sourcepos=\"126:1-127:0\"><a href=\"https://ichiken-usa.blogspot.com/2022/01/raspi-web-server.html\" rel=\"nofollow noopener\" target=\"_blank\">安全にラズパイWebサーバーを世界に公開するための手順</a></li>\n</ul>\n<p data-sourcepos=\"128:1-128:78\">ポートフォワーディングを使って安全に公開しましょう。</p>\n<h3 data-sourcepos=\"130:1-130:37\">\n<span id=\"ファイヤーウォール設定\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%A4%E3%83%BC%E3%82%A6%E3%82%A9%E3%83%BC%E3%83%AB%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>ファイヤーウォール設定</h3>\n<details>\n<summary> Ubuntuのデフォルトのufwで設定 </summary>\n<p data-sourcepos=\"135:1-135:39\">ラズパイに上で以下コマンド</p>\n<div class=\"code-frame\" data-lang=\"terminal\" data-sourcepos=\"137:1-148:3\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>ufw\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>ufw allow http\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>ufw allow https\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>ufw allow ssh\n<span class=\"gp\">#</span><span class=\"w\"> </span>sshでアクセスするので必要。失敗したらsshできず終わる。\n<span class=\"go\">\n</span><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>ufw <span class=\"nb\">enable</span>\n<span class=\"go\">\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>ラズパイの再起動\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>reboot\n</code></pre></div></div>\n</details>\n<h3 data-sourcepos=\"153:1-153:14\">\n<span id=\"ddns作成\" class=\"fragment\"></span><a href=\"#ddns%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>DDNS作成</h3>\n<p data-sourcepos=\"155:1-155:110\">自宅のIPアドレスは定期的に変更されます。以下のようなサイトで確認できます。</p>\n<ul data-sourcepos=\"157:1-159:0\">\n<li data-sourcepos=\"157:1-157:112\"><a href=\"https://www.cman.jp/network/support/go_access.cgi\" rel=\"nofollow noopener\" target=\"_blank\">アクセス情報【使用中のIPアドレス確認】</a></li>\n<li data-sourcepos=\"158:1-159:0\"><a href=\"https://tarufu.info/jcom-global-ip/\" rel=\"nofollow noopener\" target=\"_blank\">JCOMでグローバルIPアドレスを変更しようとした話</a></li>\n</ul>\n<p data-sourcepos=\"160:1-160:218\">自宅のIPがころころ変わったら、ラズパイにアクセスできないのでもろもろいろいろやってくれるサイトにアカウント作るって話です。詳しくは調べてください。</p>\n<details>\n<summary>NOIPというサイトを使います</summary>\n<p data-sourcepos=\"165:1-165:185\">noipのパスワードは後でJCOMルーター上の設定で必要となるので、共通で使っているもの以外がいいと思います。chromeに覚えさせましょう。</p>\n<p data-sourcepos=\"167:1-167:12\">参考記事</p>\n<ul data-sourcepos=\"168:1-169:0\">\n<li data-sourcepos=\"168:1-169:0\"><a href=\"https://www.try-e.co.jp/manual/getnoip.pdf\" rel=\"nofollow noopener\" target=\"_blank\">No-ip のアカウント及びDDNSサーバーアドレスの取得方法</a></li>\n</ul>\n</details>\n<h3 data-sourcepos=\"172:1-172:29\">\n<span id=\"ルーターのddns設定\" class=\"fragment\"></span><a href=\"#%E3%83%AB%E3%83%BC%E3%82%BF%E3%83%BC%E3%81%AEddns%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>ルーターのDDNS設定</h3>\n<details>\n<summary> 筆者はJCOMなのでその設定 </summary>\n<p data-sourcepos=\"177:1-177:73\"><a href=\"http://192.168.0.1/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://192.168.0.1/</a> か <a href=\"http://192.168.100.1/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://192.168.100.1/</a> でアクセスできる。</p>\n<p data-sourcepos=\"179:1-179:55\">初期ID/PASSは以下ですが変更しましょう。</p>\n<div class=\"code-frame\" data-lang=\"terminal\" data-sourcepos=\"181:1-184:3\"><div class=\"highlight\"><pre><code><span class=\"go\">ID: admin\nPassword: password\n</span></code></pre></div></div>\n<p data-sourcepos=\"186:1-186:103\">設定項目は以下スクショを参考に、先程作ったnoipの情報を使ってください。</p>\n<p data-sourcepos=\"188:1-188:162\"><a href=\"https://camo.qiitausercontent.com/6021a8b01a2c828e979f3d1bb628edc12384d28d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f36363063393866622d356433382d616238372d656664322d3065383435643931633238342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F660c98fb-5d38-ab87-efd2-0e845d91c284.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=268ddf14c92b47c73c75e99304df11c1\" alt=\"スクリーンショット 2023-05-08 0.03.54.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/660c98fb-5d38-ab87-efd2-0e845d91c284.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F660c98fb-5d38-ab87-efd2-0e845d91c284.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=709288f2b7a6b52a00ac7a71b3c9db03 1x\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"191:1-191:21\">参考にした記事</p>\n<ul data-sourcepos=\"192:1-193:0\">\n<li data-sourcepos=\"192:1-193:0\"><a href=\"https://homemadegarbage.com/humax-port\" rel=\"nofollow noopener\" target=\"_blank\">HUMAX HG100R-02JG の ポート開放設定</a></li>\n</ul>\n</details>\n<h3 data-sourcepos=\"196:1-196:43\">\n<span id=\"ポートフォワーディング設定\" class=\"fragment\"></span><a href=\"#%E3%83%9D%E3%83%BC%E3%83%88%E3%83%95%E3%82%A9%E3%83%AF%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>ポートフォワーディング設定</h3>\n<p data-sourcepos=\"198:1-198:39\">ここまでできたらグローバル</p>\n<details>\n<summary> 筆者はJCOMなのでその設定 </summary>\n<p data-sourcepos=\"203:1-203:162\"><a href=\"https://camo.qiitausercontent.com/8f78b64e722269090bc87f39034d36412f853087/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f61303433343138652d326530302d356533662d663838382d3833666538356262643161392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fa043418e-2e00-5e3f-f888-83fe85bbd1a9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b33c037070284010ef24dbe94538d57b\" alt=\"スクリーンショット 2023-05-08 0.12.38.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/a043418e-2e00-5e3f-f888-83fe85bbd1a9.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fa043418e-2e00-5e3f-f888-83fe85bbd1a9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5f4325c09dc0e858ddf0be6f3d5c0cca 1x\" loading=\"lazy\"></a></p>\n</details>\n<h2 data-sourcepos=\"208:1-208:15\">\n<span id=\"httpsssl化\" class=\"fragment\"></span><a href=\"#httpsssl%E5%8C%96\"><i class=\"fa fa-link\"></i></a>https/ssl化</h2>\n<p data-sourcepos=\"210:1-210:232\">最近のcertbotは <a href=\"https://certbot.eff.org/instructions?ws=nginx&amp;os=ubuntubionic\" rel=\"nofollow noopener\" target=\"_blank\">公式サイト</a> で自分のOS等を設定してそのコマンド通りにやるみたいです。過去記事は基本真似しないように。</p>\n<div class=\"code-frame\" data-lang=\"terminal\" data-sourcepos=\"212:1-219:3\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>apt <span class=\"nt\">-y</span> <span class=\"nb\">install </span>snapd\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>snap <span class=\"nb\">install </span>core<span class=\"p\">;</span> <span class=\"nb\">sudo </span>snap refresh core\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>apt-get remove certbot\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>snap <span class=\"nb\">install</span> <span class=\"nt\">--classic</span> certbot\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo ln</span> <span class=\"nt\">-s</span> /snap/bin/certbot /usr/bin/certbot\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>certbot <span class=\"nt\">--nginx</span>\n</code></pre></div></div>\n<p data-sourcepos=\"221:1-221:216\">自動処理のためcronの編集。毎月1日、朝4時に更新。 <code>--force-renewal</code> で残り30日を待たずに毎月更新、nginxの再起動付き。 作りたてなので本当に動くかわからない。</p>\n<div class=\"code-frame\" data-lang=\"terminal\" data-sourcepos=\"223:1-226:3\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>crontab <span class=\"nt\">-u</span> root <span class=\"nt\">-e</span>\n<span class=\"go\">00 04 01 * * sudo certbot renew --force-renewal &amp;&amp; sudo systemctl restart nginx\n</span></code></pre></div></div>\n<p data-sourcepos=\"228:1-228:106\">１時間に5回失敗するとしばらく使えないのでドライランで実行結果だけ見る。</p>\n<div class=\"code-frame\" data-lang=\"terminal\" data-sourcepos=\"230:1-232:3\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>certbot renew <span class=\"nt\">--dry-run</span>\n</code></pre></div></div>\n<p data-sourcepos=\"234:1-234:131\">nginxのサーバー設定に追記する。pemの位置は <code>sudo certbot --nginx</code> で設定したものを書いてください。</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"237:1-243:3\"><div class=\"highlight\"><pre><code>        server {\n          listen 443 ssl;\n          ssl_certificate     /etc/letsencrypt/live/example.hopto.org/fullchain.pem;\n          ssl_certificate_key /etc/letsencrypt/live/example.hopto.org/privkey.pem;\n        }\n</code></pre></div></div>\n<p data-sourcepos=\"246:1-246:29\">ラズパイ上のalias設定</p>\n<div class=\"code-frame\" data-lang=\"terminal\" data-sourcepos=\"248:1-253:3\"><div class=\"highlight\"><pre><code><span class=\"gp\">ykhirao@raspberrypi:~ $</span><span class=\"w\"> </span><span class=\"nb\">cat</span> ~/.bashrc\n<span class=\"go\">alias fix_nginx=\"sudo vim /etc/nginx/sites-available/default\"\nalias start=\"sudo systemctl start nginx &amp;&amp; nodemon ~/workspace/piapp/index.js\"\nalias stop=\"sudo systemctl stop nginx\"\n</span></code></pre></div></div>\n<p data-sourcepos=\"255:1-255:107\">httpsでアクセスして、こんな感じに <code>保護されていない通信</code> とでなくなったらOK</p>\n<p data-sourcepos=\"257:1-257:162\"><a href=\"https://camo.qiitausercontent.com/111e8f91a00e8480ede842cdb454448def8e85ff/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f65316436646239662d633933322d353665312d653339612d6238663963633066313137342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fe1d6db9f-c932-56e1-e39a-b8f9cc0f1174.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0543c3476ec3b409f719bbe654b33b7b\" alt=\"スクリーンショット 2023-05-08 0.59.18.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/e1d6db9f-c932-56e1-e39a-b8f9cc0f1174.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fe1d6db9f-c932-56e1-e39a-b8f9cc0f1174.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f3e20391092ad82cfd610b0c5e2d5c95 1x\" loading=\"lazy\"></a></p>\n<details>\n<summary> ここまでのnginx設定 </summary>\n<div class=\"code-frame\" data-lang=\"terminal\" data-sourcepos=\"264:1-292:3\"><div class=\"highlight\"><pre><code><span class=\"gp\">ykhirao@raspberrypi:~ $</span><span class=\"w\"> </span><span class=\"nb\">cat</span> /etc/nginx/sites-available/default\n<span class=\"go\">\nserver {\n</span><span class=\"gp\">\tlisten 80 default_server;</span><span class=\"w\">\n</span><span class=\"gp\">\tlisten [::]:80 default_server;</span><span class=\"w\">\n</span><span class=\"go\">\n</span><span class=\"gp\">\tssl_certificate     /etc/letsencrypt/live/example.hopto.org/fullchain.pem;</span><span class=\"w\">\n</span><span class=\"gp\">\tssl_certificate_key /etc/letsencrypt/live/example.hopto.org/privkey.pem;</span><span class=\"w\">\n</span><span class=\"gp\">\tlisten 443 ssl;</span><span class=\"w\">\n</span><span class=\"go\">\n</span><span class=\"gp\">\troot /var/www/html;</span><span class=\"w\">\n</span><span class=\"go\">\n</span><span class=\"gp\">\tindex index.html index.htm index.nginx-debian.html index.js;</span><span class=\"w\">\n</span><span class=\"go\">\n</span><span class=\"gp\">\tserver_name example.hopto.org;</span><span class=\"w\">\n</span><span class=\"go\">\n\tlocation ~ /.well-known {\n</span><span class=\"gp\">\t\tallow all;</span><span class=\"w\">\n</span><span class=\"go\">\t}\n\n\tlocation / {\n</span><span class=\"gp\">\t\t#</span><span class=\"w\"> </span>First attempt to serve request as file, <span class=\"k\">then</span>\n<span class=\"gp\">\t\t#</span><span class=\"w\"> </span>as directory, <span class=\"k\">then </span>fall back to displaying a 404.\n<span class=\"gp\">\t\ttry_files $</span>uri <span class=\"nv\">$uri</span>/ <span class=\"o\">=</span>404<span class=\"p\">;</span>\n<span class=\"gp\">\t\tproxy_pass http://localhost:3000;</span><span class=\"w\"> </span><span class=\"c\"># ★追加</span>\n<span class=\"go\">\t}\n}\n</span></code></pre></div></div>\n</details>\n<h2 data-sourcepos=\"295:1-295:67\">\n<span id=\"forever使ってnodejsをバックグラウンドで実行する\" class=\"fragment\"></span><a href=\"#forever%E4%BD%BF%E3%81%A3%E3%81%A6nodejs%E3%82%92%E3%83%90%E3%83%83%E3%82%AF%E3%82%B0%E3%83%A9%E3%82%A6%E3%83%B3%E3%83%89%E3%81%A7%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>forever使ってnodejsをバックグラウンドで実行する</h2>\n<div class=\"code-frame\" data-lang=\"terminal\" data-sourcepos=\"297:1-300:3\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>npm <span class=\"nb\">install</span> <span class=\"nt\">-g</span> forever\n<span class=\"gp\">$</span><span class=\"w\"> </span>forever index.js\n</code></pre></div></div>\n<h2 data-sourcepos=\"302:1-302:36\">\n<span id=\"vscodeでremote開発をしよう\" class=\"fragment\"></span><a href=\"#vscode%E3%81%A7remote%E9%96%8B%E7%99%BA%E3%82%92%E3%81%97%E3%82%88%E3%81%86\"><i class=\"fa fa-link\"></i></a>VSCodeでRemote開発をしよう</h2>\n<p data-sourcepos=\"304:1-304:125\"><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack\" rel=\"nofollow noopener\" target=\"_blank\">Remote DevelopmentPreview</a></p>\n<details>\n<summary>設定のスクリーンショット</summary>\n<ul data-sourcepos=\"310:1-312:0\">\n<li data-sourcepos=\"310:1-310:84\">\n<code>CMD + SHIFT + P</code> もしくは <code>CMD + P</code> でメニューを出して <code>&gt;</code> を入力</li>\n<li data-sourcepos=\"311:1-312:0\">\n<code>SSH</code> と打つと出てくる　<code>Remote SSH: connect to host</code> を選択</li>\n</ul>\n<p data-sourcepos=\"313:1-313:163\"><a href=\"https://camo.qiitausercontent.com/de7f095288a79d8fe8a458768209331887f8edf5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f61386433626334332d666334362d613563382d353766382d3432653863336233343464342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fa8d3bc43-fc46-a5c8-57f8-42e8c3b344d4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=aab844e2c3ee10b2dbd6e98360c2a2aa\" alt=\"スクリーンショット 2023-05-08 14.38.16.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/a8d3bc43-fc46-a5c8-57f8-42e8c3b344d4.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fa8d3bc43-fc46-a5c8-57f8-42e8c3b344d4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5c54230c3c0134e581f59fc432139bfb 1x\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"315:1-315:90\">ssh configを設定してたら出てくるのでpiを選択する。一応再掲する。</p>\n<div class=\"code-frame\" data-lang=\"terminal\" data-sourcepos=\"317:1-324:3\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>vim ~/.ssh/config\n<span class=\"go\">\nHost pi\n</span><span class=\"gp\">  HostName raspberrypi.local #</span><span class=\"w\"> </span>http://192.168.0.23/, <span class=\"sb\">`</span><span class=\"nv\">$ </span>ip addr<span class=\"sb\">`</span>\n<span class=\"go\">  User ykhirao\n  IdentityFile /Users/ykhirao/.ssh/id_rsa_pi\n</span></code></pre></div></div>\n<p data-sourcepos=\"326:1-326:163\"><a href=\"https://camo.qiitausercontent.com/04bf7ed5a58b5bbfe182eacf58980a996d060b03/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f61343964326331622d373364302d663464302d346562342d3332323764363365636631362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fa49d2c1b-73d0-f4d0-4eb4-3227d63ecf16.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d0e17794817b66035b2b996b5f22997e\" alt=\"スクリーンショット 2023-05-08 14.38.21.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/a49d2c1b-73d0-f4d0-4eb4-3227d63ecf16.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fa49d2c1b-73d0-f4d0-4eb4-3227d63ecf16.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8efa547db68f7b9a14c6d72a57b177b5 1x\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"328:1-328:57\">VSCodeでRemote開発できるようになりました。</p>\n<p data-sourcepos=\"330:1-330:163\"><a href=\"https://camo.qiitausercontent.com/4f3843e94efa970d19270d6ddb08d4b27bbb7ac6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f39636135353861332d656136362d613933332d623133352d3433353431653962393637392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F9ca558a3-ea66-a933-b135-43541e9b9679.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0e0e1ff8bb448de16141bc42f281f3ae\" alt=\"スクリーンショット 2023-05-08 14.38.35.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/9ca558a3-ea66-a933-b135-43541e9b9679.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F9ca558a3-ea66-a933-b135-43541e9b9679.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e7a51c347ebbfb0bb542a6e7bde6157c 1x\" loading=\"lazy\"></a></p>\n</details>\n","body":"# GWなのでラズパイ買ってきてWebサーバーとして公開した件\n\nインストーラーのアップデートなどで過去の記事の内容が古くなっていたので一応最新っぽいものを乗せます。\n全世界公開しているので自分でセキュリティの知識を得てから使ってください。責任は持てません。\nやばそうなところあったら編集リクエストくださると・・・\n\n## ラズパイ購入する\n\n* メルカリで購入しました\n* https://jp.mercari.com/search?keyword=ラズパイ\n\n## ラズパイをインストールする\n\n2023年にはRaspberry Pi Imagerというインストーラーを使うやり方が主流みたいです。\n\n* [公式](https://www.raspberrypi.com/software/)からダウンロードしましょう。\n* ここが参考になりました https://nw-electric.way-nifty.com/blog/2022/05/post-2cdd01.html\n\n初期ユーザー `user＝pi、password＝raspberry` は2022年からデフォルトで存在しないので、設定から作りましょう。以下参考\n\n<details>\n<summary>ラズパイへのアクセスはSSH/CUIのみの方向け</summary>\n\n![スクリーンショット 2023-05-07 23.14.09.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/2a5b68d2-95bb-730a-1108-33edd61d9990.png)\n\n\n* OSはPI OS Lite （ダウンロード早いです）\n* 画面右下の設定マークからSSH設定を作れます\n\n一応以下設定乗せます。mac側から `ssh pi` でログインできるようにしてます。\n\n```terminal\n$ vim ~/.ssh/config\n\nHost pi\n  HostName raspberrypi.local # http://192.168.0.23/, `$ ip addr`\n  User ykhirao\n  IdentityFile /Users/ykhirao/.ssh/id_rsa_pi\n\n$ ssh pi\n$ ykhirao@raspberrypi:~ $\n```\n\n</details>\n\n\n## サーバーを用意する\n\nnginx でも Apacheでも適当なミドルウエアとphpでもnodejsでも何でもいいのでアプリケーションサーバー選ぶ。\n何いっているのという方は[適当な記事](https://www.rworks.jp/system/system-column/sys-entry/14865/)を読む。\n\n今回は `nginx x nodejs` にしますが、ApacheのC10K問題とかまでアクセスされる予定ないので（ラズパイのメモリ性能とかが先に限界迎えるはず・・・）自分の好きな環境とか身近な記事を参考にするとよいと思います。\n\n\n上記記事と同様に設定すると、以下のコマンドを入力してサーバーを立ち上げ\n\n```terminal\n$ node index.js\n```\n\n同じネットワーク内から `http://raspberrypi.local/`　か http://192.168.0.23/ (人によってIP違う可能性あり) にアクセスしたとき `nginx` のミドルウエアが動き `nodejsサーバー` にアクセスします。うまく設定できてたら `Hello World` が表示させましょう。\n\n\n<details>\n<summary>コマンドまとめと参考記事</summary>\n\n```terminal\n# パッケージを最新版へ\n$ sudo apt-get update\n$ sudo apt-get upgrade\n\n# ミドルウエア\n$ sudo apt install nginx -y\n\n# nodejsのインストール（nが使いたいのでもろもろやってます）\n$ sudo apt install nodejs npm\n$ sudo npm install n -g\n$ sudo n lts\n$ sudo apt purge nodejs npm\n\n# アプリケーションサーバーの作成\n$ sudo mkdir -p ~/workspace/piapp\n$ sudo vi ~/workspace/piapp/index.js\n# 下記ファイルを参考に修正する\n$ sudo vi /etc/nginx/sites-enabled\n# 下記ファイルを参考に修正する\n\n# アプリケーションサーバーの立ち上げ\n$ sudo npm install nodemon -g\n$ nodemon ~/workspace/piapp/index.js\n\n# nodejsプロセスが死んでも自動で再起動させるため nodemon を利用してます。\n# 必要なければ node ~/workspace/piapp/index.js でよいです。\n```\n\n```~/workspace/piapp/index.js\nconst http = require(\"http\"); \nconst server = http.createServer(function (req, res) {\n    res.statusCode = 200;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    res.end(\"Hello World\");\n});\nserver.listen(3000);\n```\n\n```/etc/nginx/sites-enabled\n\tlocation / {\n\t\ttry_files $uri $uri/ =404;\n\t\tproxy_pass http://localhost:3000;\n\t}\n```\n\n\n参考記事\n\n* [UbuntuサーバーにnginxとNode.jsを入れてWebサーバーを建てる](https://hondakenya.work/ubuntu-nginx-node-js/)を参考にしました。\n* [Ubuntu で Node の最新版/推奨版を使う (n コマンド編)](https://qiita.com/cointoss1973/items/c000c4f84ae4b0c166b5)\n\n</details>\n\n## 自宅のルーターにポート転送設定して全世界公開します\n\nhttp://raspberrypi.local/ は同じネットワーク内のPC・スマホ等からしかアクセスできませんが、noipで作った http://example.hopto.org/ みたいなアドレスにアクセスすると `Hello World` と表示できたらOKです。 全世界に公開できました。\n\n参考にした記事\n* [安全にラズパイWebサーバーを世界に公開するための手順](https://ichiken-usa.blogspot.com/2022/01/raspi-web-server.html)\n\nポートフォワーディングを使って安全に公開しましょう。\n\n### ファイヤーウォール設定\n\n<details>\n<summary> Ubuntuのデフォルトのufwで設定 </summary>\n\nラズパイに上で以下コマンド\n\n```terminal\n$ sudo apt install ufw\n$ sudo ufw allow http\n$ sudo ufw allow https\n$ sudo ufw allow ssh\n# sshでアクセスするので必要。失敗したらsshできず終わる。\n\n$ sudo ufw enable\n\n# ラズパイの再起動\n$ sudo reboot\n```\n\n</details>\n\n\n### DDNS作成\n\n自宅のIPアドレスは定期的に変更されます。以下のようなサイトで確認できます。\n\n* [アクセス情報【使用中のIPアドレス確認】](https://www.cman.jp/network/support/go_access.cgi )\n* [JCOMでグローバルIPアドレスを変更しようとした話](https://tarufu.info/jcom-global-ip/)\n\n自宅のIPがころころ変わったら、ラズパイにアクセスできないのでもろもろいろいろやってくれるサイトにアカウント作るって話です。詳しくは調べてください。\n\n<details>\n<summary>NOIPというサイトを使います</summary>\n\nnoipのパスワードは後でJCOMルーター上の設定で必要となるので、共通で使っているもの以外がいいと思います。chromeに覚えさせましょう。\n\n参考記事\n* [No-ip のアカウント及びDDNSサーバーアドレスの取得方法](https://www.try-e.co.jp/manual/getnoip.pdf)\n\n</details>\n\n### ルーターのDDNS設定\n\n<details>\n<summary> 筆者はJCOMなのでその設定 </summary>\n\nhttp://192.168.0.1/ か http://192.168.100.1/ でアクセスできる。\n\n初期ID/PASSは以下ですが変更しましょう。\n\n```terminal\nID: admin\nPassword: password\n```\n\n設定項目は以下スクショを参考に、先程作ったnoipの情報を使ってください。\n\n![スクリーンショット 2023-05-08 0.03.54.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/660c98fb-5d38-ab87-efd2-0e845d91c284.png)\n\n\n参考にした記事\n* [HUMAX HG100R-02JG の ポート開放設定](https://homemadegarbage.com/humax-port)\n\n</details>\n\n### ポートフォワーディング設定\n\nここまでできたらグローバル\n\n<details>\n<summary> 筆者はJCOMなのでその設定 </summary>\n\n![スクリーンショット 2023-05-08 0.12.38.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/a043418e-2e00-5e3f-f888-83fe85bbd1a9.png)\n\n\n</details>\n\n## https/ssl化\n\n最近のcertbotは [公式サイト](https://certbot.eff.org/instructions?ws=nginx&os=ubuntubionic) で自分のOS等を設定してそのコマンド通りにやるみたいです。過去記事は基本真似しないように。\n\n```terminal\n$ sudo apt -y install snapd\n$ sudo snap install core; sudo snap refresh core\n$ sudo apt-get remove certbot\n$ sudo snap install --classic certbot\n$ sudo ln -s /snap/bin/certbot /usr/bin/certbot\n$ sudo certbot --nginx\n```\n\n自動処理のためcronの編集。毎月1日、朝4時に更新。 `--force-renewal` で残り30日を待たずに毎月更新、nginxの再起動付き。 作りたてなので本当に動くかわからない。\n\n```terminal\n$ sudo crontab -u root -e\n00 04 01 * * sudo certbot renew --force-renewal && sudo systemctl restart nginx\n```\n\n１時間に5回失敗するとしばらく使えないのでドライランで実行結果だけ見る。\n\n```terminal\n$ sudo certbot renew --dry-run\n```\n\nnginxのサーバー設定に追記する。pemの位置は `sudo certbot --nginx` で設定したものを書いてください。\n\n\n```\n        server {\n          listen 443 ssl;\n          ssl_certificate     /etc/letsencrypt/live/example.hopto.org/fullchain.pem;\n          ssl_certificate_key /etc/letsencrypt/live/example.hopto.org/privkey.pem;\n        }\n```\n\n\nラズパイ上のalias設定\n\n```terminal\nykhirao@raspberrypi:~ $ cat ~/.bashrc\nalias fix_nginx=\"sudo vim /etc/nginx/sites-available/default\"\nalias start=\"sudo systemctl start nginx && nodemon ~/workspace/piapp/index.js\"\nalias stop=\"sudo systemctl stop nginx\"\n```\n\nhttpsでアクセスして、こんな感じに `保護されていない通信` とでなくなったらOK\n\n![スクリーンショット 2023-05-08 0.59.18.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/e1d6db9f-c932-56e1-e39a-b8f9cc0f1174.png)\n\n\n\n<details>\n<summary> ここまでのnginx設定 </summary>\n\n```terminal\nykhirao@raspberrypi:~ $ cat /etc/nginx/sites-available/default\n\nserver {\n\tlisten 80 default_server;\n\tlisten [::]:80 default_server;\n\n\tssl_certificate     /etc/letsencrypt/live/example.hopto.org/fullchain.pem;\n\tssl_certificate_key /etc/letsencrypt/live/example.hopto.org/privkey.pem;\n\tlisten 443 ssl;\n\n\troot /var/www/html;\n\n\tindex index.html index.htm index.nginx-debian.html index.js;\n\n\tserver_name example.hopto.org;\n\n\tlocation ~ /.well-known {\n\t\tallow all;\n\t}\n\n\tlocation / {\n\t\t# First attempt to serve request as file, then\n\t\t# as directory, then fall back to displaying a 404.\n\t\ttry_files $uri $uri/ =404;\n\t\tproxy_pass http://localhost:3000; # ★追加\n\t}\n}\n```\n</details>\n\n## forever使ってnodejsをバックグラウンドで実行する\n\n```terminal\n$ npm install -g forever\n$ forever index.js\n```\n\n## VSCodeでRemote開発をしよう\n\n[Remote DevelopmentPreview](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack)\n\n\n<details>\n<summary>設定のスクリーンショット</summary>\n\n* `CMD + SHIFT + P` もしくは `CMD + P` でメニューを出して `>` を入力\n* `SSH` と打つと出てくる　`Remote SSH: connect to host` を選択\n\n![スクリーンショット 2023-05-08 14.38.16.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/a8d3bc43-fc46-a5c8-57f8-42e8c3b344d4.png)\n\nssh configを設定してたら出てくるのでpiを選択する。一応再掲する。\n\n```terminal\n$ vim ~/.ssh/config\n\nHost pi\n  HostName raspberrypi.local # http://192.168.0.23/, `$ ip addr`\n  User ykhirao\n  IdentityFile /Users/ykhirao/.ssh/id_rsa_pi\n```\n\n![スクリーンショット 2023-05-08 14.38.21.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/a49d2c1b-73d0-f4d0-4eb4-3227d63ecf16.png)\n\nVSCodeでRemote開発できるようになりました。\n\n![スクリーンショット 2023-05-08 14.38.35.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/9ca558a3-ea66-a933-b135-43541e9b9679.png)\n\n\n</details>\n","coediting":false,"comments_count":0,"created_at":"2023-05-08T01:10:08+09:00","group":null,"id":"f26e18364594e7077612","likes_count":0,"private":false,"reactions_count":0,"stocks_count":3,"tags":[{"name":"JavaScript","versions":[]},{"name":"Node.js","versions":[]},{"name":"nginx","versions":[]},{"name":"Security","versions":[]},{"name":"ラズパイ","versions":[]}],"title":"2023年GWなのでラズパイ買ってきてWebサーバーとして公開した件","updated_at":"2023-05-08T14:43:29+09:00","url":"https://qiita.com/ykhirao/items/f26e18364594e7077612","user":{"description":"Web Developer From 2016.\r\nPHP/Laravel && React/TypeScript/Node.js\r\n\r\n業務委託の依頼とかはWantedlyとかからでお願いします！","facebook_id":"","followees_count":38,"followers_count":98,"github_login_name":"ykhirao","id":"ykhirao","items_count":69,"linkedin_id":"","location":"Tokyo, Japan","name":"yk","organization":"","permanent_id":112929,"profile_image_url":"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/profile-images/1639030792","team_only":false,"twitter_screen_name":"ykhirao","website_url":"https://www.wantedly.com/id/ykhirao"},"page_views_count":null,"team_membership":null,"organization_url_name":null}},"path":"posts/f26e18364594e7077612"}
