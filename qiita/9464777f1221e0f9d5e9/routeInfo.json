{"template":"__react_static_root__/src/containers/QiitaPost","sharedHashesByProp":{},"data":{"post":{"rendered_body":"\n<h1>\n<span id=\"laravelvuejs勉強会10\" class=\"fragment\"></span><a href=\"#laravelvuejs%E5%8B%89%E5%BC%B7%E4%BC%9A10\"><i class=\"fa fa-link\"></i></a>Laravel/Vue.js勉強会#10</h1>\n\n<h2>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n\n<p>この記事は 先日の <a href=\"https://laravue.connpass.com/event/122581/\" rel=\"nofollow noopener\" target=\"_blank\">Laravel/Vue.js勉強会</a> に行ってきた感想・ポエムになります（ブログ枠）。基本的に資料は<a href=\"https://laravue.connpass.com/event/122581/presentation/\" rel=\"nofollow noopener\" target=\"_blank\">コンパス</a> にまとまっていますが、それぞれ独断と偏見で紹介していきたいと思います。発表者さんの資料を最後まで読んで欲しいなと思い、そこを目指して紹介できればと思います。主催ROXXさんの<a href=\"https://techblog.scouter.co.jp/entry/2019/07/22/120000\" rel=\"nofollow noopener\" target=\"_blank\">ブログ</a>にも内容よくまとまってます。。</p>\n\n<h2>\n<span id=\"6人分のlt紹介\" class=\"fragment\"></span><a href=\"#6%E4%BA%BA%E5%88%86%E3%81%AElt%E7%B4%B9%E4%BB%8B\"><i class=\"fa fa-link\"></i></a>6人分のLT紹介</h2>\n\n<h3>\n<span id=\"1-storybookを用いたvuejs共通コンポーネント開発との戦い--stores-fights-storybook\" class=\"fragment\"></span><a href=\"#1-storybook%E3%82%92%E7%94%A8%E3%81%84%E3%81%9Fvuejs%E5%85%B1%E9%80%9A%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E9%96%8B%E7%99%BA%E3%81%A8%E3%81%AE%E6%88%A6%E3%81%84--stores-fights-storybook\"><i class=\"fa fa-link\"></i></a>1. Storybookを用いたVue.js共通コンポーネント開発との戦い / stores-fights-storybook</h3>\n\n<p>Slide is <a href=\"https://speakerdeck.com/howdy39/stores-fights-storybook\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://speakerdeck.com/howdy39/stores-fights-storybook</a><br>\nPresenter is <a href=\"/howdy39\" class=\"user-mention js-hovercard\" title=\"howdy39\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"howdy39\">@howdy39</a> (間違いとかあったら編集リクエストとかコメントください <img alt=\":pray:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f64f.png\" title=\":pray:\" width=\"20\" loading=\"lazy\"> )</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center\">\n<a href=\"https://speakerdeck.com/howdy39/stores-fights-storybook?slide=16\" rel=\"nofollow noopener\" target=\"_blank\">ここ</a> がポイント！</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center\"><a href=\"https://camo.qiitausercontent.com/e825250519ff0535b15d8bb72e1cb68c557cbe52/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f36663462366534382d393861372d303935362d653630622d6432386532623662333462382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F6f4b6e48-98a7-0956-e60b-d28e2b6b34b8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=331bff43f46e0970afdc27ca7be23b82\" alt=\"Screenshot from 2019-07-19 22-22-48.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/6f4b6e48-98a7-0956-e60b-d28e2b6b34b8.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F6f4b6e48-98a7-0956-e60b-d28e2b6b34b8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=05c87dca19e92421884ce73ef6276c29 1x\" loading=\"lazy\"></a></td>\n</tr>\n</tbody>\n</table>\n\n<p>画像回帰テストで、自動で変化したスタイルの部分を、色付き画像で表示してくれるところの図。</p>\n\n<p>Vue.jsとかフロントエンドのコンポーネント管理はCSSの影響範囲を指定できる <code>scoped</code> があったりして、他のコンポーネントに影響を与えないように作られていますよね。だけど、それだけ綺麗に管理したとしてもどうしても意図せずCSSが崩れたりするときがあると思います。</p>\n\n<p>そこで、毎回目視チェックしなくていいように <strong>画像回帰テスト</strong> という分野で <strong>機械にやらせよう</strong> と、CIで自動的にスタイルのチェックを発火させる内容になります。とても興味深く発表を聞かせていただきました。画像回帰テストを入れるにあたって、Storybookやプライベートレポジトリでモジュール配布しないといけなかったりとか、さまざまな躓きポイントがまとまっているので、ぜひ資料を読んでみてほしいです。</p>\n\n<div class=\"code-frame\" data-lang=\"vue\"><div class=\"highlight\"><pre><code>// Vueのscoped CSSの書き方の例\n<span class=\"nt\">&lt;</span><span class=\"k\">style</span> <span class=\"na\">scoped</span><span class=\"nt\">&gt;</span>\n<span class=\"nc\">.example</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">&lt;/</span><span class=\"k\">style</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<h3>\n<span id=\"2-vuex-ormの紹介\" class=\"fragment\"></span><a href=\"#2-vuex-orm%E3%81%AE%E7%B4%B9%E4%BB%8B\"><i class=\"fa fa-link\"></i></a>2. Vuex-ORMの紹介</h3>\n\n<p>Slide is <a href=\"https://www.slideshare.net/ShoichiYashiro/vuex-orm-156257976\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.slideshare.net/ShoichiYashiro/vuex-orm-156257976</a><br>\nSlide Qiita版 <a href=\"https://qiita.com/YaCpotato/items/b51384652659a400a2b9\" id=\"reference-1f24b0809a2f840b188a\">DBをフロントに持てる！Vuex-ORM環境構築と動作確認</a><br>\nPresenter is <a href=\"/YaCpotato\" class=\"user-mention js-hovercard\" title=\"YaCpotato\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"YaCpotato\">@YaCpotato</a>  (間違いとかあったら編集リクエストとかコメントください <img alt=\":pray:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f64f.png\" title=\":pray:\" width=\"20\" loading=\"lazy\"> )</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center\">10ページ目がポイント！</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center\"><a href=\"https://camo.qiitausercontent.com/00a49dfd010ce292e26c98cc6a314d8c1566afaf/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f66643535656332322d616432632d336130652d313238302d6163373562323235346566632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Ffd55ec22-ad2c-3a0e-1280-ac75b2254efc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1f5913fd6b7fba2f8c2760207c88a96d\" alt=\"Screenshot from 2019-07-19 22-46-13.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/fd55ec22-ad2c-3a0e-1280-ac75b2254efc.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Ffd55ec22-ad2c-3a0e-1280-ac75b2254efc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=af3c68e4cf6ebe1628a6fd16c7556db1 1x\" loading=\"lazy\"></a></td>\n</tr>\n</tbody>\n</table>\n\n<p>複数のUserがいて、複数のTodosが紐付いている場合のデータ構造って複雑だよねってことを表している図。</p>\n\n<p>Vue.jsでデータを持たせるVuexをORM(Object-relational mapping)、要するにRailsのActive Record、LaravelのEloquent的にデータを扱うことができるよって話。<a href=\"https://github.com/vuex-orm/vuex-orm\" rel=\"nofollow noopener\" target=\"_blank\">vuex-orm/vuex-orm</a> はStarが1250なので、使っている人は普通にいそうな雰囲気ですね（長いものには巻かれるタイプです）。</p>\n\n<p>以下の様なJSONデータを取得するとき、 <code>User.find(1).with('todos').get()</code> みたいに書くと（デタラメに書いてるので雰囲気だけ味わって… <img alt=\":pray:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f64f.png\" title=\":pray:\" width=\"20\" loading=\"lazy\"> ）UserのID=1に紐付いているtodosも一緒に引っ張ってこれるので、バックエンド側のORMに慣れている人はドキュメントで文法みながら書くと、比較的簡単にためせるんじゃないかなと思いました。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"na\">users</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span><span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">佐藤</span><span class=\"dl\">'</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span><span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">田中</span><span class=\"dl\">'</span><span class=\"p\">}</span>\n<span class=\"p\">],</span>\n<span class=\"na\">todos</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span><span class=\"na\">user_id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">task</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">トイレ掃除</span><span class=\"dl\">'</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span><span class=\"na\">user_id</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">task</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">お風呂掃除</span><span class=\"dl\">'</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span><span class=\"na\">user_id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">task</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">大掃除</span><span class=\"dl\">'</span><span class=\"p\">},</span>\n<span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><code><span class=\"c1\">// たぶん普通に書くとこんな感じ？</span>\n<span class=\"kd\">const</span> <span class=\"nx\">userId</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">users</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"nx\">x</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">x</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"o\">===</span> <span class=\"nx\">userId</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">todos</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">todos</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"nx\">x</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">x</span><span class=\"p\">.</span><span class=\"nx\">user_id</span> <span class=\"o\">===</span> <span class=\"nx\">userId</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// たしかにこんな感じのがシンプルかもしれない</span>\n<span class=\"kd\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"nx\">User</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"kd\">with</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">todos</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"kd\">get</span><span class=\"p\">()</span>\n<span class=\"kd\">const</span> <span class=\"nx\">todos</span> <span class=\"o\">=</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">todos</span> <span class=\"c1\">// constで取り出さなくてももちろん良い</span>\n</code></pre></div></div>\n\n<h3>\n<span id=\"3-laravel--aws-で-cicdしてみた話\" class=\"fragment\"></span><a href=\"#3-laravel--aws-%E3%81%A7-cicd%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F%E8%A9%B1\"><i class=\"fa fa-link\"></i></a>3. Laravel + AWS で CI/CDしてみた話</h3>\n\n<p>Slide is <a href=\"https://slides.com/koichiminamijima/laravelaws20190718\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://slides.com/koichiminamijima/laravelaws20190718</a><br>\nPresenter is <a href=\"/ikegam1\" class=\"user-mention js-hovercard\" title=\"ikegam1\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"ikegam1\">@ikegam1</a> (間違いとかあったら編集リクエストとかコメントください <img alt=\":pray:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f64f.png\" title=\":pray:\" width=\"20\" loading=\"lazy\"> )</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center\">\n<a href=\"https://slides.com/koichiminamijima/laravelaws20190718/#/11\" rel=\"nofollow noopener\" target=\"_blank\">ここ</a>がポイント！</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center\"><a href=\"https://camo.qiitausercontent.com/e1cf22e91f4b843ec0aa36eb8ca2dae07843dfc8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f35623430653939642d393263382d393236392d626635312d6231363364653035373963362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F5b40e99d-92c8-9269-bf51-b163de0579c6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=da44fe8bbb4e10e24af5ec02be8d71b4\" alt=\"Screenshot from 2019-07-19 23-12-30.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/5b40e99d-92c8-9269-bf51-b163de0579c6.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F5b40e99d-92c8-9269-bf51-b163de0579c6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7d54599a3ab81f7a21224a518bdd4f7d 1x\" loading=\"lazy\"></a></td>\n</tr>\n</tbody>\n</table>\n\n<p>CI/CDをほぼすべてAWSプラットフォームに乗せられるということを表している図。</p>\n\n<p>レイヤーとしては、CircleCIとかGitLabCIとかそんなところ。例えばReactのコードをwebpackでビルドしてAWSのS3に乗せて、CDN的に配布するみたいな処理をしているときに、すべてAWSプラットフォームに乗っかっているととても管理が便利そうだなと思いました。いま例にあげたのは知っている会社の実例でCircleCI使ってやってた。そんな時はこの <code>CodePipeline</code> で実装してみるのもありだなと思ったです。</p>\n\n<p>CIは知っていたけど、CI/CDという言葉に馴染みがなく、勉強になりました。感謝<img alt=\":pray:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f64f.png\" title=\":pray:\" width=\"20\" loading=\"lazy\"></p>\n\n<blockquote>\n<p>「CI」とは「Continuous Integration（継続的インテグレーション）」の略で、ソフトウェア開発におけるビルドやテストを自動化し、継続的に行うアプローチのことです。</p>\n\n<p>「CD」とは「Continuous Delivery（継続的デリバリー）」の略で、CIによってテストされたコードのマージや、本番環境向けのビルドの作成を自動的に行い、本番環境にデプロイが可能な状態を整えるプロセスのことです。</p>\n\n<p>また「CD」は「Continuous Deployment（継続的デプロイ）」の略として使われることもあります。継続的デプロイは継続的デリバリーとよく似た概念ですが、継続的デリバリーがデプロイ可能な状態を準備するだけなのに対し、継続的デプロイは実際に本番環境へのデプロイまでを行う点が異なります。</p>\n\n<p>このようなビルド、テスト、デプロイを自動化し、継続的に行う手法のことを、あわせて「CI/CD」と呼びます。</p>\n\n<p>byhttps://pfs.nifcloud.com/navi/words/ci_cd.htm</p>\n</blockquote>\n\n<h3>\n<span id=\"4-vuejsでformをatomic-designしてみた時のコンポーネント間のデータのやりとり\" class=\"fragment\"></span><a href=\"#4-vuejs%E3%81%A6%E3%82%99form%E3%82%92atomic-design%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F%E6%99%82%E3%81%AE%E3%82%B3%E3%83%B3%E3%83%9B%E3%82%9A%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E9%96%93%E3%81%AE%E3%83%86%E3%82%99%E3%83%BC%E3%82%BF%E3%81%AE%E3%82%84%E3%82%8A%E3%81%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>　4. Vue.jsでFormをAtomic Designしてみた時のコンポーネント間のデータのやりとり</h3>\n\n<p>Slide is <a href=\"https://www.slideshare.net/ohashiyuta/vuejsformatomic-design-156241493\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.slideshare.net/ohashiyuta/vuejsformatomic-design-156241493</a><br>\nPresenter is <a href=\"/blue_goheimochi\" class=\"user-mention js-hovercard\" title=\"blue_goheimochi\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"blue_goheimochi\">@blue_goheimochi</a> (間違いとかあったら編集リクエストとかコメントください <img alt=\":pray:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f64f.png\" title=\":pray:\" width=\"20\" loading=\"lazy\"> )</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center\">ここは15ページだよ！</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center\"><a href=\"https://camo.qiitausercontent.com/975dd4e4ea55589448e17e7589400ea8b174fad5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f62393666643135642d643435332d353462632d376464652d3834343363646363663061622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fb96fd15d-d453-54bc-7dde-8443cdccf0ab.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=326af19548497f029c15af5c8fe4b333\" alt=\"Screenshot from 2019-07-19 23-32-22.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/b96fd15d-d453-54bc-7dde-8443cdccf0ab.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fb96fd15d-d453-54bc-7dde-8443cdccf0ab.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1975d0ccf546fbe096b6bec68dbd4e0b 1x\" loading=\"lazy\"></a></td>\n</tr>\n</tbody>\n</table>\n\n<p>フォームだと、どこがAtomic Designに適応しているか考えてみている。</p>\n\n<p>設計を学んだらすぐに自分のコードに落とし込んで考えようって思えた発表でした。実際のVue.jsのコードを見せながら、発表者さんが考えるAtomicデザインと実際のコードの落とし所とかが聞けました。</p>\n\n<blockquote>\n<p>実際に手を動かしたほうが理解がすすむ at 70page</p>\n</blockquote>\n\n<p>自分で学んだ後に実際のコードに落とし込んだことがないかたはぜひ読んでもらいたい資料になります。。！</p>\n\n<h3>\n<span id=\"5-laravelにイベントディスカバリーが実装されたので試してみる\" class=\"fragment\"></span><a href=\"#5-laravel%E3%81%AB%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AB%E3%83%90%E3%83%AA%E3%83%BC%E3%81%8C%E5%AE%9F%E8%A3%85%E3%81%95%E3%82%8C%E3%81%9F%E3%81%AE%E3%81%A7%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>5. Laravelにイベントディスカバリーが実装されたので試してみる</h3>\n\n<p>Qiita is <a href=\"https://qiita.com/niisan-tokyo/items/95338bc8e7a3353d7b9b\" class=\"autolink\" id=\"reference-6f55a3e649d73b685c9d\">https://qiita.com/niisan-tokyo/items/95338bc8e7a3353d7b9b</a><br>\nPresenter is <a href=\"/niisan-tokyo\" class=\"user-mention js-hovercard\" title=\"niisan-tokyo\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"niisan-tokyo\">@niisan-tokyo</a> (間違いとかあったら編集リクエストとかコメントください <img alt=\":pray:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f64f.png\" title=\":pray:\" width=\"20\" loading=\"lazy\"> )</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center\">イベントのリスナーにフルパスで毎回書いていくの面倒だよねって話</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center\"><a href=\"https://camo.qiitausercontent.com/a3ba45af71b97d4a1237e3ecbdf354a8fce967c9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f32636533376364322d366437612d643139662d643962362d6134663665366236646232622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F2ce37cd2-6d7a-d19f-d9b6-a4f6e6b6db2b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f1b440450433a77ecb5c7da47328d4f8\" alt=\"Screenshot from 2019-07-19 23-42-26.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/2ce37cd2-6d7a-d19f-d9b6-a4f6e6b6db2b.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2F2ce37cd2-6d7a-d19f-d9b6-a4f6e6b6db2b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=14ce74cae45234905bd483a72c762250 1x\" loading=\"lazy\"></a></td>\n</tr>\n</tbody>\n</table>\n\n<p>Laravel5.8.9からイベントディスカバリーはEventServiceProviderを使わないで済むいい感じの仕組みができたって話です。パッチバージョンでいれる小さな変化なのかな、これって正直みんな思ったはず？</p>\n\n<p>既存とのEventServiceProviderとかそんなに相性がよくないので、比較的新しめの5.8.9以降で作られたプロジェクトはこの機能を使いまくる方向に倒してもいいかもしれない。正直インパクトがない変更ですが、Laravelのトレンド追っているかたはさくっと使ってみてキャッチアップしておくのもいいかもしれない。(?)</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code>php artisan make:event DiscoveryEvent\nphp artisan make:listener DiscoveryEventListener <span class=\"nt\">--event</span> DiscoveryEvent\n</code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"php\">\n<div class=\"code-lang\"><span class=\"bold\">app/Listeners/DiscoveryEventListener.php</span></div>\n<div class=\"highlight\"><pre><code>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"kt\">DiscoveryEvent</span> <span class=\"nv\">$event</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"err\">\\</span><span class=\"nc\">Log</span><span class=\"o\">::</span><span class=\"nf\">debug</span><span class=\"p\">(</span><span class=\"s1\">'聞き届けました！'</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n</code></pre></div>\n</div>\n\n<h3>\n<span id=\"6-phpunit--openapi-validator-でスキーマが正実装が追従にする\" class=\"fragment\"></span><a href=\"#6-phpunit--openapi-validator-%E3%81%A7%E3%82%B9%E3%82%AD%E3%83%BC%E3%83%9E%E3%81%8C%E6%AD%A3%E5%AE%9F%E8%A3%85%E3%81%8C%E8%BF%BD%E5%BE%93%E3%81%AB%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>6. PHPUnit + openapi-validator で「スキーマが正、実装が追従」にする</h3>\n\n<p>Qiita is <a href=\"https://qiita.com/kon_shou/items/6e51c5dfe55c834b99c1\" class=\"autolink\" id=\"reference-c974b734b75c1b6fd79b\">https://qiita.com/kon_shou/items/6e51c5dfe55c834b99c1</a><br>\nPresenter is <a href=\"/kon_shou\" class=\"user-mention js-hovercard\" title=\"kon_shou\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"kon_shou\">@kon_shou</a>  (間違いとかあったら編集リクエストとかコメントください <img alt=\":pray:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f64f.png\" title=\":pray:\" width=\"20\" loading=\"lazy\"> )</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center\">スキーマに沿った実装しないとPHPUnitが落ちるところ p13</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center\"><a href=\"https://camo.qiitausercontent.com/97d6428ee315b12a242fe59d6f34c45007fe4c11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f62343239636430382d656334382d333465322d323939352d3232623431376535383635342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fb429cd08-ec48-34e2-2995-22b417e58654.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b69f6b1e62ce74d596f4c14266d1aa8d\" alt=\"Screenshot from 2019-07-22 13-33-30.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/b429cd08-ec48-34e2-2995-22b417e58654.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fb429cd08-ec48-34e2-2995-22b417e58654.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ec193292ee04a2dbccab3bb82e64b531 1x\" loading=\"lazy\"></a></td>\n</tr>\n</tbody>\n</table>\n\n<p>スキーマの実装はとても辛い。。。とても辛いみたいですが、一度Yamlで実装すると、ドキュメントのビルドも一瞬、PHPUnitによってリファクタリングもとても信頼性高く行えると思います。</p>\n\n<p>今回はSwaggerでスキーマ書いて、PHPUnitでそのスキーマを呼び出して、とかそういうところをどう実装したらいいか書かれているので、API開発しているところは検討の余地があるのではないでしょうか。</p>\n\n<p>yamlはこんな感じ。</p>\n\n<div class=\"code-frame\" data-lang=\"yaml\"><div class=\"highlight\"><pre><code><span class=\"na\">openapi</span><span class=\"pi\">:</span> <span class=\"s\">3.0.2</span>\n<span class=\"na\">info</span><span class=\"pi\">:</span>\n  <span class=\"na\">title</span><span class=\"pi\">:</span> <span class=\"s\">蔵書管理システムAPIドキュメント</span>\n  <span class=\"na\">description</span><span class=\"pi\">:</span> <span class=\"s\">蔵書管理システムのAPIドキュメントです</span>\n  <span class=\"na\">version</span><span class=\"pi\">:</span> <span class=\"s\">1.0.0</span>\n<span class=\"na\">servers</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"na\">url</span><span class=\"pi\">:</span> <span class=\"s\">https://example.com/api</span>\n    <span class=\"na\">description</span><span class=\"pi\">:</span> <span class=\"s\">本番環境</span>\n<span class=\"na\">paths</span><span class=\"pi\">:</span>\n  <span class=\"s\">/books</span><span class=\"pi\">:</span>\n    <span class=\"na\">get</span><span class=\"pi\">:</span>\n      <span class=\"na\">summary</span><span class=\"pi\">:</span> <span class=\"s\">本の一覧</span>\n      <span class=\"na\">description</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n        <span class=\"s\">登録してある本の一覧を取得できます</span>\n      <span class=\"na\">operationId</span><span class=\"pi\">:</span> <span class=\"s\">getBooks</span>\n</code></pre></div></div>\n\n<h3>\n<span id=\"7-masaakikunsanによるvuefesの話\" class=\"fragment\"></span><a href=\"#7-masaakikunsan%E3%81%AB%E3%82%88%E3%82%8Bvuefes%E3%81%AE%E8%A9%B1\"><i class=\"fa fa-link\"></i></a>7. masaakikunsanによるVueFesの話(?)</h3>\n\n<p>VueFes detail is <a href=\"https://vuefes.jp/2019/sessions/masaakikunsan/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://vuefes.jp/2019/sessions/masaakikunsan/</a><br>\nPresenter is <a href=\"/masaakikunsan\" class=\"user-mention js-hovercard\" title=\"masaakikunsan\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"masaakikunsan\">@masaakikunsan</a></p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center\">VueFesの発表内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center\"><a href=\"https://camo.qiitausercontent.com/d3b0db93e3e73c3d78177d03de78c2a2db2d834d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3131323932392f62323037326130382d303331612d313335662d323461302d6235306365383562356537622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fb2072a08-031a-135f-24a0-b50ce85b5e7b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=79b3ad8c606460e17aba716198a8fa4d\" alt=\"Screenshot from 2019-07-19 23-55-07.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/b2072a08-031a-135f-24a0-b50ce85b5e7b.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F112929%2Fb2072a08-031a-135f-24a0-b50ce85b5e7b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=970837765727013a85b15bf37bf90165 1x\" loading=\"lazy\"></a></td>\n</tr>\n</tbody>\n</table>\n\n<p>LT枠が一つ突如あいたので、さくっとNuxtでSlack通知アプリケーション作る挑戦をされていました。<br>\nさくっと簡単なアーキテクチャを説明された後に、今年のVueFesで Nuxt.js + TypeScriptの開発を発表するということでしたので、要期待ですね！ <img alt=\":tada:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f389.png\" title=\":tada:\" width=\"20\" loading=\"lazy\"> </p>\n\n<h2>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h2>\n\n<p>ブログ枠でした。</p>\n\n<p>.</p>\n","body":"# Laravel/Vue.js勉強会#10\n\n## はじめに\n\nこの記事は 先日の [Laravel/Vue.js勉強会](https://laravue.connpass.com/event/122581/) に行ってきた感想・ポエムになります（ブログ枠）。基本的に資料は[コンパス](https://laravue.connpass.com/event/122581/presentation/) にまとまっていますが、それぞれ独断と偏見で紹介していきたいと思います。発表者さんの資料を最後まで読んで欲しいなと思い、そこを目指して紹介できればと思います。主催ROXXさんの[ブログ](https://techblog.scouter.co.jp/entry/2019/07/22/120000)にも内容よくまとまってます。。\n\n## 6人分のLT紹介\n\n### 1. Storybookを用いたVue.js共通コンポーネント開発との戦い / stores-fights-storybook\n\nSlide is https://speakerdeck.com/howdy39/stores-fights-storybook\nPresenter is @howdy39 (間違いとかあったら編集リクエストとかコメントください :pray: )\n\n| [ここ](https://speakerdeck.com/howdy39/stores-fights-storybook?slide=16) がポイント！|\n|:--:|\n|![Screenshot from 2019-07-19 22-22-48.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/6f4b6e48-98a7-0956-e60b-d28e2b6b34b8.png)|\n\n画像回帰テストで、自動で変化したスタイルの部分を、色付き画像で表示してくれるところの図。\n\nVue.jsとかフロントエンドのコンポーネント管理はCSSの影響範囲を指定できる `scoped` があったりして、他のコンポーネントに影響を与えないように作られていますよね。だけど、それだけ綺麗に管理したとしてもどうしても意図せずCSSが崩れたりするときがあると思います。\n\nそこで、毎回目視チェックしなくていいように **画像回帰テスト** という分野で **機械にやらせよう** と、CIで自動的にスタイルのチェックを発火させる内容になります。とても興味深く発表を聞かせていただきました。画像回帰テストを入れるにあたって、Storybookやプライベートレポジトリでモジュール配布しないといけなかったりとか、さまざまな躓きポイントがまとまっているので、ぜひ資料を読んでみてほしいです。\n\n```vue\n// Vueのscoped CSSの書き方の例\n<style scoped>\n.example {\n  color: red;\n}\n</style>\n```\n\n### 2. Vuex-ORMの紹介\n\nSlide is https://www.slideshare.net/ShoichiYashiro/vuex-orm-156257976\nSlide Qiita版 [DBをフロントに持てる！Vuex-ORM環境構築と動作確認](https://qiita.com/YaCpotato/items/b51384652659a400a2b9)\nPresenter is @YaCpotato  (間違いとかあったら編集リクエストとかコメントください :pray: )\n\n\n| 10ページ目がポイント！|\n|:--:|\n|![Screenshot from 2019-07-19 22-46-13.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/fd55ec22-ad2c-3a0e-1280-ac75b2254efc.png)|\n\n複数のUserがいて、複数のTodosが紐付いている場合のデータ構造って複雑だよねってことを表している図。\n\nVue.jsでデータを持たせるVuexをORM(Object-relational mapping)、要するにRailsのActive Record、LaravelのEloquent的にデータを扱うことができるよって話。[vuex-orm/vuex-orm](https://github.com/vuex-orm/vuex-orm) はStarが1250なので、使っている人は普通にいそうな雰囲気ですね（長いものには巻かれるタイプです）。\n\n以下の様なJSONデータを取得するとき、 `User.find(1).with('todos').get()` みたいに書くと（デタラメに書いてるので雰囲気だけ味わって… :pray: ）UserのID=1に紐付いているtodosも一緒に引っ張ってこれるので、バックエンド側のORMに慣れている人はドキュメントで文法みながら書くと、比較的簡単にためせるんじゃないかなと思いました。\n\n```js\nconst data = {\nusers: [\n  {id: 1, name: '佐藤'},\n  {id: 2, name: '田中'}\n],\ntodos: [\n  {user_id: 1, task: 'トイレ掃除'},\n  {user_id: 2, task: 'お風呂掃除'},\n  {user_id: 1, task: '大掃除'},\n]\n}\n```\n\n```js\n// たぶん普通に書くとこんな感じ？\nconst userId = 1;\nconst user = data.users.find(x => x.id === userId);\nconst todos = data.todos.filter(x => x.user_id === userId);\n\n// たしかにこんな感じのがシンプルかもしれない\nconst user = User.find(1).with('todos').get()\nconst todos = user.todos // constで取り出さなくてももちろん良い\n```\n\n### 3. Laravel + AWS で CI/CDしてみた話\n\nSlide is https://slides.com/koichiminamijima/laravelaws20190718\nPresenter is @ikegam1 (間違いとかあったら編集リクエストとかコメントください :pray: )\n\n| [ここ](https://slides.com/koichiminamijima/laravelaws20190718/#/11)がポイント！|\n|:--:|\n|![Screenshot from 2019-07-19 23-12-30.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/5b40e99d-92c8-9269-bf51-b163de0579c6.png)|\n\nCI/CDをほぼすべてAWSプラットフォームに乗せられるということを表している図。\n\nレイヤーとしては、CircleCIとかGitLabCIとかそんなところ。例えばReactのコードをwebpackでビルドしてAWSのS3に乗せて、CDN的に配布するみたいな処理をしているときに、すべてAWSプラットフォームに乗っかっているととても管理が便利そうだなと思いました。いま例にあげたのは知っている会社の実例でCircleCI使ってやってた。そんな時はこの `CodePipeline` で実装してみるのもありだなと思ったです。\n\nCIは知っていたけど、CI/CDという言葉に馴染みがなく、勉強になりました。感謝:pray:\n\n> 「CI」とは「Continuous Integration（継続的インテグレーション）」の略で、ソフトウェア開発におけるビルドやテストを自動化し、継続的に行うアプローチのことです。\n\n> 「CD」とは「Continuous Delivery（継続的デリバリー）」の略で、CIによってテストされたコードのマージや、本番環境向けのビルドの作成を自動的に行い、本番環境にデプロイが可能な状態を整えるプロセスのことです。\n\n> また「CD」は「Continuous Deployment（継続的デプロイ）」の略として使われることもあります。継続的デプロイは継続的デリバリーとよく似た概念ですが、継続的デリバリーがデプロイ可能な状態を準備するだけなのに対し、継続的デプロイは実際に本番環境へのデプロイまでを行う点が異なります。\n\n> このようなビルド、テスト、デプロイを自動化し、継続的に行う手法のことを、あわせて「CI/CD」と呼びます。\n\n> byhttps://pfs.nifcloud.com/navi/words/ci_cd.htm\n\n###　4. Vue.jsでFormをAtomic Designしてみた時のコンポーネント間のデータのやりとり\n\nSlide is https://www.slideshare.net/ohashiyuta/vuejsformatomic-design-156241493\nPresenter is @blue_goheimochi (間違いとかあったら編集リクエストとかコメントください :pray: )\n\n| ここは15ページだよ！|\n|:--:|\n|![Screenshot from 2019-07-19 23-32-22.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/b96fd15d-d453-54bc-7dde-8443cdccf0ab.png)|\n\nフォームだと、どこがAtomic Designに適応しているか考えてみている。\n\n設計を学んだらすぐに自分のコードに落とし込んで考えようって思えた発表でした。実際のVue.jsのコードを見せながら、発表者さんが考えるAtomicデザインと実際のコードの落とし所とかが聞けました。\n\n> 実際に手を動かしたほうが理解がすすむ at 70page\n\n自分で学んだ後に実際のコードに落とし込んだことがないかたはぜひ読んでもらいたい資料になります。。！\n\n### 5. Laravelにイベントディスカバリーが実装されたので試してみる\n\nQiita is https://qiita.com/niisan-tokyo/items/95338bc8e7a3353d7b9b\nPresenter is @niisan-tokyo (間違いとかあったら編集リクエストとかコメントください :pray: )\n\n| イベントのリスナーにフルパスで毎回書いていくの面倒だよねって話 |\n|:--:|\n|![Screenshot from 2019-07-19 23-42-26.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/2ce37cd2-6d7a-d19f-d9b6-a4f6e6b6db2b.png)|\n\nLaravel5.8.9からイベントディスカバリーはEventServiceProviderを使わないで済むいい感じの仕組みができたって話です。パッチバージョンでいれる小さな変化なのかな、これって正直みんな思ったはず？\n\n既存とのEventServiceProviderとかそんなに相性がよくないので、比較的新しめの5.8.9以降で作られたプロジェクトはこの機能を使いまくる方向に倒してもいいかもしれない。正直インパクトがない変更ですが、Laravelのトレンド追っているかたはさくっと使ってみてキャッチアップしておくのもいいかもしれない。(?)\n\n```bash\nphp artisan make:event DiscoveryEvent\nphp artisan make:listener DiscoveryEventListener --event DiscoveryEvent\n```\n\n```app/Listeners/DiscoveryEventListener.php\n    public function handle(DiscoveryEvent $event)\n    {\n        \\Log::debug('聞き届けました！')\n    }\n```\n\n### 6. PHPUnit + openapi-validator で「スキーマが正、実装が追従」にする\n\n\nQiita is https://qiita.com/kon_shou/items/6e51c5dfe55c834b99c1\nPresenter is @kon_shou  (間違いとかあったら編集リクエストとかコメントください :pray: )\n\n| スキーマに沿った実装しないとPHPUnitが落ちるところ p13 |\n|:--:|\n|![Screenshot from 2019-07-22 13-33-30.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/b429cd08-ec48-34e2-2995-22b417e58654.png)|\n\nスキーマの実装はとても辛い。。。とても辛いみたいですが、一度Yamlで実装すると、ドキュメントのビルドも一瞬、PHPUnitによってリファクタリングもとても信頼性高く行えると思います。\n\n今回はSwaggerでスキーマ書いて、PHPUnitでそのスキーマを呼び出して、とかそういうところをどう実装したらいいか書かれているので、API開発しているところは検討の余地があるのではないでしょうか。\n\nyamlはこんな感じ。\n\n```yaml\nopenapi: 3.0.2\ninfo:\n  title: 蔵書管理システムAPIドキュメント\n  description: 蔵書管理システムのAPIドキュメントです\n  version: 1.0.0\nservers:\n  - url: https://example.com/api\n    description: 本番環境\npaths:\n  /books:\n    get:\n      summary: 本の一覧\n      description: |\n        登録してある本の一覧を取得できます\n      operationId: getBooks\n```\n\n### 7. masaakikunsanによるVueFesの話(?)\n\nVueFes detail is https://vuefes.jp/2019/sessions/masaakikunsan/\nPresenter is @masaakikunsan\n\n| VueFesの発表内容 |\n|:--:|\n|![Screenshot from 2019-07-19 23-55-07.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/b2072a08-031a-135f-24a0-b50ce85b5e7b.png)|\n\nLT枠が一つ突如あいたので、さくっとNuxtでSlack通知アプリケーション作る挑戦をされていました。\nさくっと簡単なアーキテクチャを説明された後に、今年のVueFesで Nuxt.js + TypeScriptの開発を発表するということでしたので、要期待ですね！ :tada: \n\n## 最後に\n\nブログ枠でした。\n\n.\n","coediting":false,"comments_count":0,"created_at":"2019-07-22T13:49:34+09:00","group":null,"id":"9464777f1221e0f9d5e9","likes_count":7,"private":false,"reactions_count":0,"tags":[{"name":"PHP","versions":[]},{"name":"JavaScript","versions":[]},{"name":"Laravel","versions":[]},{"name":"Vue.js","versions":[]},{"name":"laravue","versions":[]}],"title":"【Laravel/Vue.js勉強会#10】スライドのまとめと所感","updated_at":"2021-10-06T21:02:29+09:00","url":"https://qiita.com/ykhirao/items/9464777f1221e0f9d5e9","user":{"description":"Web Developer For 6 years.\r\nPHP/Laravel && (React OR Vue.js)\r\nTypeScript/node.js\r\n\r\n業務委託の依頼とかはWantedlyとかからでお願いします！","facebook_id":"","followees_count":39,"followers_count":94,"github_login_name":"ykhirao","id":"ykhirao","items_count":57,"linkedin_id":"","location":"Tokyo, Japan","name":"yk","organization":"","permanent_id":112929,"profile_image_url":"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/112929/profile-images/1639030792","team_only":false,"twitter_screen_name":"yk_hirao","website_url":"https://www.wantedly.com/id/ykhirao"},"page_views_count":null,"team_membership":null}},"path":"qiita/9464777f1221e0f9d5e9"}
